<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/12/hello-world/"/>
    <url>/2023/04/12/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git&amp;github的入门</title>
    <link href="/2023/03/25/git&amp;github%E7%9A%84%E5%85%A5%E9%97%A8/"/>
    <url>/2023/03/25/git&amp;github%E7%9A%84%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="git-amp-github入门"><a href="#git-amp-github入门" class="headerlink" title="git&amp;github入门"></a>git&amp;github入门</h2><h4 id="1-git介绍"><a href="#1-git介绍" class="headerlink" title="1. git介绍"></a>1. git介绍</h4><p>工作区：仓库的目录。工作区是独立于各个分支的。<br>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。<br>版本库：存放所有已经提交到本地仓库的代码版本<br>版本结构：树结构(倒着的有向树)，树中每个节点代表一个代码版本,树中有head位置,表示你当前操作的位置。</p><p>工作区 ——&gt; 暂存区(桥梁) ——&gt;版本库</p><h4 id="2-演示ssh连接github"><a href="#2-演示ssh连接github" class="headerlink" title="2. 演示ssh连接github"></a>2. 演示ssh连接github</h4><p>  （1）创建SSHkey<br>            打开Git Bash，输入<code>ssh-keygen -t rsa</code><br>            会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以<br>            在 C:\Users\“你的用户名”.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key<br>  （2）添加key到github<br>            github-&gt;设置-&gt;SSH公钥<br>            把key粘贴进去，标题默认是本机的名字</p><p>  （3）验证是否连接成功</p>  <div class="code-wrapper"><pre><code class="hljs vbnet">ssh -T git@github.comHi Shmilysw! You<span class="hljs-comment">&#x27;ve successfully authenticated, but GitHub does not provide shell access. // 说明成功了</span></code></pre></div><h4 id="3-演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）"><a href="#3-演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）" class="headerlink" title="3. 演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）"></a>3. 演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）</h4><p>  （1）添加用户名和邮箱<br>  <div class="code-wrapper"><pre><code class="hljs stylus">  git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> shiwei  git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-number">1828045443</span>@qq<span class="hljs-selector-class">.com</span>    <span class="hljs-comment">// 查看：</span> cat <span class="hljs-selector-class">.gitconfig</span><span class="hljs-selector-attr">[user]</span>        name = shiwei        email = <span class="hljs-number">1828045443</span>@qq.com</code></pre></div><br>  （2）创建空的项目（初始化仓库，将本地仓库和github仓库关联，将分支也关联）<br>  <div class="code-wrapper"><pre><code class="hljs crmsh">git initgit remote add origin git@github.com:Shmilysw/Learning.git // sshgit pull --rebase origin <span class="hljs-keyword">master</span> <span class="hljs-title">// 即可跟刚创建的线上远程仓库的默认分支master</span>关联git push -u origin <span class="hljs-keyword">master</span> <span class="hljs-title">// 推送到github</span>仓库</code></pre></div><br>  （3）添加文件到仓库，并查看仓库状态，将修改的文件添加到暂存区内，提交版本<br>  <div class="code-wrapper"><pre><code class="hljs awk">vim readme.txtgit status    <span class="hljs-regexp">//</span> 查看仓库状态 git add 文件名 <span class="hljs-regexp">//</span> git add . （全部加到暂存区）git commit -m <span class="hljs-string">&quot;add readme.txt&quot;</span></code></pre></div><br>  （4）在暂存区里删除内容（将文件从暂存区里拿出来，但是还是具有管理权），并对比仓库里的内容<br>  <div class="code-wrapper"><pre><code class="hljs stylus">git restore <span class="hljs-attr">--stage</span> readme<span class="hljs-selector-class">.txt</span>git diff readme.txt</code></pre></div><br>  （5）查看当前当前节点之前的路径，版本的回退<br>  <div class="code-wrapper"><pre><code class="hljs pgsql">git <span class="hljs-keyword">log</span> git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard 版本名前五个字符</span></code></pre></div><br>  （6）创建分支（协同开发），切换分支，查看分支，合并分支，删除分支<br>  <div class="code-wrapper"><pre><code class="hljs awk">git checkout -b branch_name <span class="hljs-regexp">//</span> 创建并切换到branch_name(dev)这个分支git branch                  <span class="hljs-regexp">//</span> 查看所有分支和当前所处分支git checkout branch_name    <span class="hljs-regexp">//</span> 切换到branch_name这个分支git merge branch_name       <span class="hljs-regexp">//</span> 将分支branch_name合并到当前分支上git branch -d branch_name   <span class="hljs-regexp">//</span> 删除本地仓库的branch_name分支</code></pre></div><br>（7）将当前分支推送到远程仓库</p><div class="code-wrapper"><pre><code class="hljs gams">git push --<span class="hljs-keyword">set</span>-upstream <span class="hljs-comment">origin master</span> // 第一次<span class="hljs-comment">push</span>的时候git <span class="hljs-comment">push -u</span> // <span class="hljs-comment">(</span>第一次需要<span class="hljs-comment">-u</span>以后不需要<span class="hljs-comment">)</span>：将当前分支推送到远程仓库</code></pre></div><p>（7）拉去项目到本地</p><div class="code-wrapper"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@github.com:Shmilysw/Learning.git // ssh</code></pre></div><h4 id="4-github的基本介绍"><a href="#4-github的基本介绍" class="headerlink" title="4. github的基本介绍"></a>4. github的基本介绍</h4>  <div class="code-wrapper"><pre><code class="hljs">代码托管平台</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>git&amp;github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客的使用总结</title>
    <link href="/2022/12/21/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <url>/2022/12/21/hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git-的使用"><a href="#git-的使用" class="headerlink" title="git 的使用"></a>git 的使用</h1><h3 id="使用git-bash连接到gitee"><a href="#使用git-bash连接到gitee" class="headerlink" title="使用git bash连接到gitee"></a>使用git bash连接到gitee</h3><ul><li><h4 id="1、创建SSHkey"><a href="#1、创建SSHkey" class="headerlink" title="1、创建SSHkey"></a>1、创建SSHkey</h4><p>打开Git Bash，输入ssh-keygen -t rsa<br>会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以<br>在 C:\Users\“你的用户名”.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key</p></li><li><h4 id="2、添加key到Gitee"><a href="#2、添加key到Gitee" class="headerlink" title="2、添加key到Gitee"></a>2、添加key到Gitee</h4><p>gitee-&gt;设置-&gt;SSH公钥<br>把key粘贴进去，标题默认是本机的名字</p></li><li><h4 id="3、ssh链接"><a href="#3、ssh链接" class="headerlink" title="3、ssh链接"></a>3、ssh链接</h4><h5 id="我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh"><a href="#我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh" class="headerlink" title="我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh ~"></a><strong>我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh ~</strong></h5><div class="code-wrapper"><pre><code class="hljs llvm">git remote <span class="hljs-keyword">add</span> gitee git<span class="hljs-title">@gitee.com</span>:YourUserName/YourProjectName.git</code></pre></div><p>YourUserName和YourProjectName都是要具体看你自己的实际用户名和仓库名字<br>即可，可以通过git remote -v查看</p><div class="code-wrapper"><pre><code class="hljs ada">$ssh -T git@gitee.comHi XXX! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GITEE.COM does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.</code></pre></div><p>eg:</p><div class="code-wrapper"><pre><code class="hljs ada">$ ssh -T git@gitee.comHi Shmilysw! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GITEE.COM does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.</code></pre></div></li></ul><h5 id="其他都是些git的基本使用"><a href="#其他都是些git的基本使用" class="headerlink" title="其他都是些git的基本使用"></a><strong>其他都是些git的基本使用</strong></h5><div class="code-wrapper"><pre><code class="hljs awk">git status <span class="hljs-regexp">//</span> 查看工作台状态git add . <span class="hljs-regexp">//</span> 添加文件git commit -m <span class="hljs-string">&quot;备注&quot;</span> <span class="hljs-regexp">//</span> 提交修改，并备注git push <span class="hljs-regexp">//</span> 推送至远端仓库</code></pre></div><h1 id="Hexo-命令"><a href="#Hexo-命令" class="headerlink" title="Hexo 命令"></a>Hexo 命令</h1><p><a href="https://hexo.io/zh-cn/docs/">Hexo文档</a></p><ul><li><h4 id="添加一张md页面"><a href="#添加一张md页面" class="headerlink" title="添加一张md页面"></a>添加一张md页面</h4></li></ul><div class="code-wrapper"><pre><code class="hljs gauss">$ hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;</code></pre></div><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><div class="code-wrapper"><pre><code class="hljs actionscript">$ hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;post title with whitespace&quot;</span></code></pre></div><ul><li><h4 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h4><div class="code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo server或<span class="hljs-variable">$ </span>hexo s</code></pre></div></li><li><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><div class="code-wrapper"><pre><code class="hljs verilog">$ hexo <span class="hljs-keyword">generate</span>或$ hexo g</code></pre></div></li><li><h4 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h4><div class="code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo deploy或<span class="hljs-variable">$ </span>hexo d</code></pre></div></li><li><h4 id="清除缓存文件"><a href="#清除缓存文件" class="headerlink" title="清除缓存文件"></a>清除缓存文件</h4><div class="code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean</code></pre></div><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p></li></ul><h3 id="具体部署步骤"><a href="#具体部署步骤" class="headerlink" title="具体部署步骤"></a>具体部署步骤</h3><ul><li><p>git 进入项目文件下</p><div class="code-wrapper"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>hexo clean<span class="hljs-variable">$ </span>hexo g<span class="hljs-variable">$ </span>hexo d</code></pre></div></li><li><p>打开gitee仓库</p></li><li><p>点击服务</p></li><li><p>点击Gitee Pages 服务</p></li><li><p>进行部署更新</p></li><li><p>等待更新 ~~~</p></li></ul><h1 id="Fluid-主题"><a href="#Fluid-主题" class="headerlink" title="Fluid 主题"></a>Fluid 主题</h1><h5 id="主题可以根据自己的偏好自己设置"><a href="#主题可以根据自己的偏好自己设置" class="headerlink" title="主题可以根据自己的偏好自己设置"></a>主题可以根据自己的偏好自己设置</h5><p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></p><p><a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">Hexo Fluid 配置指南</a></p>]]></content>
    
    
    <categories>
      
      <category>博客的总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>hexo</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅学JavaScript</title>
    <link href="/2022/10/18/JavaScript/"/>
    <url>/2022/10/18/JavaScript/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>快速入门笔记（只能说是浅浅的学了一点！）</p><p>文档建议使用   <a href="https://www.w3school.com.cn/">w3school</a></p><hr><h2 id="1、什么是JavaScript"><a href="#1、什么是JavaScript" class="headerlink" title="1、什么是JavaScript?"></a>1、什么是JavaScript?</h2><h3 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h3><p>JavaScript是一门世界上最流行的脚本语言</p><p>JavaScript一门弱类型脚本语言，其源代码在发往客户端运行之前不需要编译，而是将文本格式的字符代码发送给浏览器由浏览器解释运行。</p><h3 id="1-2、历史"><a href="#1-2、历史" class="headerlink" title="1.2、历史"></a>1.2、历史</h3><p><a href="https://so.csdn.net/so/search?q=ECMAScript&spm=1001.2101.3001.7020">ECMAScript</a>：可以理解为JavaScript的一个标准</p><p>Native原生JS开发<br>原生JS开发，也就是让我们按照【ECMAScript】标准的开发方式，简称是ES，特点是所有浏览器都支持，ES标准已发布如下版本：<br>ES3<br>ES4（内部，未正式发布）<br>ES5（全浏览器支持）<br>ES6（常用，当前主流版本：webpack打包成为ES5支持）<br>ES7<br>ES8<br>ES9</p><h3 id="1-3-大前端开发"><a href="#1-3-大前端开发" class="headerlink" title="1.3 大前端开发"></a>1.3 大前端开发</h3><h4 id="1-3-1-TypeScript-微软的标准"><a href="#1-3-1-TypeScript-微软的标准" class="headerlink" title="1.3.1 TypeScript 微软的标准"></a>1.3.1 TypeScript 微软的标准</h4><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。<br>该语言的特点就是除了具备ES的特征之外还纳入了许多不在标准范围内的新特性，所以会导致很多浏览器不能直接支持。TypeScript语法，需要编译后（编译成js文件）才能被浏览器正确执行。</p><h4 id="1-3-2-JavaScript库"><a href="#1-3-2-JavaScript库" class="headerlink" title="1.3.2 JavaScript库"></a>1.3.2 JavaScript库</h4><p>jQuery：<br>优点是简化了DOM操作，缺点是DOM操作太频繁，影响前台性能。在前端眼里使用它仅仅是为了兼容IE6、7、8。</p><h4 id="1-3-3-JavaScript框架"><a href="#1-3-3-JavaScript框架" class="headerlink" title="1.3.3 JavaScript框架"></a>1.3.3 JavaScript框架</h4><p><strong>Angular：</strong><br>Google收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了模块化开发的理念，与微软合作，采用TypeScript语法开发，对后台程序员友好，对前端程序员不友好，缺点是版本迭代不合理（1代-&gt;2代，除了名字相同，基本就是两个东西）。<br><strong>React：</strong><br>Facebook出品，一款高性能能的JS前端框架，特点是提出了新概念【虚拟DOM】用于减少真实DOM操作，在内存中模拟DOM操作，有效的提升了前端渲染效率，缺点是使用复杂，因为需要额外学习一门【JSX】语言。<br><strong>Vue：</strong><br>一款渐进式Javascript框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点。<br><strong>Axios：</strong><br>前端通信框架，因为Vue的边界很明确，即使为了处理DOM，所以并不具备通信能能力，因此就需要额外使用一个通信框架与服务器交互，当然也可以直接使用jQuery提供的AJAX通信功能。</p><h4 id="1-3-4-UI框架"><a href="#1-3-4-UI框架" class="headerlink" title="1.3.4 UI框架"></a>1.3.4 UI框架</h4><p><strong>Ant-Design：</strong>阿里巴巴出品，基于React的UI框架。<br><strong>ElementUI、iview、ice：</strong>饿了么出品，基于Vue的UI框架。<br><strong>Bootstrap：</strong> Twitter推出的一个用于前端开发的工具包。<br><strong>AmazeUI：</strong> 一款HTML5跨屏前端框架。</p><h4 id="1-3-5-Javascript构建工具"><a href="#1-3-5-Javascript构建工具" class="headerlink" title="1.3.5 Javascript构建工具"></a>1.3.5 Javascript构建工具</h4><p><strong>Babel：</strong> js编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript。<br><strong>WebPack：</strong> 模块打包工具，主要作用是打包、压缩、合并以及按序加载。</p><h4 id="1-3-6-后端技术"><a href="#1-3-6-后端技术" class="headerlink" title="1.3.6 后端技术"></a>1.3.6 后端技术</h4><p>前端人员为了方便开发也需要掌握一定的后端技术，但Java后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，出现了Node.JS<strong>（JavaScript的运行环境）</strong>这样的技术。<br>Node.JS的作者已经生成放弃Node.JS（说是架构做的不好在加上笨重的node_modules），开始开发全新架构的Deno。<br>既然是后台技术，那肯定也需要框架和项目管理工具，Node.JS框架及项目管理工具如下：<br><strong>Express：</strong> NodeJS框架<br><strong>Koa：</strong> Express简化版<br><strong>NPM：</strong> 项目综合管理工具，类似于Maven<br><strong>YARN：</strong> NPM的代提方案，类似于Maven和Gradle的关系</p><hr><h2 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h2><h3 id="2-1-引入JavaScript"><a href="#2-1-引入JavaScript" class="headerlink" title="2.1 引入JavaScript"></a>2.1 引入JavaScript</h3><h4 id="2-1-1内部标签"><a href="#2-1-1内部标签" class="headerlink" title="2.1.1内部标签"></a>2.1.1内部标签</h4><p><strong>script位置</strong><br>可以放在head标签内或body</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 弹窗输出hello word --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello word&#x27;</span>);</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><h4 id="2-1-2外部引入"><a href="#2-1-2外部引入" class="headerlink" title="2.1.2外部引入"></a>2.1.2外部引入</h4><p><strong>问题</strong>：外部引用一定要写全，不要写这样</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 弹窗输出hello word --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/sw.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!-- 当前类型，不用显示定义也可以 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span></code></pre></div><h3 id="2-2浏览器调试"><a href="#2-2浏览器调试" class="headerlink" title="2.2浏览器调试"></a>2.2浏览器调试</h3><p>在浏览器按F12进入开发中模式，选择控制台可以写JavaScript观察输出，并且有调试功能。<br>浏览器控制台打印：console.log();</p><p>调试器：可以打断点，一行一行执行，观看代码运行情况。</p><h3 id="2-3严格模式"><a href="#2-3严格模式" class="headerlink" title="2.3严格模式"></a>2.3严格模式</h3><p>js自己检查代码是否书写正确</p><div class="code-wrapper"><pre><code class="hljs html">// 必须写在第一行&#x27;use strict&#x27;// 定义变量可以用var 或 let 最好使用letlet a = 9;// let a = 9;（局部变量） a = 9（全局变量）console.log(a);</code></pre></div><hr><h2 id="3、数据类型"><a href="#3、数据类型" class="headerlink" title="3、数据类型"></a>3、数据类型</h2><h3 id="3-1、字符串"><a href="#3-1、字符串" class="headerlink" title="3.1、字符串"></a>3.1、字符串</h3><p>1、正常字符我们使用 单引号，或者双引号</p><p>2、转义字符 \</p><div class="code-wrapper"><pre><code class="hljs livescript"><span class="hljs-string">\&#x27;</span><span class="hljs-string">\n</span><span class="hljs-string">\t</span><span class="hljs-string">\u4e2d</span> <span class="hljs-string">\u####</span> Unicode字符<span class="hljs-string">\x41</span>          Ascll字符</code></pre></div><p>3、多行字符串编写</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// tab 上面 esc 键下面</span><span class="hljs-keyword">var</span> msg = <span class="hljs-string">`</span><span class="hljs-string">hello</span><span class="hljs-string">world</span><span class="hljs-string">你好ya</span><span class="hljs-string">你好</span><span class="hljs-string">`</span></code></pre></div><p>4、模板字符串</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;shiwei&quot;</span>;<span class="hljs-keyword">let</span> age = <span class="hljs-number">3</span>;<span class="hljs-keyword">let</span> msg = <span class="hljs-string">`你好呀，<span class="hljs-subst">$&#123;name&#125;</span>`</span></code></pre></div><p>5、字符串长度</p><div class="code-wrapper"><pre><code class="hljs javascript">str.<span class="hljs-property">length</span></code></pre></div><p>6、字符串的可变性，不可变</p><p>7、大小写转换</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 注意，这里是方法，不是属性了</span>student.<span class="hljs-title function_">toUpperCase</span>() <span class="hljs-comment">// 变为大写</span>student.<span class="hljs-title function_">toLowerCase</span>() <span class="hljs-comment">// 变为小写</span></code></pre></div><p>8、student.indexOf(‘t’) 获取指定字符串的下标</p><p>9、substring</p><div class="code-wrapper"><pre><code class="hljs javascript">[) student.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 从第一个字符串截取到最后一个字符串</span> student.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) <span class="hljs-comment">// [1, 3)</span></code></pre></div><h3 id="3-2-、数组"><a href="#3-2-、数组" class="headerlink" title="3.2 、数组"></a>3.2 、数组</h3><p><strong>Array（数组）可以包含任意的数据类型</strong></p><p>eg：</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&#x27;shiwei&#x27;</span>, <span class="hljs-string">&quot;石玮&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">undefined</span>]</code></pre></div><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>] <span class="hljs-comment">// 通过下标取值和赋值</span>arr[<span class="hljs-number">0</span>]arr[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span></code></pre></div><p>1、长度</p><div class="code-wrapper"><pre><code class="hljs javascript">arr.<span class="hljs-property">length</span></code></pre></div><p>注意 :  加入给arr.length 赋值，数组的大小就会发生改变，如果赋值过小，元素就会丢失，如果数据超过长度，也不会报错，会显示undefined，是JavaScript特有的</p><p>2、indexof()，通过元素获得下标索引</p><div class="code-wrapper"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">indexof</span>(<span class="hljs-number">2</span>)<span class="hljs-number">1</span></code></pre></div><p>字符串的额”1” 和数字的 1 是不同的</p><ul><li>== （判断数值相等，类型可以不相同，不建议使用，属于是js的缺陷）</li><li>=== （判断数值和类型相同，和java相同，建议使用）</li></ul><p><strong>3、slice()</strong>   截取Array的一部分，返回一个新数组，类似String中的substring</p><p><strong>4、push()、pop() 尾部</strong></p><div class="code-wrapper"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">push</span>()  <span class="hljs-comment">// 压入到尾部</span>arr.<span class="hljs-title function_">pop</span>()   <span class="hljs-comment">// 弹出尾部的一个元素</span></code></pre></div><p><strong>5、unshift()、shift() 头部</strong></p><div class="code-wrapper"><pre><code class="hljs javascript">arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>) <span class="hljs-comment">// 压入头部，返回数组的长度</span>arr.<span class="hljs-title function_">shifit</span>() <span class="hljs-comment">// 弹出头部的一个元素，返回弹出的元素</span></code></pre></div><p>6、排序 sort()</p><div class="code-wrapper"><pre><code class="hljs javascript">arr = [<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]arr.<span class="hljs-title function_">sort</span>()arr = [<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>]</code></pre></div><p>7、元素反转 reverse()</p><div class="code-wrapper"><pre><code class="hljs javascript">arr = [<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>]arr.<span class="hljs-title function_">sort</span>()arr = [<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]</code></pre></div><p><strong>8、concat () 拼接</strong></p><div class="code-wrapper"><pre><code class="hljs javascript">arr = [<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>]arr.<span class="hljs-title function_">concat</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])arr = [<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]</code></pre></div><p>注意: concat () 并没有修改数组. 只是返回一个新的数组</p><p>9、连接符 join</p><p>打印拼接数组，使用特定的字符换拼接</p><div class="code-wrapper"><pre><code class="hljs javascript">(<span class="hljs-number">3</span>) [<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>]arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;-&#x27;</span>)&gt; <span class="hljs-string">&#x27;B-C-A&#x27;</span></code></pre></div><p>10、多维数组</p><div class="code-wrapper"><pre><code class="hljs javascript">arr = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>]];arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]&gt; <span class="hljs-number">4</span></code></pre></div><p>11、还有简单的一些</p> <div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// fill 填充</span>arr.<span class="hljs-title function_">fill</span>(<span class="hljs-number">1</span>)&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]<span class="hljs-comment">// find 查找 （不是一个方法）</span><span class="hljs-comment">// arr.find(作为函数提供)</span></code></pre></div><p>数组：存储数据（如何存，如何取，方法都可以自己实现！）</p><h3 id="3-3、对象"><a href="#3-3、对象" class="headerlink" title="3.3、对象"></a>3.3、对象</h3><ol><li>JavaScript 中的<strong>所有事物</strong>都是对象：字符串、数字、数组、日期，等等。</li><li>在 JavaScript 中，对象是拥有<strong>属性</strong>和<strong>方法</strong>的数据。</li></ol><p>若干个赋值对</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> 对象名 = &#123;    属性名:属性值,    属性名:属性值,    属性名:属性值&#125;<span class="hljs-comment">// 定义了一个person对象，它有四个属性！</span><span class="hljs-keyword">var</span> person = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;shiwei&quot;</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,    <span class="hljs-attr">email</span>: <span class="hljs-string">&quot;1828045443@qq.com&quot;</span>,    <span class="hljs-attr">score</span>: <span class="hljs-number">0</span>&#125;</code></pre></div><p>Js中对象，{…..} 表示一个对象，键值对描述属性 xxxx: xxxx，多个属性之间使用逗号隔开，最后一个属性不加逗号！</p><p>JavaScript中的所有的键都是字符串，值是任意对象！</p><p>1、对象赋值</p><div class="code-wrapper"><pre><code class="hljs javascript">person.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;shiwei&quot;</span>&gt; <span class="hljs-string">&quot;shiwei&quot;</span>person.<span class="hljs-property">name</span>&gt; <span class="hljs-string">&quot;shiwei&quot;</span></code></pre></div><p>2、使用一个不存在的对象属性，不会报错！undefined</p><div class="code-wrapper"><pre><code class="hljs javascript">person.<span class="hljs-property">haha</span>&gt; <span class="hljs-literal">undefined</span></code></pre></div><p>3、动态的删减属性</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">delete</span> person.<span class="hljs-property">name</span>&gt; <span class="hljs-literal">true</span>person&gt; &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">&quot;1828045443@qq.com&quot;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">0</span>&#125;</code></pre></div><p>4、动态的添加，直接给新的属性添加值即可</p><div class="code-wrapper"><pre><code class="hljs javascript">person.<span class="hljs-property">haha</span> = <span class="hljs-string">&quot;haha&quot;</span>&gt; <span class="hljs-string">&quot;haha&quot;</span>person&gt; &#123;<span class="hljs-attr">age</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">&quot;1828045443@qq.com&quot;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">haha</span>: <span class="hljs-string">&quot;haha&quot;</span>&#125;</code></pre></div><p>5、判断属性值是否在这个对象中！ xxx in xxx!</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;age&#x27;</span> <span class="hljs-keyword">in</span> person&gt; <span class="hljs-literal">true</span><span class="hljs-comment">// 继承</span><span class="hljs-string">&#x27;tostring&#x27;</span> <span class="hljs-keyword">in</span> person&gt; <span class="hljs-literal">true</span></code></pre></div><p>6、判断一个属性是否是这个对象自身拥有的  <em>hasOwnProperty()</em></p><div class="code-wrapper"><pre><code class="hljs javascript">person.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;tostring&#x27;</span>)&gt; <span class="hljs-literal">false</span>person.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;age&#x27;</span>)&gt; <span class="hljs-literal">true</span></code></pre></div><h3 id="3-4、流程控制"><a href="#3-4、流程控制" class="headerlink" title="3.4、流程控制"></a>3.4、流程控制</h3><p>if 判断</p><p>循环  for   while    do while </p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span> ; i ++ ) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);&#125;</code></pre></div><p>forEach 循环</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = [<span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">18</span>, <span class="hljs-number">66</span>]<span class="hljs-comment">// 函数</span>age.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);&#125;)</code></pre></div><p>for … in     (索引值 key)  for (var index in object) {} </p><p>for … of     (具体的值 value)（也可以打印map和set的值）</p><h3 id="3-5、Map和Set"><a href="#3-5、Map和Set" class="headerlink" title="3.5、Map和Set"></a>3.5、Map和Set</h3><blockquote><p>ES6 的新特性</p></blockquote><p>Map:</p><p>Map 和python里的字典一样</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6 Map</span><span class="hljs-comment">// 学生的成绩，学生的名字</span><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-number">100</span>], [<span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-number">90</span>], [<span class="hljs-string">&#x27;haha&#x27;</span>, <span class="hljs-number">80</span>]);<span class="hljs-keyword">var</span> name = map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;tom&#x27;</span>); <span class="hljs-comment">// 通过key获取value</span>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-number">123456</span>); <span class="hljs-comment">// 新增或修改</span>map.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&quot;tom&quot;</span>); <span class="hljs-comment">// 删除</span></code></pre></div><p>Set: 无序不重复的集合</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]); <span class="hljs-comment">//  set可以去重</span>set.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 添加！</span>set.<span class="hljs-title function_">delete</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 删除！</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(set.<span class="hljs-title function_">has</span>(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 是否包含某个元素！</span></code></pre></div><h3 id="3-6、iterator-迭代器"><a href="#3-6、iterator-迭代器" class="headerlink" title="3.6、iterator(迭代器)"></a>3.6、iterator(迭代器)</h3><blockquote><p>ES6 的新特性</p></blockquote><p>遍历数组</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 通过for of / for in 下标</span><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> arr) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);&#125;</code></pre></div><p>遍历map</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-number">100</span>],[<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">90</span>],[<span class="hljs-string">&quot;haha&quot;</span>,<span class="hljs-number">80</span>]]);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> map) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);&#125;</code></pre></div><p>遍历set</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> set) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);&#125;</code></pre></div><hr><h2 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h2><p>方法：对象（属性，方法）（把函数放到对象里面就成了方法）</p><p>方法（method）: 当将<strong>函数</strong>和<strong>对象</strong>合写在一起时，函数就变成了 “方法”（method）// 当函数赋值给对象的属性，我们称为”方法”</p><p>函数：</p><p>函数（function）: 函数是带有名称（named）和参数的JavaScript代码段，可以一次定义多次调用</p><blockquote><p> 函数和方法本质上是一样的，只不过方法是函数的特例，是将<strong>函数</strong>值赋给了<strong>对象</strong>，只是放到的位置不同。</p></blockquote><p><a href="https://blog.csdn.net/qq_44163269/article/details/104627274">javascript中函数和方法的区别</a></p><h3 id="4-1、定义函数"><a href="#4-1、定义函数" class="headerlink" title="4.1、定义函数"></a>4.1、定义函数</h3><blockquote><p>定义方式一</p></blockquote><p>绝对值函数</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">abs</span>(<span class="hljs-params">x</span>) &#123;    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">return</span> x;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> -x;    &#125;&#125;</code></pre></div><p>一旦执行到  return  代表函数结束，返回结果！</p><p>如果没有执行  return  , 函数执行完也会返回结果，结果就是 undefined</p><blockquote><p>定义方式二</p></blockquote><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 匿名函数，匿名内部类</span><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">return</span> x;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> -x;    &#125;&#125;</code></pre></div><p>定义方式一和定义方式二等价！</p><p>参数问题：JavaScript可以传任意个参数，也可以不传参数</p><p>参数进来是否存在的问题：</p><p>假设参数不存在，如何规避？</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;  <span class="hljs-comment">//手动抛出异常来判断</span>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> x !== <span class="hljs-string">&#x27;number&#x27;</span>)&#123;        <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;Not a Number&#x27;</span>;    &#125;    <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">return</span> x;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> -x;    &#125;&#125;</code></pre></div><p><code>arguments </code>是一个js免费赠送的关键字</p><p><code>arguments </code>： 代表传递进来的所有参数，是一个数组</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> abs = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;x=&gt;&quot;</span> + x);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> ; i ++ ) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[i]);    &#125;    <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">return</span> x;    &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> -x;    &#125;&#125;</code></pre></div><p>问题：arguments包含所有参数，我们有时想使用多余的参数来进行附加操作，需要排除已有的参数</p><p><code>rest</code> : 获取没有使用的参数，从前往后没有使用的参数（前面的按顺序是使用的参数，后面全部都是不使用的参数）</p><p>before:</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">shiwei</span>(<span class="hljs-params">a, b</span>) &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a=&gt;&quot;</span> + a);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b=&gt;&quot;</span> + b);    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">2</span>) &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> ; i ++ ) &#123;            <span class="hljs-comment">// 。。。。。。。</span>        &#125;    &#125;&#125;</code></pre></div><p>now：</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">shiwei</span>(<span class="hljs-params">a,b,...rest</span>)&#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a=&gt;&quot;</span> + a);      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b=&gt;&quot;</span> + b);      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest);  &#125; <span class="hljs-comment">// rest 只能写在后面，必须用...标识</span><span class="hljs-comment">/*</span><span class="hljs-comment">eg:</span><span class="hljs-comment">shiwei(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><span class="hljs-comment">&gt; a=&gt; 1</span><span class="hljs-comment">&gt; b=&gt; 2</span><span class="hljs-comment">&gt; [3, 4, 5, 6, 7, 8, 9]</span><span class="hljs-comment">*/</span><span class="hljs-comment">/*</span><span class="hljs-comment">eg:</span><span class="hljs-comment">shiwei(1)</span><span class="hljs-comment">&gt; a=&gt; 1</span><span class="hljs-comment">&gt; b=&gt; undefined</span><span class="hljs-comment">&gt; []</span><span class="hljs-comment">*/</span></code></pre></div><h3 id="4-2-、变量的作用域"><a href="#4-2-、变量的作用域" class="headerlink" title="4.2 、变量的作用域"></a>4.2 、变量的作用域</h3><p>在JavaScript中，var 定义变量实际是有作用域的， 一般认为var是全局变量，let是局部变量</p><ul><li>假设在函数体中声明，则在函数体外不可以使用，（非要想用的话，之后可以研究<strong>闭包</strong>）</li></ul><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">qj</span>(<span class="hljs-params"></span>) &#123;      <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;      x = x + <span class="hljs-number">1</span>;  &#125;    x = x + <span class="hljs-number">2</span>; <span class="hljs-comment">//Uncaught ReferenceError: x is not defined</span></code></pre></div><ul><li><p>如果两个函数使用了相同的变量名，只要在函数内部，就不冲突</p></li><li><p>内部函数可以访问外部函数，反之则不行</p></li></ul><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">qj</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;    <span class="hljs-comment">// 内部函数可以访问外部函数，反之则不行</span>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">qj2</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">var</span> y = x + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 2</span>    &#125;    <span class="hljs-keyword">var</span> z = y + <span class="hljs-number">1</span>;  <span class="hljs-comment">// Uncaught ReferenceError: z is not defined</span>&#125;</code></pre></div><p>假设，内部函数变量和外部函数的变量，重名</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">qj</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;     <span class="hljs-keyword">function</span> <span class="hljs-title function_">qj2</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">var</span> x = <span class="hljs-string">&#x27;A&#x27;</span>;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inner&#x27;</span> + x); <span class="hljs-comment">//outer1</span>  &#125;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;outer&#x27;</span> + x); <span class="hljs-comment">//innerA</span>  <span class="hljs-title function_">qj2</span>()  &#125;<span class="hljs-title function_">qj</span>()</code></pre></div><p>假设在JavaScript中函数查找变量从自身函数开始，由“内”向“外” 查找，假设外部存在这个同名的函数变量，则在内部函数会屏蔽外部函数的变量。<code>提升变量的作用域</code></p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">qj</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;x&quot;</span> + y;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);  <span class="hljs-keyword">var</span> y = <span class="hljs-string">&#x27;y&#x27;</span>;&#125;<span class="hljs-comment">//结果： y undefined</span></code></pre></div><p>说明:JS执行引擎，自动提升了y的声明，但是不会提升变量y的赋值（这不是废话嘛？）</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">qj2</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">var</span> y；  <span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;x&quot;</span> + y;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);  y = <span class="hljs-string">&#x27;y&#x27;</span>;&#125;</code></pre></div><p>这个是在JavaScript建立之初就存在的特性。养成<strong>规范</strong>：所有变量定义都在函数的头部，不要乱放，便于代码维护（也是废话！）</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">qj2</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>；  y = x + <span class="hljs-number">1</span>;  z, i, a;  <span class="hljs-comment">// undefined</span>&#125;</code></pre></div><p>全局函数</p><p><strong>默认所有的全局变量，都会自动绑定在window对象下</strong></p><p>JavaScript实际上只有一个全局作用域，任何变量(函数也可以视为变量)，假设没有任何函数作用范围内找到，就会向外查找，如果在全局作用域都没有找到，报错<strong>RefrenceError</strong></p><p>由于我们所有的全局变量都会绑定到我们的window上，如果不同的js文件，使用了相同的全局变量，冲突。 —如何减少冲突？</p><blockquote><p> 把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名的冲突的问题。jQuery可以解决。</p></blockquote><blockquote><p> ES6 let 关键字，解决局部作用域冲突问题</p><p> 常量 const</p></blockquote><h3 id="4-3、方法"><a href="#4-3、方法" class="headerlink" title="4.3、方法"></a>4.3、方法</h3><blockquote><p> 方法：对象（属性，方法）（把函数放到对象里面就成了方法）</p></blockquote><p>方法就是把函数放在对象的里面，对象只有两个东西：属性 和 方法</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> shi = &#123;    name　: <span class="hljs-string">&#x27;shiwei&#x27;</span>,    birth : <span class="hljs-number">2002</span>,    <span class="hljs-comment">//方法</span>    age : <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;        <span class="hljs-comment">//今年 - 出生年</span>        <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();        <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;    &#125;&#125;<span class="hljs-comment">//属性</span>shi.<span class="hljs-property">name</span><span class="hljs-comment">//方法</span>shi.<span class="hljs-title function_">age</span>()</code></pre></div><p>this. 代表什么？拆开上面的代码看看</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();    <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;&#125;<span class="hljs-keyword">var</span> shi = &#123;    name　: <span class="hljs-string">&#x27;shiwei&#x27;</span>,    birth : <span class="hljs-number">2002</span>,    age : getAge&#125;<span class="hljs-comment">// shi.age()     ok</span><span class="hljs-comment">// getAge()      NaN   window</span><span class="hljs-comment">// 直接调用getAge表示调用window的这个方法,但是window没有</span></code></pre></div><p>this 是无法指向的， 是默认指向调用它的那个对象</p><blockquote><p>apply</p></blockquote><p>可以指定  this 的作用对象（一种调用方法的方法 ）</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>)&#123;        <span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();        <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;    &#125;    <span class="hljs-keyword">let</span> shi = &#123;        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;石玮&quot;</span>,        <span class="hljs-attr">birth</span>: <span class="hljs-number">2002</span>,        <span class="hljs-attr">age</span>: getAge    &#125;;    <span class="hljs-keyword">let</span> xiaoming = &#123;        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,        <span class="hljs-attr">birth</span>: <span class="hljs-number">2010</span>,        <span class="hljs-attr">age</span>: getAge    &#125;; getAge.<span class="hljs-title function_">apply</span>(shi, []); <span class="hljs-comment">// this, 指向了 shi 这个对象，参数为空</span>    <span class="hljs-comment">//getAge.apply(EASON, []);</span>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(getAge.<span class="hljs-title function_">apply</span>(shi,[]));    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(getAge.<span class="hljs-title function_">apply</span>(xiaoming,[]));</code></pre></div><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">20</span><span class="hljs-number">12</span></code></pre></div><hr><h2 id="5、内部对象"><a href="#5、内部对象" class="headerlink" title="5、内部对象"></a>5、内部对象</h2><blockquote><p>标准对象</p></blockquote><p>JavaScript 中的<strong>所有事物</strong>都是对象：字符串、数字、数组、日期，等等。</p><h3 id="5-1、Date"><a href="#5-1、Date" class="headerlink" title="5.1、Date"></a>5.1、Date</h3><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 基本使用</span>now.<span class="hljs-title function_">getFullYear</span>(); <span class="hljs-comment">// 年</span>now.<span class="hljs-title function_">getMonth</span>(); <span class="hljs-comment">// 月 0~11 没有12月</span>now.<span class="hljs-title function_">getDate</span>(); <span class="hljs-comment">// 日</span>now.<span class="hljs-title function_">getDay</span>(); <span class="hljs-comment">// 星期几</span>now.<span class="hljs-title function_">getHours</span>(); <span class="hljs-comment">// 时</span>now.<span class="hljs-title function_">getMinutes</span>(); <span class="hljs-comment">// 分</span>now.<span class="hljs-title function_">getSeconds</span>(); <span class="hljs-comment">// 秒</span><span class="hljs-comment">// 使用js获取时间一般使用时间戳，因为其它是可以更改的</span>now.<span class="hljs-title function_">getTime</span>(); <span class="hljs-comment">// 时间戳（1970年1月1日按时区到现在的毫秒值）</span><span class="hljs-comment">// 转化时间格式</span>now.<span class="hljs-title function_">toLocaleString</span>();<span class="hljs-comment">//返回值：&quot;2022/6/2 21:33:10&quot; </span></code></pre></div><h3 id="5-2、JSON"><a href="#5-2、JSON" class="headerlink" title="5.2、JSON"></a>5.2、JSON</h3><blockquote><p>json 是什么</p></blockquote><p>早期，所有数据传输习惯使用 XML 文件！</p><ul><li>JSON（JavaScript Object Notation, JS 对象简谱）是一种轻量级的数据交换格式。</li><li>简洁和清晰的层次结构使得JSON成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在JavaScript一切皆为对象、任何 js 支持的类型都可以用 JSON 来表示；</p><p>格式：</p><ul><li>对象都用 {}</li><li>数组都用 []</li><li>所有的键值对都是用 key : value</li></ul><p>JSON 字符串和 JS 对象的转化</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> user = &#123;    name : <span class="hljs-string">&quot;shiwei&quot;</span>,    age : <span class="hljs-number">3</span>,    sex : <span class="hljs-string">&#x27;男&#x27;</span>  &#125;    <span class="hljs-comment">//对象转化为json字符串---&gt;&#123;&quot;name&quot;:&quot;shiwei&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;</span>  <span class="hljs-keyword">var</span> jsonUser = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user)    <span class="hljs-comment">//json 字符串转化为对象  参数为 json 字符串</span>  <span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-string">&#x27;&quot;name&quot;:&quot;shiwei&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#x27;</span>)</code></pre></div><p>JSON 和 JS 对象的区别</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;hi&#x27;</span>&#125;;<span class="hljs-keyword">var</span> json = <span class="hljs-string">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;, &quot;b&quot;:&quot;hi&quot;&#125;&#x27;</span> <span class="hljs-comment">// json 是个字符串（本质就是一堆字符串解析）</span></code></pre></div><h3 id="5-3、Ajax"><a href="#5-3、Ajax" class="headerlink" title="5.3、Ajax"></a>5.3、Ajax</h3><ul><li>原生的 js 写法    xhr 异步请求</li><li>jQuery封装好的 方法 $(“#name”).ajax(“”)</li><li>axios 请求</li></ul><hr><h2 id="6、面向对象编程"><a href="#6、面向对象编程" class="headerlink" title="6、面向对象编程"></a>6、面向对象编程</h2><blockquote><h4 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h4></blockquote><p>javaScript 、Java、c# 。。。。面向对象；javaScript有些区别！</p><ul><li>类：模板</li><li>对象：具体的实例</li></ul><p>在 JavaScript 这个需要大家换一下思维方式！</p><p>原型：</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Student</span> = &#123;    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;a&quot;</span>,    <span class="hljs-attr">age</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">run</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> +<span class="hljs-string">&quot;run&quot;</span>)    &#125;&#125;;<span class="hljs-keyword">var</span> xiaoming = &#123;    <span class="hljs-attr">name</span>:xiaoming&#125;;xiaoming.<span class="hljs-property">_proto_</span> = <span class="hljs-title class_">Student</span>;<span class="hljs-comment">// 小明的原型是Student,可以使用Student中的run方法</span><span class="hljs-comment">// 简单说就是小明继承了它爹Student</span><span class="hljs-keyword">var</span> <span class="hljs-title class_">Bird</span> = &#123;    <span class="hljs-attr">fly</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;fly....&quot;</span>);    &#125;&#125;;<span class="hljs-comment">// 小明的原型是 Bird</span>xiaoming.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Bird</span>;</code></pre></div><blockquote><h4 id="class-继承"><a href="#class-继承" class="headerlink" title="class 继承"></a>class 继承</h4></blockquote><p>class 关键字，是在  ES6  引入的</p><p>1、定义一个类，属性，方法</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//定义一个学生类</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;    &#125;    <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)    &#125;   &#125;<span class="hljs-keyword">var</span> xiaoming = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaoming&quot;</span>);<span class="hljs-keyword">var</span> xiaohong = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaohong&quot;</span>);xiaoming.<span class="hljs-title function_">hello</span>()</code></pre></div><p>2、继承</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;    &#125;    <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)    &#125;    &#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">xiaoStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Student</span> &#123;        <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, grade</span>) &#123;        <span class="hljs-variable language_">super</span>(name);        <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade;    &#125;    <span class="hljs-title function_">myGrade</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;我是小学生&#x27;</span>)    &#125;    &#125;<span class="hljs-keyword">var</span> xiaoming = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaoming&quot;</span>);<span class="hljs-keyword">var</span> xiaohong = <span class="hljs-keyword">new</span> <span class="hljs-title function_">xiaoStudent</span>(<span class="hljs-string">&quot;xiaohong&quot;</span>, <span class="hljs-number">1</span>);xiaoming.<span class="hljs-title function_">hello</span>()<span class="hljs-comment">// xiaohong 的原型对象（他爹）是Student</span></code></pre></div><blockquote><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><h4 id="博客圆—javascript——原型与原型链"><a href="#博客圆—javascript——原型与原型链" class="headerlink" title="博客圆—javascript——原型与原型链"></a><a href="https://www.cnblogs.com/loveyaxin/p/11151586.html">博客圆—javascript——原型与原型链</a></h4></blockquote><p>简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》</p><p><strong>在查找属性的时候查到 Object.prototype 就可以停止查找了，所以就不会无线查找，不会一直循环了。</strong></p><p><img src="https://img2018.cnblogs.com/blog/850375/201907/850375-20190708153139577-2105652554.png" alt="原型链"></p><hr><h2 id="7、操作BOM对象-重点"><a href="#7、操作BOM对象-重点" class="headerlink" title="7、操作BOM对象(重点)"></a>7、操作BOM对象(重点)</h2><p>BOM：浏览器对象模型</p><blockquote><p>浏览器介绍</p></blockquote><p>JavaScript 和 浏览器关系？</p><p>JavaScript诞生就是为了能够让他在浏览器中运行</p><p>BOM：浏览器对象模型（内核）</p><ul><li>IE 6–11</li><li>Chrome</li><li>Safari</li><li>Firefox</li><li>Opera</li></ul><blockquote><p>window (重要)</p></blockquote><p>window 代表浏览器窗口</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<span class="hljs-literal">undefined</span><span class="hljs-variable language_">window</span>.<span class="hljs-property">outerHeight</span>  <span class="hljs-comment">// 外部</span><span class="hljs-number">995</span><span class="hljs-variable language_">window</span>.<span class="hljs-property">outerWidth</span><span class="hljs-number">1018</span><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>  <span class="hljs-comment">// 内部</span><span class="hljs-number">444</span><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span><span class="hljs-number">1003</span></code></pre></div><blockquote><p>Navigator  （不建议使用）</p></blockquote><p>navigator, 封装了浏览器的信息</p><p>大写Navigator是类，小写<code>navigator</code>是对象</p><div class="code-wrapper"><pre><code class="hljs javascript">navigator.<span class="hljs-property">appName</span>    <span class="hljs-comment">// 名字</span><span class="hljs-string">&#x27;Netscape&#x27;</span>navigator.<span class="hljs-property">appVersion</span> <span class="hljs-comment">// 版本号</span><span class="hljs-string">&#x27;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span>navigator.<span class="hljs-property">userAgent</span>  <span class="hljs-comment">// 用户浏览信息</span><span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span>navigator.<span class="hljs-property">platform</span>   <span class="hljs-comment">// 运行浏览器的操作系统和（或）硬件平台</span><span class="hljs-string">&#x27;Win32&#x27;</span></code></pre></div><p>大多数时候，我们不会使用<code>navogator</code>对象，因为会被人为修改，不建议使用这些属性来判断和编写代码</p><blockquote><p>screen </p></blockquote><p>代表计算机屏幕尺寸</p><div class="code-wrapper"><pre><code class="hljs javascript">screen.<span class="hljs-property">width</span><span class="hljs-number">2048</span> <span class="hljs-comment">// 2048 px</span>screen.<span class="hljs-property">height</span><span class="hljs-number">1152</span><span class="hljs-comment">// 1152 px</span></code></pre></div><blockquote><p>location (重要)</p></blockquote><p>location 代表当前页面的URL信息</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//location 的一些属性</span><span class="hljs-attr">host</span>: <span class="hljs-string">&quot;www.baidu.com&quot;</span><span class="hljs-attr">hostname</span>: <span class="hljs-string">&quot;www.baidu.com&quot;</span><span class="hljs-attr">href</span>: <span class="hljs-string">&quot;https://www.baidu.com/&quot;</span><span class="hljs-attr">protocol</span>: <span class="hljs-string">&quot;https:&quot;</span><span class="hljs-attr">reload</span>: ƒ <span class="hljs-title function_">reload</span>() <span class="hljs-comment">//刷新网页</span><span class="hljs-comment">//设置新地址</span>location.<span class="hljs-title function_">assign</span>(<span class="hljs-string">&quot;https://app2004.acapp.acwing.com.cn/user/account/login/&quot;</span>)</code></pre></div><blockquote><p>document (内容 DOM， 文档对象模型)</p></blockquote><p>document 代表当前的页面，HTML DOM文档树</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span><span class="hljs-string">&#x27;百度一下，你就知道&#x27;</span><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;努力挣钱和吃饭，要不然就不被xh&quot;</span>  <span class="hljs-comment">// 自定义title，也就是导航栏的内容</span><span class="hljs-string">&#x27;努力挣钱和吃饭，要不然就不被xh&#x27;</span></code></pre></div><p><strong>获取具体的文档树节点</strong></p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>JavaSE<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>JavaEE<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">var</span> dl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;app&#x27;</span>)</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><blockquote><p> 获取cookie（客户端的本地信息）</p></blockquote><p>不安全，会被劫持</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;aa.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--恶意人员：获取你的cookie上传到他的服务器--&gt;</span></code></pre></div><p>服务器端可以设置 cookie: httpOnly       (只读，不能修改)</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs 1c">&gt; &#x27;BIDUPSID=B<span class="hljs-number">8683</span>E2A9F4C1F<span class="hljs-number">388691</span>1F077A0A<span class="hljs-number">1102</span>; PSTM=<span class="hljs-number">1641251220</span>; BAIDUID=B<span class="hljs-number">8683</span>E2A9F4C1F38C<span class="hljs-number">871142</span>E273C<span class="hljs-number">7207</span>:SL=0:NR=10:FG=1; BD_UPN=<span class="hljs-number">12314753</span>; H_PS_PSSID=<span class="hljs-number">3754</span>5_<span class="hljs-number">3654</span>9_<span class="hljs-number">3735</span>2_<span class="hljs-number">3481</span>2_<span class="hljs-number">3748</span>6_<span class="hljs-number">3680</span>7_<span class="hljs-number">3740</span>4_<span class="hljs-number">3678</span>6_<span class="hljs-number">3753</span>6_<span class="hljs-number">3749</span>8_<span class="hljs-number">2635</span>0_<span class="hljs-number">3744</span>6; BDORZ=B490B5EBF6F3CD402E515D22BCDA<span class="hljs-number">1598</span>; BAIDUID_BFESS=B<span class="hljs-number">8683</span>E2A9F4C1F38C<span class="hljs-number">871142</span>E273C<span class="hljs-number">7207</span>:SL=0:NR=10:FG=1; COOKIE_SESSION=<span class="hljs-number">3405</span>_0_9_9_21_10_1_0_9_8_6_5_<span class="hljs-number">390667</span>8_0_0_0_<span class="hljs-number">1665840096</span>_0_<span class="hljs-number">1665843476</span>%7C9%<span class="hljs-number">232539</span>_5_<span class="hljs-number">1661438898</span>%7C2; delPer=0; BD_CK_SAM=1; PSINO=3; BA_HECTOR=<span class="hljs-number">0520</span>al2g8lak8kal018hfbi01hklg8v1b; ZFY=R0v3mV:A3kLPM6oCMd:BJTo:AI7QCqLLzIgO:AI2tY0ITn8:C; H_PS_645EC=b8fb%2B7%2BrcoNJDZr2BnHdidyAlYZ0SNLLncRf%2BB45PZnt59SFK6fbf98nhvQ; BD_HOME=1&#x27;</code></pre></div><p>劫持cookie原理</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;a.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-comment">&lt;!--恶意人员： 获取你的cookie上传到他的服务器上--&gt;</span></code></pre></div><p>服务器端可以设置cookie:httpOnly</p><blockquote><p>history (不建议使用)</p></blockquote><p>history 代表浏览器的历史纪录</p><div class="code-wrapper"><pre><code class="hljs javascript">history.<span class="hljs-title function_">back</span>() <span class="hljs-comment">// 返回</span>history.<span class="hljs-title function_">forward</span>() <span class="hljs-comment">// 前进</span></code></pre></div><hr><h2 id="8、操作DOM对象-重点"><a href="#8、操作DOM对象-重点" class="headerlink" title="8、操作DOM对象(重点)"></a>8、操作DOM对象(重点)</h2><p>DOM：文档对象模型（一颗文档树 – 将嵌套关系看成树形结构）。</p><blockquote><p>核心</p></blockquote><p>浏览器网页就是一个Dom树形结构</p><ul><li><p>更新：更新Dom节点</p></li><li><p>遍历Dom节点：得到Dom节点</p></li><li><p>删除：删除一个Dom节点</p></li><li><p>添加：添加一个新的节点</p></li></ul><p>要制作一个Dom节点，就必须要先获得这个Dom节点</p><blockquote><p>获得Dom节点</p></blockquote><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题一<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><span class="hljs-meta"><span class="language-javascript">&#x27;use strict&#x27;</span></span><span class="language-javascript"><span class="hljs-comment">// 对应css选择器</span></span><span class="language-javascript"><span class="hljs-comment">// 标签选择器</span></span><span class="language-javascript"><span class="hljs-keyword">var</span> h1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;h1&#x27;</span>);</span><span class="language-javascript"><span class="hljs-comment">// ID选择器</span></span><span class="language-javascript"><span class="hljs-keyword">var</span> p1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;p1&#x27;</span>);</span><span class="language-javascript"><span class="hljs-comment">// 类选择器</span></span><span class="language-javascript"><span class="hljs-keyword">var</span> p2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;p2&#x27;</span>);</span><span class="language-javascript"><span class="hljs-comment">// ID选择器</span></span><span class="language-javascript"><span class="hljs-keyword">var</span> father = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;father&#x27;</span>);</span><span class="language-javascript"><span class="hljs-comment">// 获取父节点下所有子节点属性</span></span><span class="language-javascript"><span class="hljs-keyword">var</span> childrens = father.<span class="hljs-property">children</span>;</span><span class="language-javascript">            <span class="hljs-comment">// var childrens = father.children[index]; index 可打印出来</span></span><span class="language-javascript"><span class="hljs-comment">// 获取第一个节点</span></span><span class="language-javascript">p1.<span class="hljs-property">firstChild</span>;</span><span class="language-javascript"><span class="hljs-comment">// 获取最后一个节点</span></span><span class="language-javascript">p1.<span class="hljs-property">lastChild</span>;</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>这是原生代码，之后尽量使用jQuery()；</p><blockquote><p>更新节点</p></blockquote><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">var</span> id1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;id1&#x27;</span>)</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><blockquote><p>操作文本（动态操作页面样式）</p></blockquote><div class="code-wrapper"><pre><code class="hljs html">// ID选择器var p1 = document.getElementById(&#x27;p1&#x27;);// 向p1更新值p1.innerText = &#x27;xhxhxhxhxhmyl&#x27;;  // 更新内容// 向p1更新htmlp1.innerHTML = <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>;  // 可以解析HTML文本</code></pre></div><blockquote><p>操作 JS</p></blockquote><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 设置字体颜色</span>p1.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;yellow&#x27;</span>; <span class="hljs-comment">// 属性使用 字符串 包裹</span><span class="hljs-comment">// 设置字体大小</span>p1.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-string">&#x27;50px&#x27;</span>;  <span class="hljs-comment">// - 转 驼峰命名问题</span><span class="hljs-comment">// 设置内边距</span>p1.<span class="hljs-property">style</span>.<span class="hljs-property">padding</span> = <span class="hljs-string">&#x27;2em&#x27;</span>; <span class="hljs-comment">// 盒子模型，内边距</span></code></pre></div><blockquote><p>删除节点</p></blockquote><p><strong>删除节点的步骤</strong>：先获取父节点，再通过父节点删除自己</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题一<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span>p1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span>p2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsById</span>(<span class="hljs-string">&#x27;p1&#x27;</span>)</span><span class="language-javascript">    <span class="hljs-keyword">var</span> father = p1.<span class="hljs-property">parentElement</span>;</span><span class="language-javascript">    father.<span class="hljs-title function_">removeChild</span>(self)</span><span class="language-javascript">    </span><span class="language-javascript">    <span class="hljs-comment">// 删除是一个动态的过程</span></span><span class="language-javascript">    father.<span class="hljs-title function_">removeChild</span>(father.<span class="hljs-property">children</span>[<span class="hljs-number">0</span>])</span><span class="language-javascript">    father.<span class="hljs-title function_">removeChild</span>(father.<span class="hljs-property">children</span>[<span class="hljs-number">1</span>])</span><span class="language-javascript">    father.<span class="hljs-title function_">removeChild</span>(father.<span class="hljs-property">children</span>[<span class="hljs-number">2</span>])</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>注意：删除多个节点时，children是在时刻变化的（类似于vector，会动态变短），删除节点的时候一定要注意</p><blockquote><p>插入节点</p></blockquote><p>我们获得了某个Dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素，但是这个Dom节点已经存在元素了，我们就不能这么做，因为会覆盖。</p><p>一般通过追加操作。</p><p>追加（已存在）</p><div class="code-wrapper"><pre><code class="hljs html">// 将 id = &quot;js&quot; 移到（追加）到 list 里面 （因为存在id js，所以是移动）<span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;me&quot;</span>&gt;</span>JavaME<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">var</span> js = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;js&#x27;</span>); <span class="hljs-comment">// 已存在的节点</span></span><span class="language-javascript">    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;list&#x27;</span>);</span><span class="language-javascript">    list.<span class="hljs-title function_">appendChild</span>(js); <span class="hljs-comment">//追加到后面</span></span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>创建一个新的标签，实现插入（任何位置都可以）</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">var</span> js = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;js&#x27;</span>);<span class="hljs-comment">//已经存在的节点</span></span><span class="language-javascript">    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;list&#x27;</span>);</span><span class="language-javascript">    <span class="hljs-comment">//通过JS创建一个新节点</span></span><span class="language-javascript">    <span class="hljs-keyword">var</span> newP = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>)<span class="hljs-comment">//创建一个p标签</span></span><span class="language-javascript">    newP.<span class="hljs-property">id</span> = <span class="hljs-string">&#x27;newP&#x27;</span>;</span><span class="language-javascript">    newP.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;Hello,shiwei&#x27;</span></span><span class="language-javascript">    <span class="hljs-comment">// 创建一个新的标签，并插入</span></span><span class="language-javascript">    <span class="hljs-comment">// list.appendChild(newp); // 这里可在页面内写</span></span><span class="language-javascript">    <span class="hljs-comment">// 创建一个新标签节点</span></span><span class="language-javascript">    <span class="hljs-keyword">var</span> myScript = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);</span><span class="language-javascript">    myScript.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;text/javascript&#x27;</span>)</span><span class="language-javascript">    <span class="hljs-comment">// list.appendChild(myScript);  // 这里可在页面内写</span></span><span class="language-javascript">    <span class="hljs-comment">// 可以创建一个 Style 标签</span></span><span class="language-javascript">    <span class="hljs-keyword">var</span> myStyle = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;style&#x27;</span>);<span class="hljs-comment">// 可以创建一个空Style标签</span></span><span class="language-javascript">    myStyle.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>,<span class="hljs-string">&#x27;text/css&#x27;</span>);</span><span class="language-javascript">    myStyle.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;body&#123;background-color:chartreuse&#125;&#x27;</span>;<span class="hljs-comment">// 设置标签内容</span></span><span class="language-javascript">    <span class="hljs-comment">// 将创建的标签放到 head 里面 [0] 是类似于编号</span></span><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(myStyle)</span><span class="language-javascript">    </span><span class="language-javascript"><span class="hljs-comment">// 总结 就是 js 可以干 html 和 css 的所有事情</span></span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>插入指定位置（insertBefore）</p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ee = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;ee&#x27;</span>);<span class="hljs-keyword">var</span> js = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;js&#x27;</span>);<span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;list&#x27;</span>);<span class="hljs-comment">//要包含的节点,insertBefore(newNode,targetNode)</span>list.<span class="hljs-title function_">insertBefore</span>(js,ee);</code></pre></div><hr><h2 id="9、操作表单-验证"><a href="#9、操作表单-验证" class="headerlink" title="9、操作表单 (验证)"></a>9、操作表单 (验证)</h2><blockquote><p>表单是什么 ？  form  DOM树</p></blockquote><ul><li>文本框 text</li><li>下拉框 select</li><li>单选框 radio</li><li>多选框 checkbox</li><li>隐藏域 hidden</li><li>密码框 password</li></ul><blockquote><p> 表单的目的：提交信息</p></blockquote><p>获得要提交的信息</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-comment">&lt;!--多选框的值，就是定义好的value--&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;man&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;boy&quot;</span>&gt;</span>男      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;woman&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;girl&quot;</span>&gt;</span>女  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">  <span class="hljs-keyword">var</span> input_text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;username&#x27;</span>);</span><span class="language-javascript">  </span><span class="language-javascript">  <span class="hljs-keyword">var</span> boy_radio = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;boy&#x27;</span>);</span><span class="language-javascript">  <span class="hljs-keyword">var</span> girl_radio = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;girl&#x27;</span>);</span><span class="language-javascript">  </span><span class="language-javascript">  <span class="hljs-comment">// 得到输入框的值</span></span><span class="language-javascript">  <span class="hljs-comment">// input_text.value</span></span><span class="language-javascript">  <span class="hljs-comment">// 修改输入框的值</span></span><span class="language-javascript">  input_text.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;123&#x27;</span></span><span class="language-javascript">  </span><span class="language-javascript">  <span class="hljs-comment">// 对于单选框，多选框等固定的值，boy_radio.value只能取到当前的值，不能确定是否被选</span></span><span class="language-javascript">  boy_radio.<span class="hljs-property">checked</span>;<span class="hljs-comment">// 查看返回的结果，是否为true，如果为true，则被选中。</span></span><span class="language-javascript">  girl_radio.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<span class="hljs-comment">// 赋值</span></span><span class="language-javascript">  </span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><blockquote><p>提交表单 ，md5加密密码 表单优化 （我记得 y总 的 jwt 也可以加密 + 验证，比较主流）</p></blockquote><h3 id="9-1-按钮绑定"><a href="#9-1-按钮绑定" class="headerlink" title="9.1 按钮绑定"></a>9.1 按钮绑定</h3><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-comment">&lt;!-- md5的工具类 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span>  <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input_password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;md5_password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!-- 按钮绑定事件 当被点击触发事件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;f()&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><span class="hljs-meta"><span class="language-javascript">&#x27;use strict&#x27;</span></span><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">if</span>(<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&quot;是否提交&quot;</span>))&#123;</span><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><span class="language-javascript">        &#125;<span class="hljs-keyword">else</span>&#123;</span><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><span class="language-javascript">        &#125;</span><span class="language-javascript">        &#125;</span><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript"><span class="hljs-keyword">var</span> uname = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;username&#x27;</span>);</span><span class="language-javascript"><span class="hljs-keyword">var</span> input_pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;input_password&#x27;</span>);</span><span class="language-javascript"><span class="hljs-keyword">var</span> pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;md5_password&#x27;</span>);</span><span class="language-javascript"><span class="hljs-comment">// md5算法加密</span></span><span class="language-javascript">pwd.<span class="hljs-property">value</span> = <span class="hljs-title function_">md5</span>(input_pwd.<span class="hljs-property">value</span>);</span><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(uname.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;+&#x27;</span> + pwd.<span class="hljs-property">value</span>);</span><span class="language-javascript"><span class="hljs-keyword">if</span>(<span class="hljs-title function_">validate</span>())&#123;</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;form1&quot;</span>).<span class="hljs-title function_">submit</span>();</span><span class="language-javascript">        &#125;</span><span class="language-javascript">&#125;</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre></div><h3 id="9-2-表单绑定"><a href="#9-2-表单绑定" class="headerlink" title="9.2 表单绑定"></a>9.2 表单绑定</h3><p>md5加密验证，表单优化（设置 hidden 类型）</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-comment">&lt;!-- 表单绑定提交事件 --&gt;</span><span class="hljs-comment">&lt;!-- onsubmit=绑定一个提交检测的函数， --&gt;</span><span class="hljs-comment">&lt;!-- 将这个结果返回给表单，使用onsubmit接收 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">onsubmit</span>=<span class="hljs-string">&quot;return f()&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>密码：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input_password&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 使用隐藏域提交，这样密码框不会在提交一瞬间变长，直接是面试常考 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;md5_password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-comment">&lt;!-- 绑定事件 当被点击触发事件--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> &gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-meta"></span></span><span class="hljs-meta"><span class="language-javascript">&#x27;use strict&#x27;</span></span><span class="language-javascript"></span><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript"><span class="hljs-keyword">var</span> uname = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;username&#x27;</span>);</span><span class="language-javascript"><span class="hljs-keyword">var</span> input_pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;input_password&#x27;</span>);</span><span class="language-javascript"><span class="hljs-keyword">var</span> pwd = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;md5_password&#x27;</span>);</span><span class="language-javascript"><span class="hljs-comment">// md5算法</span></span><span class="language-javascript">pwd.<span class="hljs-property">value</span> = <span class="hljs-title function_">md5</span>(input_pwd.<span class="hljs-property">value</span>);</span><span class="language-javascript"><span class="hljs-comment">// 提交到控制台</span></span><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(uname.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;+&#x27;</span> + pwd.<span class="hljs-property">value</span>);</span><span class="language-javascript"><span class="hljs-comment">// 允许表单提交true，阻止表单提交false</span></span><span class="language-javascript">                <span class="hljs-comment">// 可以自己校验判断表单内容</span></span><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><span class="language-javascript">&#125;</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><hr><h2 id="10、jQuery"><a href="#10、jQuery" class="headerlink" title="10、jQuery"></a>10、jQuery</h2><p>jQuery（write less, do more.）</p><p>jQuery库， 里面存在大量的JavaScript函数（说白了就是封装函数，直接调用，方便使用）</p><blockquote><p>获取jQuery</p></blockquote><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-comment">&lt;!--在线cdn--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 公式： $(selector).action --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test-jquery&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">        <span class="hljs-comment">// document.getElementById(&#x27;id&#x27;);</span></span><span class="language-javascript">        <span class="hljs-comment">// 选择器就是css的选择器</span></span><span class="language-javascript">        $(<span class="hljs-string">&#x27;#test-jquery&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;</span><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hello,jquery&#x27;</span>);</span><span class="language-javascript">        &#125;)</span><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><p>注意:在线cdn</p><blockquote><p>选择器</p></blockquote><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 原生js，选择器少，麻烦</span></span><span class="language-javascript">    <span class="hljs-comment">// 标签</span></span><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>();</span><span class="language-javascript">    <span class="hljs-comment">// id</span></span><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>();</span><span class="language-javascript">    <span class="hljs-comment">// 类</span></span><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>()</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// jQuery  css中的选择器 它 都能用</span></span><span class="language-javascript">    $(<span class="hljs-string">&#x27;p&#x27;</span>).<span class="hljs-title function_">click</span>(); <span class="hljs-comment">// 标签选择器</span></span><span class="language-javascript">    $(<span class="hljs-string">&#x27;#id1&#x27;</span>).<span class="hljs-title function_">click</span>(); <span class="hljs-comment">// id选择器</span></span><span class="language-javascript">    $(<span class="hljs-string">&#x27;.class&#x27;</span>).<span class="hljs-title function_">click</span>(); <span class="hljs-comment">// class选择器</span></span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><p>文档工具站  <a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a></p><div class="code-wrapper"><pre><code class="hljs javascript">$(selector).<span class="hljs-title function_">action</span>() <span class="hljs-comment">// 常见用法</span></code></pre></div><blockquote><p>事件</p></blockquote><p>鼠标事件，键盘事件，其他事件</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><span class="language-css">        <span class="hljs-selector-id">#divMove</span>&#123;</span><span class="language-css">            <span class="hljs-attribute">width</span>:<span class="hljs-number">500px</span>;</span><span class="language-css">            <span class="hljs-attribute">height</span>:<span class="hljs-number">500px</span>;</span><span class="language-css">            <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;</span><span class="language-css">        &#125;</span><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-comment">&lt;!--要求：获取鼠标当前的一个坐标--&gt;</span>mouse:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mouseMove&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;divMove&quot;</span>&gt;</span>    在这里移动鼠标试试<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-comment">// 当网页元素加载完毕之后响应事件</span></span><span class="language-javascript">    <span class="hljs-comment">// $(document).ready(function () &#123;</span></span><span class="language-javascript">    <span class="hljs-comment">//</span></span><span class="language-javascript">    <span class="hljs-comment">// &#125;)</span></span><span class="language-javascript">    <span class="hljs-comment">// 其简写</span></span><span class="language-javascript">    $(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        $(<span class="hljs-string">&#x27;#divMove&#x27;</span>).<span class="hljs-title function_">mousemove</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><span class="language-javascript">            $(<span class="hljs-string">&#x27;#mouseMove&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;x:&#x27;</span>+e.<span class="hljs-property">pageX</span> + <span class="hljs-string">&#x27;y:&#x27;</span>+e.<span class="hljs-property">pageY</span>)</span><span class="language-javascript">        &#125;)</span><span class="language-javascript">    &#125;);</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><blockquote><p>操作DOM</p></blockquote><p><strong>节点文本操作</strong></p><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// eg:</span>$(<span class="hljs-string">&#x27;#ID li[name=1]&#x27;</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">// 获取ID中名字为1的li标签的值</span>$(<span class="hljs-string">&#x27;#ID li[name=1]&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-number">123</span>); <span class="hljs-comment">// 设置ID中名字为1的li标签的值为123</span>$(<span class="hljs-string">&#x27;#ID&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>);  <span class="hljs-comment">// 设置值</span>$(<span class="hljs-string">&#x27;#ID li[name=1]&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);  <span class="hljs-comment">// 设置CSS属性</span><span class="hljs-comment">// eg:</span>$(<span class="hljs-string">&#x27;#test-ul li[name=python]&#x27;</span>).<span class="hljs-title function_">text</span>(); <span class="hljs-comment">// 设置值</span>$(<span class="hljs-string">&#x27;#test-ul li[name=python]&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;设置值&#x27;</span>); <span class="hljs-comment">// 设置值</span>$(<span class="hljs-string">&#x27;#test-ul&#x27;</span>).<span class="hljs-title function_">html</span>(); <span class="hljs-comment">// 获得值</span>$(<span class="hljs-string">&#x27;#test-ul&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>); <span class="hljs-comment">// 设置值</span></code></pre></div><p><strong>css操作</strong></p><div class="code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#test-ul li[name=python]&#x27;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>);</code></pre></div><p><strong>元素的显示和隐藏：</strong>本质增加了属性 <strong>display = none;</strong></p><div class="code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#test-ul li[name=python]&#x27;</span>).<span class="hljs-title function_">show</span>()$(<span class="hljs-string">&#x27;#test-ul li[name=python]&#x27;</span>).<span class="hljs-title function_">hide</span>()</code></pre></div><p><strong>娱乐测试</strong></p><div class="code-wrapper"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">width</span>()$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>()</code></pre></div><blockquote><p>小技巧</p></blockquote><p>1、如何巩固JS (看jQuery源码，看游戏源码)</p><p>2、巩固HTML,CSS (扒网站)</p><hr><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="箭头函数的this"><a href="#箭头函数的this" class="headerlink" title="箭头函数的this"></a>箭头函数的this</h3><p>箭头函数会屏蔽 当前匿名函数 的 this,如果调用了this,则是调他的父级的this。</p><blockquote><p>下面的代码就是 调用了window的this</p></blockquote><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">birth</span> = <span class="hljs-number">2002</span>;    <span class="hljs-keyword">let</span> kuangshen = &#123;        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;石玮&#x27;</span>,        <span class="hljs-attr">birth</span>: <span class="hljs-number">2002</span>,        <span class="hljs-attr">age</span>:<span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-keyword">let</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getFullYear</span>();            <span class="hljs-keyword">return</span> now - <span class="hljs-variable language_">this</span>.<span class="hljs-property">birth</span>;        &#125;    &#125;;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(kuangshen.<span class="hljs-title function_">age</span>());</code></pre></div><div class="code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">20</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>编程语言学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>编程语言学习</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 2376. 统计特殊整数</title>
    <link href="/2022/08/15/LeetCode%202376.%20%E7%BB%9F%E8%AE%A1%E7%89%B9%E6%AE%8A%E6%95%B4%E6%95%B0/"/>
    <url>/2022/08/15/LeetCode%202376.%20%E7%BB%9F%E8%AE%A1%E7%89%B9%E6%AE%8A%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数位DP-暴力-模板"><a href="#数位DP-暴力-模板" class="headerlink" title="数位DP | 暴力 | 模板"></a>数位DP | 暴力 | 模板</h3><h4 id="原题连接"><a href="#原题连接" class="headerlink" title="原题连接"></a><a href="https://leetcode.cn/problems/count-special-integers/">原题连接</a></h4><h4 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h4><blockquote><p><strong>如果一个正整数每一个数位都是互不相同的,我们称它是特殊整数,给你一个正整数 n ，</strong><br><strong>请你返回区间 [1, n] 之间特殊整数的数目。</strong></p></blockquote><h5 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h5><div class="code-wrapper"><pre><code class="hljs tap">输入：n = 20输出：19解释：1 到<span class="hljs-number"> 20 </span>之间所有整数除了<span class="hljs-number"> 11 </span>以外都是特殊整数。所以总共有<span class="hljs-number"> 19 </span>个特殊整数。</code></pre></div><h5 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h5><div class="code-wrapper"><pre><code class="hljs abnf">输入：n <span class="hljs-operator">=</span> <span class="hljs-number">5</span>输出：<span class="hljs-number">5</span>解释：<span class="hljs-number">1</span> 到 <span class="hljs-number">5</span> 所有整数都是特殊整数。</code></pre></div><h5 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h5><div class="code-wrapper"><pre><code class="hljs tap">输入：n = 135输出：110解释：从<span class="hljs-number"> 1 </span>到<span class="hljs-number"> 135 </span>总共有<span class="hljs-number"> 110 </span>个整数是特殊整数。不特殊的部分数字为：22 ，114 和<span class="hljs-number"> 131 </span>。</code></pre></div><h4 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h4><ul><li>$1$ &lt;= $n$ &lt;= $2$ $*$ $10^{9}$</li></ul><h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><h4 id="思路讲解"><a href="#思路讲解" class="headerlink" title="思路讲解"></a><a href="https://www.bilibili.com/video/BV1wv4y1c71n?spm_id_from=333.999.0.0&vd_source=bed1b37cf07540813685e4deaa965427">思路讲解</a></h4><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countSpecialNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;        vector&lt;<span class="hljs-type">int</span>&gt; nums;        <span class="hljs-keyword">while</span> (n) nums.<span class="hljs-built_in">push_back</span>(n % <span class="hljs-number">10</span>), n /= <span class="hljs-number">10</span>;        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>() ; i ++ ) &#123; <span class="hljs-comment">// 长度比 n 小的</span>            <span class="hljs-type">int</span> t = <span class="hljs-number">9</span>;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>, u = <span class="hljs-number">9</span>; j &lt; i - <span class="hljs-number">1</span> ; j ++ , u -- )                t *= u;            res += t;        &#125;        <span class="hljs-comment">// cout &lt;&lt; res &lt;&lt; endl;</span>        <span class="hljs-built_in">reverse</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());        <span class="hljs-type">bool</span> st[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>() ; i ++ ) &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = !i; j &lt; nums[i] ; j ++ ) &#123;                <span class="hljs-keyword">if</span> (st[j]) <span class="hljs-keyword">continue</span>;                <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, u = <span class="hljs-number">9</span> - i; k &lt; nums.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span> ; k ++ , u -- )                <span class="hljs-comment">// 剩下k位，和u个数字可以填</span>                    t *= u;                res += t;            &#125;            <span class="hljs-keyword">if</span> (st[nums[i]]) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 和前面数字重复，那就没有这个分支了，退出</span>            st[nums[i]] = <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-function">set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">hash</span><span class="hljs-params">(nums.begin(), nums.end())</span></span>; <span class="hljs-comment">// 枚举最后一条链</span>        <span class="hljs-keyword">if</span> (hash.<span class="hljs-built_in">size</span>() == nums.<span class="hljs-built_in">size</span>()) res ++ ;        <span class="hljs-keyword">return</span> res;    &#125;&#125;;</code></pre></div><h5 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h5><p>暴力枚举：<br>暴力也可以过，但不太好！$1804ms$<br>复杂度： <strong>$O((log_{10}n)!)$</strong><br>共有 <strong>$O(log_{10}n)$</strong> 个数位，故需要 <strong>$O((log_{10}n)!)$</strong> 的时间枚举。</p><div class="code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<span class="hljs-keyword">public</span>:    <span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;    LL m;    <span class="hljs-type">int</span> vis[<span class="hljs-number">14</span>] = &#123;<span class="hljs-number">0</span>&#125;;    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(LL v)</span> </span>&#123;        <span class="hljs-keyword">if</span> (v &gt; m) <span class="hljs-keyword">return</span>;        ans ++ ;        <span class="hljs-comment">// cout &lt;&lt; v &lt;&lt; &quot; &quot;;</span>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span> ; i ++ ) &#123;            <span class="hljs-keyword">if</span> (vis[i]) <span class="hljs-keyword">continue</span>;            vis[i] = <span class="hljs-number">1</span>;            <span class="hljs-built_in">dfs</span>(v * <span class="hljs-number">10</span> + i);            vis[i] = <span class="hljs-number">0</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countSpecialNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;        m = n;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span> ; i ++ ) &#123;            vis[i] = <span class="hljs-number">1</span>;            <span class="hljs-built_in">dfs</span>(i);            vis[i] = <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">return</span> ans;    &#125;&#125;;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>LeetCode_算法题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>数位DP</tag>
      
      <tag>算法</tag>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 常用命令</title>
    <link href="/2022/08/15/LIinux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/08/15/LIinux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="主要内容来源："><a href="#主要内容来源：" class="headerlink" title="主要内容来源："></a>主要内容来源：</h3><p><a href="https://www.acwing.com/activity/content/punch_the_clock/57/">AcWing_Linux_基础课</a></p><h4 id="常用命令介绍-y总总结"><a href="#常用命令介绍-y总总结" class="headerlink" title="常用命令介绍(y总总结)"></a>常用命令介绍(y总总结)</h4><div class="code-wrapper"><pre><code class="hljs bash">(1) ctrl c: 取消命令，并且换行(2) ctrl u: 清空本行命令(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项(4) <span class="hljs-built_in">ls</span>: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件(5) <span class="hljs-built_in">pwd</span>: 显示当前路径(6) <span class="hljs-built_in">cd</span> XXX: 进入XXX目录下, <span class="hljs-built_in">cd</span> .. 返回上层目录(7) <span class="hljs-built_in">cp</span> XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt(8) <span class="hljs-built_in">mkdir</span> XXX: 创建目录XXX(9) <span class="hljs-built_in">rm</span> XXX: 删除普通文件;  <span class="hljs-built_in">rm</span> XXX -r: 删除文件夹(10) <span class="hljs-built_in">mv</span> XXX YYY: 将XXX文件移动到YYY，和<span class="hljs-built_in">cp</span>命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令(11) <span class="hljs-built_in">touch</span> XXX: 创建一个文件(12) <span class="hljs-built_in">cat</span> XXX: 展示文件XXX中的内容(13) 复制文本    windows/Linux下：Ctrl + insert，Mac下：<span class="hljs-built_in">command</span> + c(14) 粘贴文本    windows/Linux下：Shift + insert，Mac下：<span class="hljs-built_in">command</span> + v</code></pre></div><h4 id="自己总结"><a href="#自己总结" class="headerlink" title="自己总结"></a>自己总结</h4><div class="code-wrapper"><pre><code class="hljs bash">Shmilysw一：绝对路径 从根开始描述这个路径(有<span class="hljs-string">&quot;/&quot;</span>)二：相对路径 从当前路径开始来描述你的这个路径(无<span class="hljs-string">&quot;/&quot;</span>)区别：看开头是不是有 <span class="hljs-string">&quot;/&quot;</span>/：根目录..：上一级目录.：当前目录~/：hmoe目录ctrl+c：跳过当前行ctrl+u：清空当前行<span class="hljs-built_in">history</span>：显示历史操作tab：自动补全命令或路径（只有一种选项，多种选项再按一次tab会显示可以补全的命令）<span class="hljs-built_in">ls</span>：显示当前文件夹下的文件    <span class="hljs-built_in">ls</span> -l：显示详细信息    <span class="hljs-built_in">ls</span> -lh：人性化输出(将详细信息里面的大小换成多少K)    <span class="hljs-built_in">ls</span> -a：显示所有文件（包括隐藏文件）  ls-A：不显示当前目录和上层目录（.和..）<span class="hljs-built_in">cd</span>：进入一个路径    <span class="hljs-built_in">cd</span> ..：返回上一层目录    <span class="hljs-built_in">cd</span> -：返回到上一次操作所留在的目录(上一次所待过的地方)<span class="hljs-built_in">cp</span> a/tmp.txt b：把a文件夹下的tmp.txt复制到b文件夹    <span class="hljs-built_in">cp</span> a/tmp.txt b/tmp1.txt：把a文件夹下的tmp.txt复制到b文件夹并且重命名为tmp1.txt    <span class="hljs-built_in">cp</span> a b -r：把文件夹a复制到文件夹b中<span class="hljs-built_in">mkdir</span> a（路径也可以）：创建一个文件夹a    <span class="hljs-built_in">mkdir</span> a/b/c：创建一个文件目录a/b/c<span class="hljs-built_in">rm</span> 文件1 文件2 文件3 ……：删除文件    <span class="hljs-built_in">rm</span> 文件1 -r：删除文件夹    <span class="hljs-built_in">rm</span> 文件夹1/*：删除文件夹1下的所有文件但不删除文件夹1<span class="hljs-built_in">touch</span> a：创建一个文件a<span class="hljs-built_in">mv</span> a/tmp.txt b：把a文件夹下的tmp.txt文件移动到b    <span class="hljs-built_in">mv</span> a/tmp.txt b/tmp2.txt：把a文件夹下的tmp.txt文件移动到b并且重命名为tmp2.txt<span class="hljs-built_in">cat</span> 文件1：显示文件1的内容vim 文件名：进入文件复制文本：windows/Linux下：Ctrl + insert，Mac下：<span class="hljs-built_in">command</span> + c粘贴文本：windows/Linux下：Shift + insert，Mac下：<span class="hljs-built_in">command</span> + v</code></pre></div><blockquote><p>作者：Shmilysw<br>链接：<a href="https://www.acwing.com/activity/content/code/content/3858182/">https://www.acwing.com/activity/content/code/content/3858182/</a><br>来源：AcWing</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>标题</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="个人简介："><a href="#个人简介：" class="headerlink" title="个人简介："></a>个人简介：</h2><p>一名普通本科的大三科班生，还在努力中，<del>励志向大佬看齐，未来一片黑暗，长得不健康的小菜鸡。</del><br><del>同时这也是我第一个自己搭建并上线的项目，希望以后继续努力，我也会把自己经历和成长记录在我的博客中，继续加油！</del><br><del>（喵的，废话真多，太消极了，建议重开吧，哈哈哈）</del></p><h2 id="目前状态："><a href="#目前状态：" class="headerlink" title="目前状态："></a>目前状态：</h2><p><del>算法，算法没学会（继续坚持刷），项目，项目没有做（住在github，学习别人的好项目（抄b站，哈哈）），英语，英语不会，（命中缺英语，看见英语，我只想说 你丫的 ** 个 ** 的 ** ，不会，寄 ~ ）。</del><br>（喜欢做梦，哈哈 ~） </p><h2 id="未来规划："><a href="#未来规划：" class="headerlink" title="未来规划："></a>未来规划：</h2><p>摆烂！（很大声）（假话 ~ ~ ~）</p><h2 id="浅浅的学习了的技术："><a href="#浅浅的学习了的技术：" class="headerlink" title="浅浅的学习了的技术："></a>浅浅的学习了的技术：</h2><p>（只能说是了解，使用过罢了，哈哈）</p><p>Linux(<strong>ssh</strong> + <strong>git</strong> + thrift + <strong>docker</strong>)<br>Web(<strong>JavaScript</strong> + <strong>TypeScript</strong> + <strong>vue3</strong> | React + <strong>Html</strong> + <strong>scss</strong>)<br>Java(<strong>SpringBoot</strong> + <strong>MyBatis-Plus</strong>)<br>Django(<strong>Nginx</strong> + <strong>WebSocket</strong> + Rest Framework and <strong>JWT</strong>)<br>C#(<strong>.Net6</strong> + <strong>Sql sugar</strong> + <strong>JWT</strong>)<br>(学了的会再加~~~)</p><p><del>什么情况，到底行不行啊，搁着做梦呢？？？快去学呀 ~ 你丫的瞅啥呢？？？</del></p><h2 id="学习历程"><a href="#学习历程" class="headerlink" title="学习历程"></a>学习历程</h2><ul><li><h5 id="大二下："><a href="#大二下：" class="headerlink" title="大二下："></a>大二下：</h5><p>两个字总结 迷茫（现在也是，哈哈）<br>学习了y总的工程课，对行业的相关技术有些了解</p></li><li><h5 id="大三上："><a href="#大三上：" class="headerlink" title="大三上："></a>大三上：</h5><p>学习了相关项目，包括c#，android，还是很菜，啊啊啊啊啊~</p></li><li><h5 id="大三下："><a href="#大三下：" class="headerlink" title="大三下："></a>大三下：</h5><p>只能说很菜，但还是无欲无求，不知道干嘛，丝毫不慌，但要保持微笑，<del>心态好</del>，哈哈~<br><del>心理问题，哈哈</del></p></li></ul><center>    <b><font size='5px'>Always try to improve myself！</font></b></center>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>/* 打字机效果渐变 -bynote.cn*//* #subtitle {    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);    background-size: 400% 400%;    -webkit-animation: Gradient 10s ease infinite;    -moz-animation: Gradient 10s ease infinite;    animation: Gradient 10s ease infinite;    -o-user-select: none;    -ms-user-select: none;    -webkit-user-select: none;    -moz-user-select: none;    user-select: none;    -webkit-background-clip: text;    -webkit-text-fill-color: transparent;    border-top-left-radius: 10px;    border-top-right-radius: 10px;}#subtitle:before {    background-color: rgba(0, 0, 0, 0);} */]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>(function (window, document, undefined) {    var hearts = [];    window.requestAnimationFrame = (function () {        return window.requestAnimationFrame ||            window.webkitRequestAnimationFrame ||            window.mozRequestAnimationFrame ||            window.oRequestAnimationFrame ||            window.msRequestAnimationFrame ||            function (callback) {                setTimeout(callback, 1000 / 60);            }    })();    init();    function init() {        css(            ".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}"        );        attachEvent();        gameloop();    }    function gameloop() {        for (var i = 0; i < hearts.length; i++) {            if (hearts[i].alpha <= 0) {                document.body.removeChild(hearts[i].el);                hearts.splice(i, 1);                continue;            }            hearts[i].y--;            hearts[i].scale += 0.004;            hearts[i].alpha -= 0.013;            hearts[i].el.style.cssText = "left:" + hearts[i].x + "px;top:" + hearts[i].y + "px;opacity:" + hearts[i]                .alpha + ";transform:scale(" + hearts[i].scale + "," + hearts[i].scale +                ") rotate(45deg);background:" + hearts[i].color;        }        requestAnimationFrame(gameloop);    }    function attachEvent() {        var old = typeof window.onclick === "function" && window.onclick;        window.onclick = function (event) {            old && old();            createHeart(event);        }    }    function createHeart(event) {        var d = document.createElement("div");        d.className = "heart";        hearts.push({            el: d,            x: event.clientX - 5,            y: event.clientY - 5,            scale: 1,            alpha: 1,            color: randomColor()        });        document.body.appendChild(d);    }    function css(css) {        var style = document.createElement("style");        style.type = "text/css";        try {            style.appendChild(document.createTextNode(css));        } catch (ex) {            style.styleSheet.cssText = css;        }        document.getElementsByTagName('head')[0].appendChild(style);    }    function randomColor() {        return "rgb(" + (~~(Math.random() * 255)) + "," + (~~(Math.random() * 255)) + "," + (~~(Math.random() * 255)) +            ")";    }})(window, document);]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>游戏</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Tip-这里是游戏界面，点击图片跳转到游戏页面哦！"><a href="#Tip-这里是游戏界面，点击图片跳转到游戏页面哦！" class="headerlink" title="Tip : 这里是游戏界面，点击图片跳转到游戏页面哦！"></a>Tip : 这里是游戏界面，点击图片跳转到游戏页面哦！</h4><p>游戏来源：感谢<a href="https://haiyong.site/moyu/">海拥</a>大佬支持</p><hr><a href="https://app4020.acapp.acwing.com.cn/user/account/login/"><h4>King Of Bots</h4>        <img height="250px" width="895px" src="/img/games/King Of Bots.png">            </img></a><hr><a href="https://haiyong.site/moyu/mgdmx/"><h4>萌怪大冒险</h4>        <img height="250px" width="895px" src="/img/games/萌怪大冒险.png">            </img></a><hr><a href="https://wanghao221.github.io/shuiguorenzhe/"><h4>水果忍者</h4>        <img height="250px" width="895px" src="/img/games/水果忍者.png">            </img></a><hr><a href="https://haiyong.site/moyu/SpaceHuggers/"><h4>平面射击小游戏</h4>        <img height="250px" width="895px" src="/img/games/平面射击小游戏.png">            </img></a><hr><a href="https://haiyong.site/moyu/weixiandehuoche/"><h4>危险货车</h4>        <img height="250px" width="895px" src="/img/games/危险货车.png">            </img></a><hr><a href="https://haiyong.site/moyu/wuziqi.html"><h4>五子棋（人vsAI）</h4>        <img height="250px" width="895px" src="/img/games/五子棋（人vsAI）.png">            </img></a><a href="https://haiyong.site/moyu/wu.html"><h4>五子棋（人vs人）</h4>        <img height="250px" width="895px" src="/img/games/五子棋（人vsAI）.png">            </img></a><hr><a href="https://haiyong.site/moyu/hjkg/"><h4>黄金矿工</h4>        <img height="250px" width="895px" src="/img/games/黄金矿工.png">            </img></a><hr><p>写在最后：希望每一个访客，都可以愉快，轻松的游戏，如果你有什么做的好的游戏，联系我添加QvQ</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>// 上升的气泡bynote.cnfunction qipao() {    $('#background').circleMagic({        radius: 10,        density: .2,        color: 'rgba(255,255,255,.4)',        clearOffset: 0.99    });} ! function (p) {    p.fn.circleMagic = function (t) {        var o, a, n, r, e = !0,            i = [],            d = p.extend({ color: "rgba(255,0,0,.5)", radius: 10, density: .3, clearOffset: .2 }, t),            l = this[0];        function c() { e = !(document.body.scrollTop > a) }        function s() { o = l.clientWidth, a = l.clientHeight, l.height = a + "px", n.width = o, n.height = a }        function h() {            if (e)                for (var t in r.clearRect(0, 0, o, a), i) i[t].draw();            requestAnimationFrame(h)        }        function f() {            var t = this;            function e() { t.pos.x = Math.random() * o, t.pos.y = a + 100 * Math.random(), t.alpha = .1 + Math.random() * d.clearOffset, t.scale = .1 + .3 * Math.random(), t.speed = Math.random(), "random" === d.color ? t.color = "rgba(" + Math.floor(255 * Math.random()) + ", " + Math.floor(0 * Math.random()) + ", " + Math.floor(0 * Math.random()) + ", " + Math.random().toPrecision(2) + ")" : t.color = d.color }            t.pos = {}, e(), this.draw = function () { t.alpha <= 0 && e(), t.pos.y -= t.speed, t.alpha -= 5e-4, r.beginPath(), r.arc(t.pos.x, t.pos.y, t.scale * d.radius, 0, 2 * Math.PI, !1), r.fillStyle = t.color, r.fill(), r.closePath() }        } ! function () {            o = l.offsetWidth, a = l.offsetHeight,                function () {                    var t = document.createElement("canvas");                    t.id = "canvas", t.style.top = 0, t.style.zIndex = 0, t.style.position = "absolute", l.appendChild(t), t.parentElement.style.overflow = "hidden"                }(), (n = document.getElementById("canvas")).width = o, n.height = a, r = n.getContext("2d");            for (var t = 0; t < o * d.density; t++) {                var e = new f;                i.push(e)            }            h()        }(), window.addEventListener("scroll", c, !1), window.addEventListener("resize", s, !1)    }}(jQuery);qipao()]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>//运行时间bynote.cnvar now = new Date();function createtime() {    var grt = new Date("8/15/2022 22:22:22");//在此处修改你的建站时间，格式：月/日/年 时:分:秒    now.setTime(now.getTime() + 250);    days = (now - grt) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);    hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);    if (String(hnum).length == 1) { hnum = "0" + hnum; } minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);    mnum = Math.floor(minutes); if (String(mnum).length == 1) { mnum = "0" + mnum; }    seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);    snum = Math.round(seconds); if (String(snum).length == 1) { snum = "0" + snum; }    document.getElementById("timeDate").innerHTML = "本站已各种夹缝中安全运行 " + dnum + " 天 ";    document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒";}setInterval("createtime()", 250);]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>window.onload = function() {//定义点击出现文字类function ClickFrontShow() {//定义所需文字和颜色this.fron = ['高兴', '开心', '❤', '欢乐', '愉悦', '愉快', '快乐', '欢喜', '喜悦', '欢欣', '欢畅', '欢腾', '雀跃', '欢快'];this.colo = ['#FF69B4', '#ff6651', 'orange', '#FF00FF', '#00FF7F', '#00BFFF', '#BA55D3'];//获取body元素this.elBody = document.getElementsByTagName("body")[0];//初始化randomNumthis.randomNum = null;//初始化字体indethis.finde = 0;//初始化classNamethis.cls = 0;}//定义初始化ClickFrontShow.prototype.init = function(frontArray, colorArray) {//自定义颜色和字体this.fron = frontArray || this.fron;this.colo = colorArray || this.colo;this.listenMouse();}//创建文字 ClickFrontShow.prototype.createFront = function (classname) {var self = this;let ospan = document.createElement('span');//设置样式let cssText = "position:absolute; width: 40px; height: 20px; cursor: default; transform: translate(-50%,-50%); font-weight: bold; opacity: 1; z-index: 1000; transition: 1s;";//随机字体和颜色let randomFront = self.fron[self.finde];let randomColor = self.colo[Math.round(Math.random()*(self.colo.length-1))];//字体下标增1self.finde = (self.finde+1) % self.fron.length;//向body中添加元素self.elBody.appendChild(ospan);//绑定一个classnameospan.className = String(classname);//添加样式ospan.style.cssText = cssText + "-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;user-select: none;"ospan.style.color = randomColor;ospan.innerHTML = randomFront;}//监听鼠标点击ClickFrontShow.prototype.listenMouse = function() {var self = this;//鼠标点击事件document.onclick = function(e) {//避免classname值重复导致出现bugif(self.cls === 20){self.cls = 0;}else{self.cls += 1;}//创建文字self.createFront(self.cls);let el = document.getElementsByClassName(self.cls)[0];//鼠标点击位置el.style.left = e.clientX + 'px';el.style.top = e.clientY + 'px';//过时改变setTimeout(function() {el.style.opacity = 0;el.style.top = el.offsetTop - 100 + 'px';}, 100);//过时清除setTimeout(function() {self.elBody.removeChild(el);}, 2000);}}//实例化var frontShow = new ClickFrontShow();//用户可在此传递参数，默认第一个参数是字体数组；//第二个参数是颜色数组，必须是数组类型！frontShow.init(); }]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>音乐</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- <center>  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=600 height=450 src="//music.163.com/outchain/player?type=0&id=974387610&auto=1&height=430"></iframe></center> --><h4 id="❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加-❤"><a href="#❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加-❤" class="headerlink" title="❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加 ~❤"></a>❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加 ~❤</h4><link rel="stylesheet" href="/dist/APlayer.min.css">  <div id="aplayer"></div>  <script type="text/javascript" src="/dist/APlayer.min.js"></script><script type="text/javascript" src="/js/music.js"></script><!-- <iframe src="https://www.jsdaima.com/Uploads/js/201804/1523085687/index.html" height="500" frameborder="no" border="0" width="100%"> </iframe> -->]]></content>
    
  </entry>
  
  
  
</search>
