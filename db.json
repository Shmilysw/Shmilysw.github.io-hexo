{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/dist/APlayer.min.css","path":"dist/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/dist/APlayer.min.js","path":"dist/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/dist/APlayer.min.js.map","path":"dist/APlayer.min.js.map","modified":0,"renderable":1},{"_id":"themes/fluid/source/dist/APlayer.min.css.map","path":"dist/APlayer.min.css.map","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/duration.js","path":"js/duration.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/music.js","path":"js/music.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"source/img/1.png","path":"img/1.png","modified":0,"renderable":0},{"_id":"source/img/background0.png","path":"img/background0.png","modified":0,"renderable":0},{"_id":"source/img/background1.png","path":"img/background1.png","modified":0,"renderable":0},{"_id":"source/img/background10.png","path":"img/background10.png","modified":0,"renderable":0},{"_id":"source/img/background2.png","path":"img/background2.png","modified":0,"renderable":0},{"_id":"source/img/background3-.png","path":"img/background3-.png","modified":0,"renderable":0},{"_id":"source/img/background3.png","path":"img/background3.png","modified":0,"renderable":0},{"_id":"source/img/background7.png","path":"img/background7.png","modified":0,"renderable":0},{"_id":"source/img/background4.png","path":"img/background4.png","modified":0,"renderable":0},{"_id":"source/img/background6.png","path":"img/background6.png","modified":0,"renderable":0},{"_id":"source/img/background8.png","path":"img/background8.png","modified":0,"renderable":0},{"_id":"source/img/background9.png","path":"img/background9.png","modified":0,"renderable":0},{"_id":"source/img/car.png","path":"img/car.png","modified":0,"renderable":0},{"_id":"source/img/qq.png","path":"img/qq.png","modified":0,"renderable":0},{"_id":"source/img/yuantouxiang.png","path":"img/yuantouxiang.png","modified":0,"renderable":0},{"_id":"source/img/touxiang.png","path":"img/touxiang.png","modified":0,"renderable":0},{"_id":"source/lrc/Body-.lrc","path":"lrc/Body-.lrc","modified":0,"renderable":0},{"_id":"source/lrc/Body.lrc","path":"lrc/Body.lrc","modified":0,"renderable":0},{"_id":"source/lrc/I Want You to Know - Zedd-.lrc","path":"lrc/I Want You to Know - Zedd-.lrc","modified":0,"renderable":0},{"_id":"source/lrc/I Want You to Know - Zedd.lrc","path":"lrc/I Want You to Know - Zedd.lrc","modified":0,"renderable":0},{"_id":"source/lrc/Letting Go.lrc","path":"lrc/Letting Go.lrc","modified":0,"renderable":0},{"_id":"source/lrc/We-.lrc","path":"lrc/We-.lrc","modified":0,"renderable":0},{"_id":"source/lrc/We.lrc","path":"lrc/We.lrc","modified":0,"renderable":0},{"_id":"source/lrc/lrc_.lrc","path":"lrc/lrc_.lrc","modified":0,"renderable":0},{"_id":"source/lrc/在你的身边.lrc","path":"lrc/在你的身边.lrc","modified":0,"renderable":0},{"_id":"source/wyy/Body.m4a","path":"wyy/Body.m4a","modified":0,"renderable":0},{"_id":"source/wyy/Letting Go.m4a","path":"wyy/Letting Go.m4a","modified":0,"renderable":0},{"_id":"source/wyy/I Want You to Know.m4a","path":"wyy/I Want You to Know.m4a","modified":0,"renderable":0},{"_id":"source/wyy/Time To Love.mp3","path":"wyy/Time To Love.mp3","modified":0,"renderable":0},{"_id":"source/wyy/We.m4a","path":"wyy/We.m4a","modified":0,"renderable":0},{"_id":"source/img/article/JavaScript.png","path":"img/article/JavaScript.png","modified":0,"renderable":0},{"_id":"source/img/article/Linux.jpg","path":"img/article/Linux.jpg","modified":0,"renderable":0},{"_id":"source/img/article/git.jpg","path":"img/article/git.jpg","modified":0,"renderable":0},{"_id":"source/img/article/default_index_img.jpg","path":"img/article/default_index_img.jpg","modified":0,"renderable":0},{"_id":"source/img/article/logo.jpg","path":"img/article/logo.jpg","modified":0,"renderable":0},{"_id":"source/img/article/leetcode.jpg","path":"img/article/leetcode.jpg","modified":0,"renderable":0},{"_id":"source/img/games/King Of Bots.png","path":"img/games/King Of Bots.png","modified":0,"renderable":0},{"_id":"source/img/games/危险货车.png","path":"img/games/危险货车.png","modified":0,"renderable":0},{"_id":"source/img/games/五子棋（人vsAI）.png","path":"img/games/五子棋（人vsAI）.png","modified":0,"renderable":0},{"_id":"source/img/games/水果忍者.png","path":"img/games/水果忍者.png","modified":0,"renderable":0},{"_id":"source/img/games/平面射击小游戏.png","path":"img/games/平面射击小游戏.png","modified":0,"renderable":0},{"_id":"source/img/games/萌怪大冒险.png","path":"img/games/萌怪大冒险.png","modified":0,"renderable":0},{"_id":"source/img/games/黄金矿工.png","path":"img/games/黄金矿工.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/lrc/lrc_.lrc","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661435269446},{"_id":"source/about/index.md","hash":"0bfdf7dfe422ac5644cf98d36e4128d4973b142e","modified":1679737725325},{"_id":"source/css/toubudaziji.css","hash":"5238323dcb616c09b3dd1ba5a915d2bbb3416a9b","modified":1660584032908},{"_id":"source/_posts/LIinux-常用命令.md","hash":"e4c96d2a898a5956ae2ba9359f4efb819a58be52","modified":1660639631457},{"_id":"source/_posts/LeetCode 2376. 统计特殊整数.md","hash":"cb59103424c12dadd245025c273656a403ce50f5","modified":1671595851029},{"_id":"source/_posts/JavaScript.md","hash":"f20ea74e1df2ab7bac41d4f98d850be39bbf6bd3","modified":1671595847110},{"_id":"source/_posts/git&github的入门.md","hash":"5415cc4f4993ab1d2327111a9ba7fc8cfb93f9a3","modified":1679736368263},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1660495898998},{"_id":"source/game/index.md","hash":"91b0dd08ec199a3c7627d507ffe31f6ffc33114b","modified":1679739040795},{"_id":"source/_posts/hexo博客的总结.md","hash":"c563eb8e7995daea7d3d3000fdc0356358afc55d","modified":1679736454958},{"_id":"source/img/car.png","hash":"ca98f03224493ed3e827535f21eaa03defe45f46","modified":1661876333833},{"_id":"source/img/touxiang.png","hash":"c346b52b3a99a195365ffa49f68606aeaa5624fd","modified":1641133637445},{"_id":"source/js/love.js","hash":"3694591e3d8465c7e0f80c8303b3ffe90611834d","modified":1660581792678},{"_id":"source/js/qipao.js","hash":"01a1a744ce149401f3be87cba40f4c7e944ac163","modified":1660582246915},{"_id":"source/js/timeDate.js","hash":"4b0296ff16bad5b7dbbc356d6ddd1cd1ff2ea66b","modified":1660985556529},{"_id":"source/js/words.js","hash":"a823732021d6ba595e1a9aa944613be339eecca1","modified":1660987118186},{"_id":"source/lrc/Body-.lrc","hash":"0cc04f79fb8786039e41e01144aadc918236d8b1","modified":1661590734264},{"_id":"source/lrc/I Want You to Know - Zedd-.lrc","hash":"53294c270f39afc5fdcd27357150c7dc005bce16","modified":1661590335364},{"_id":"source/lrc/I Want You to Know - Zedd.lrc","hash":"188de57cb5015b7622aad7350b430a4a329564fb","modified":1661414369853},{"_id":"source/lrc/Body.lrc","hash":"61238b8a5b7c7a4b5d9aeca4d217bd23a46d4c15","modified":1661438081631},{"_id":"source/lrc/Letting Go.lrc","hash":"6a2c6338eb1885f25d7761a2553216ce0b8bf478","modified":1661363459479},{"_id":"source/lrc/We-.lrc","hash":"1be2c4076dfb65a5e6b5ac8bdb8cdee9e177ec6c","modified":1661590643391},{"_id":"source/lrc/在你的身边.lrc","hash":"fe49521a3e20dbaa48510084a4b1d6a4f67b3acc","modified":1661360174848},{"_id":"source/lrc/We.lrc","hash":"0b44a29ffd9e6a182cfda6534a61442da4e099e4","modified":1661415084780},{"_id":"source/music/index.md","hash":"b55cd499a7662a5e9f18d5726dc9f10eb3eb1c7b","modified":1661875382677},{"_id":"source/img/article/JavaScript.png","hash":"2789683cfab7e656e65d5310e0ef7faab7b67b69","modified":1666096694467},{"_id":"source/img/article/git.jpg","hash":"0d75a000704d2d82f7914cef826e3dcc546f33cf","modified":1679736323012},{"_id":"source/img/article/logo.jpg","hash":"9576f866ca7d716add9e35807cb79333364efc0f","modified":1671592810262},{"_id":"source/img/article/leetcode.jpg","hash":"445b2143e06b0df8d0d3af558dcb8ebb5fa76e86","modified":1660637748070},{"_id":"source/img/games/King Of Bots.png","hash":"8f9829258ba99b44e3746120502bb5783ceb9d42","modified":1679738351331},{"_id":"source/img/games/五子棋（人vsAI）.png","hash":"4e212f505b35194a8fd1c9def93bc048f022b29c","modified":1679738743474},{"_id":"source/img/qq.png","hash":"b5ad4faec7914103f72ae01f7e106974cceff1bc","modified":1660639609788},{"_id":"source/img/1.png","hash":"5770013e07297677048e63e0984027ea057322d8","modified":1660558079499},{"_id":"source/img/article/default_index_img.jpg","hash":"c220edcf43bb757e4fcc7fd1c7b70b6293427ba6","modified":1660631587664},{"_id":"source/img/games/平面射击小游戏.png","hash":"0575da73fd3ad0d6a8bd65719e2352d41659951b","modified":1679738534568},{"_id":"source/img/article/Linux.jpg","hash":"cadfb4ea78d590ff8f5162ac25d9dfd1c8088b35","modified":1660630568968},{"_id":"source/img/games/危险货车.png","hash":"dddb5bef9e9b04ef408001800ac37068b3c79081","modified":1679738659820},{"_id":"source/img/games/水果忍者.png","hash":"1f1282c6f1bff3a660e1c46f26e516feeed762c4","modified":1679738428119},{"_id":"source/img/background8.png","hash":"cdd715387e5c466fdc66bb14d927d2497e31b5a6","modified":1660569918300},{"_id":"source/img/background10.png","hash":"ecc7fd521170c45ba488bf847f415fda80ff10bc","modified":1661875311732},{"_id":"source/img/yuantouxiang.png","hash":"6b36741a275cd84d5559dcc268682d933df84255","modified":1660641506614},{"_id":"source/img/background9.png","hash":"5e16f92f79e88576f09678a5128c75bce0c57acb","modified":1660631807855},{"_id":"source/img/background7.png","hash":"bc605a96beab4822e26b6c144017c7062d8a0f06","modified":1660631757830},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1661404067160},{"_id":"source/img/background3.png","hash":"09831155b34adc9fe4e696345117c1f076d2cc90","modified":1661418255149},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1661404061544},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1661404061580},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1661404061619},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1661404061656},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1661404061683},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1661404061717},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1661404061750},{"_id":"themes/fluid/_config.yml","hash":"ebe26856c4cc286df3181136b5b391dd2e5f5ec7","modified":1661404061782},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1661404062072},{"_id":"themes/fluid/package.json","hash":"0bc354a01c5e6e9de43bf67456dc16c59d400139","modified":1661404061810},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1661404062100},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1661404062157},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1661404062213},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1661404062184},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1661404062128},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1661404062242},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1661404062269},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1661404062397},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1661404062308},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1661404062354},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1661404062437},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1661404062475},{"_id":"themes/fluid/layout/index.ejs","hash":"b15d13877827e99e0ff783a6b13b13cca90bfe8c","modified":1661404062546},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1661404062573},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1661404062624},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1661404062740},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1661404061850},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1661404062667},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1661404061881},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1661404062777},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1661404061972},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1661404062816},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1661404061943},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1661404062003},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1661404062861},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1661404062037},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":1661404062971},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1661404062903},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1661404063055},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1661404063004},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"776949aa697dffd54e9b1957d9245028879509a3","modified":1661404063133},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1661404063089},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1661404063168},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1661404063260},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1661404061912},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1661404065016},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1661404063228},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1661404063312},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1661404063342},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1661404064719},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1661404065083},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1661404065197},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1661404065230},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1661404065302},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1661404065049},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1661404065266},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1661404065335},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1661404065403},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1661404065369},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1661404065437},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1661404065473},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1661404065507},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1661404065157},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1661404065580},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1661404065547},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1661404065123},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1661404065650},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1661404065617},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1661404065717},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1661404065683},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1661404065759},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1661404065793},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1661404065915},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1661404065950},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1661404065826},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1661404065860},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1661404066012},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1661404065981},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1661404067266},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1661404067338},{"_id":"themes/fluid/source/dist/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1661350453874},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1661404067401},{"_id":"themes/fluid/source/dist/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1661350453872},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1661404067368},{"_id":"themes/fluid/source/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1661350453880},{"_id":"themes/fluid/source/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1661350453876},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1661404067477},{"_id":"themes/fluid/source/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1661404067440},{"_id":"themes/fluid/source/js/duration.js","hash":"541170dadbbb8268eb59ec0cd7c38927e84af3bd","modified":1661351111775},{"_id":"themes/fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1661404067515},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1661404067547},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1661404067620},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1661404067584},{"_id":"themes/fluid/source/js/music.js","hash":"1a8196ceed90495561baf67ebccfe206773e956b","modified":1661590741960},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1661404067685},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1661404067649},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1661404067729},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1661404063417},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1661404063454},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1661404063490},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1661404063525},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1661404063381},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1661404063564},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1661404063637},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1661404063601},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1661404063671},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1661404063707},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1661404063744},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1661404063856},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1661404063810},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1661404063890},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1661404063946},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1661404064013},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1661404064047},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1661404064078},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1661404064146},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1661404064180},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"cbcf6905f4990a22895a848e29dd4c05592a9043","modified":1661404064111},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1661404064265},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"94c1ce6e312932e876886ba24b082ae34515a038","modified":1661404064228},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1661404064351},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1661404064309},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":1661404064387},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1661404064479},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e74fb49526ddb14fee2c6360a560d17f57262ef7","modified":1661404064440},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1661404064555},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1661404064595},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1661404064764},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1661404064667},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1661404064633},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1661404064802},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1661404064908},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1661404064873},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1661404064837},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1661404064942},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1661404064976},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1661404066118},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1661404066047},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1661404067227},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1661404066082},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1661404066155},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1661404066229},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1661404066259},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1661404066317},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1661404066287},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1661404066191},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1661404066970},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":1661404066836},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1661404066932},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1661404066866},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1661404066895},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1661404067189},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1661404067007},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"7054d79c9d5966fc57baf0adcdf3b19275987b62","modified":1661404067037},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1661404067067},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1661404067128},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1661404067097},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1661404066384},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1661404066414},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1661404066443},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1661404066354},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1661404066474},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":1661404066565},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1661404066594},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1661404066532},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1661404066653},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1661404066504},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1661404066713},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1661404066683},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1661404066625},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1661404066771},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1661404066800},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1661404066742},{"_id":"source/img/background2.png","hash":"beea581d83e9bb34f0144d495a063a83875388f1","modified":1660634756755},{"_id":"source/img/background3-.png","hash":"a05823e4479ef38766a7d2b49ff42eafbab4b29d","modified":1660634602201},{"_id":"source/img/games/黄金矿工.png","hash":"cccabe02c3d4e4d6b6d624cee74d1850ae45c0ea","modified":1679738936629},{"_id":"themes/fluid/source/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1661350453888},{"_id":"source/img/background4.png","hash":"dfa59dfbc07bc1dcd19fbb923515257161d36501","modified":1660634588031},{"_id":"source/img/games/萌怪大冒险.png","hash":"67f6cc2cdf60e59e51e36d0efc5c92575be7262d","modified":1679738131579},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1661404067306},{"_id":"source/img/background0.png","hash":"7c1f2f2651ee595d63ef89a5ffdf3f1fc46c341d","modified":1660577260948},{"_id":"source/img/background1.png","hash":"83db626e2417bcdd86d3775d8c7e57462522cf8e","modified":1660566444479},{"_id":"source/img/background6.png","hash":"a6221803d2db512f75263c94930fb46b341cc35c","modified":1660568517813},{"_id":"source/wyy/Body.m4a","hash":"8b40b41e22ed155134bfc655cbb10e7fa93469ca","modified":1661437947646},{"_id":"source/wyy/We.m4a","hash":"1ab68ea192a68355f2ec4b241b39255cb77d3e0a","modified":1661414752569},{"_id":"source/wyy/Time To Love.mp3","hash":"02cf15b525e47cb1770a3a856228d6995bb7323e","modified":1661433694980},{"_id":"source/wyy/I Want You to Know.m4a","hash":"273c02ebbae7b492f2ae7daa4e0d41f8e1d0451d","modified":1661433905687},{"_id":"source/wyy/Letting Go.m4a","hash":"8913612fa73d961b39510c1361354d7532377f07","modified":1661413421449},{"_id":"public/css/toubudaziji.css","hash":"c47cf04c4ee9280e6a79e1e6541ec67c4d54bbcf","modified":1681290753371},{"_id":"public/js/love.js","hash":"ed1ca9e231517980772cecbb6250a836667cc950","modified":1681290753371},{"_id":"public/js/qipao.js","hash":"056dbcbbf449b0775e662fd8f96b013a06b61541","modified":1681290753371},{"_id":"public/js/timeDate.js","hash":"7e7fe60a68c8842b344537378af85308c697d92e","modified":1681290753371},{"_id":"public/js/words.js","hash":"22aa6a570740d7056e44fca1dcbd1d672599af29","modified":1681290753371},{"_id":"public/local-search.xml","hash":"64675e5a91ae5ee8f60922e2dca85efdf2b8d3cb","modified":1681290753371},{"_id":"public/music/index.html","hash":"f67ec4596cb6a21b6bb45ce474fbc9f73fb6e5a6","modified":1681290753371},{"_id":"public/archives/index.html","hash":"19bf2993c8979cc6b8eb8d1708cc75bc376f3909","modified":1681290753371},{"_id":"public/archives/2022/index.html","hash":"644d6c254e33ebe6346b3c384e7521a6e7a25726","modified":1681290753371},{"_id":"public/archives/2022/08/index.html","hash":"7b8514c30a36d0f70a0605baff5de2f13a17f6c3","modified":1681290753371},{"_id":"public/archives/2022/10/index.html","hash":"1d41a6bc75c661c39c1a02d0f6671f574d2de98c","modified":1681290753371},{"_id":"public/archives/2022/12/index.html","hash":"e1f0a4857ff01f47d52ef437f68d5dfb6c477746","modified":1681290753371},{"_id":"public/archives/2023/index.html","hash":"a3350e243d04614b009dee8d8912ecc6996bed69","modified":1681290753371},{"_id":"public/archives/2023/03/index.html","hash":"61e9ace965b403757529bf2424088fc63e6366cf","modified":1681290753371},{"_id":"public/archives/2023/04/index.html","hash":"8be7a253aee562a97e6bdcd029ec97f0eabdedc1","modified":1681290753371},{"_id":"public/categories/编程语言学习/index.html","hash":"fefbbb970879296faeb3876a95dbc37e39591c45","modified":1681290753371},{"_id":"public/categories/操作系统/index.html","hash":"52420c61d081530349c9b22d86673906992722ff","modified":1681290753371},{"_id":"public/categories/LeetCode-算法题解/index.html","hash":"b9a8c12b03868d2f1e0106657c9e9d05ee1ba767","modified":1681290753371},{"_id":"public/categories/git-github/index.html","hash":"9bf5388cbdd93d2e2ff006bc50b3551127af0962","modified":1681290753371},{"_id":"public/categories/博客的总结/index.html","hash":"17e05911d9ab43adad1e4bf8525314d0a57c799e","modified":1681290753371},{"_id":"public/tags/JavaScript/index.html","hash":"ade051f0b0fd04be014737d4b6005d1f283fa959","modified":1681290753371},{"_id":"public/tags/编程语言学习/index.html","hash":"e9f60c4df75edc0f6500cb0118d5fd40aced9103","modified":1681290753371},{"_id":"public/tags/学习/index.html","hash":"4f3454d14a671f08bb3a79b9a710e2a9ee0d8125","modified":1681290753371},{"_id":"public/tags/Linux/index.html","hash":"e01e41ba7f111c42f67c3cf9e57350559c13e172","modified":1681290753371},{"_id":"public/tags/操作系统/index.html","hash":"f67c605a1233b1f0e0db32bed4d618c1eba3654c","modified":1681290753371},{"_id":"public/tags/LeetCode/index.html","hash":"8bba4ac819fd28f5caabb5f0b49cee4f52b2007f","modified":1681290753371},{"_id":"public/tags/数位DP/index.html","hash":"b3c53af661c60ecdb338c21c599f0f98956d3b9f","modified":1681290753371},{"_id":"public/tags/算法/index.html","hash":"b56f0cd22d04f8524e18de898c561fa68944e385","modified":1681290753371},{"_id":"public/tags/模板/index.html","hash":"4206e1242c29f3fe6b6ccb94b3daf0f4a4f84eaa","modified":1681290753371},{"_id":"public/tags/git/index.html","hash":"a7b3f64506760d2c871a1e8788252e23d89b826d","modified":1681290753371},{"_id":"public/tags/github/index.html","hash":"109ac5e97fc74fffa7fcf49229365d4c6bc42b9a","modified":1681290753371},{"_id":"public/tags/hexo/index.html","hash":"86a3aad514243d161aa6bfc127acd98ad244fcc3","modified":1681290753371},{"_id":"public/tags/博客搭建/index.html","hash":"b1c691b774d4f8a150fd9fb53f9b75d9abfff9c6","modified":1681290753371},{"_id":"public/404.html","hash":"0f73ab4f8ac2440e42331901f83e6c7931595a80","modified":1681290753371},{"_id":"public/tags/index.html","hash":"866459af2d70db81031b013765e6f282c26c0868","modified":1681290753371},{"_id":"public/about/index.html","hash":"f6728394a62d0b9b5d6eec379cca191ed2cdfba2","modified":1681290753371},{"_id":"public/game/index.html","hash":"8464f2fb89305e1594ddbc258307920c1fa53cfa","modified":1681290753371},{"_id":"public/2023/04/12/hello-world/index.html","hash":"e6abd513a84309aa2e58ecd23fa8be2c831e349e","modified":1681290753371},{"_id":"public/2023/03/25/git&github的入门/index.html","hash":"481afd5a4f3eb74161e5efe4969ecc00cf11fa82","modified":1681290753371},{"_id":"public/2022/12/21/hexo博客的总结/index.html","hash":"efdbd64891551a4a8dd5229f01dea8cd479f988e","modified":1681290753371},{"_id":"public/2022/10/18/JavaScript/index.html","hash":"4457573823d46180331b7f41bed53ca66791470e","modified":1681290753371},{"_id":"public/2022/08/15/LeetCode 2376. 统计特殊整数/index.html","hash":"43835cbdcd1168825264d32ee876d24918843504","modified":1681290753371},{"_id":"public/2022/08/15/LIinux-常用命令/index.html","hash":"c007f2919cce19748f1c9ade2a4ffb10593ed2ad","modified":1681290753371},{"_id":"public/index.html","hash":"f50d924e9dc79396bd13145522566dacc9cfe7a6","modified":1681290753371},{"_id":"public/categories/index.html","hash":"70d52846f214084f1fb85bfcd3157b825a8aa3a2","modified":1681290753371},{"_id":"public/links/index.html","hash":"33d9be11f4c97763d0fb6a3e015fb9f1a2168889","modified":1681290753371},{"_id":"public/lrc/lrc_.lrc","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681290753371},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1681290753371},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1681290753371},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1681290753371},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1681290753371},{"_id":"public/dist/APlayer.min.css.map","hash":"c59d2bc9472922cf6ef9a99e052dbee6cc7e6b36","modified":1681290753371},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1681290753371},{"_id":"public/img/car.png","hash":"ca98f03224493ed3e827535f21eaa03defe45f46","modified":1681290753371},{"_id":"public/img/touxiang.png","hash":"c346b52b3a99a195365ffa49f68606aeaa5624fd","modified":1681290753371},{"_id":"public/lrc/Body-.lrc","hash":"0cc04f79fb8786039e41e01144aadc918236d8b1","modified":1681290753371},{"_id":"public/lrc/Body.lrc","hash":"61238b8a5b7c7a4b5d9aeca4d217bd23a46d4c15","modified":1681290753371},{"_id":"public/lrc/I Want You to Know - Zedd-.lrc","hash":"53294c270f39afc5fdcd27357150c7dc005bce16","modified":1681290753371},{"_id":"public/lrc/Letting Go.lrc","hash":"6a2c6338eb1885f25d7761a2553216ce0b8bf478","modified":1681290753371},{"_id":"public/lrc/I Want You to Know - Zedd.lrc","hash":"188de57cb5015b7622aad7350b430a4a329564fb","modified":1681290753371},{"_id":"public/lrc/We-.lrc","hash":"1be2c4076dfb65a5e6b5ac8bdb8cdee9e177ec6c","modified":1681290753371},{"_id":"public/lrc/We.lrc","hash":"0b44a29ffd9e6a182cfda6534a61442da4e099e4","modified":1681290753371},{"_id":"public/lrc/在你的身边.lrc","hash":"fe49521a3e20dbaa48510084a4b1d6a4f67b3acc","modified":1681290753371},{"_id":"public/img/article/JavaScript.png","hash":"2789683cfab7e656e65d5310e0ef7faab7b67b69","modified":1681290753371},{"_id":"public/img/article/git.jpg","hash":"0d75a000704d2d82f7914cef826e3dcc546f33cf","modified":1681290753371},{"_id":"public/img/article/leetcode.jpg","hash":"445b2143e06b0df8d0d3af558dcb8ebb5fa76e86","modified":1681290753371},{"_id":"public/img/games/King Of Bots.png","hash":"8f9829258ba99b44e3746120502bb5783ceb9d42","modified":1681290753371},{"_id":"public/img/article/logo.jpg","hash":"9576f866ca7d716add9e35807cb79333364efc0f","modified":1681290753371},{"_id":"public/img/games/五子棋（人vsAI）.png","hash":"4e212f505b35194a8fd1c9def93bc048f022b29c","modified":1681290753371},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1681290753371},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1681290753371},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1681290753371},{"_id":"public/img/qq.png","hash":"b5ad4faec7914103f72ae01f7e106974cceff1bc","modified":1681290753371},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1681290753371},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1681290753371},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1681290753371},{"_id":"public/dist/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1681290753371},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1681290753371},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1681290753371},{"_id":"public/js/duration.js","hash":"d961feba853cd572eae41331c8e79a373995f59a","modified":1681290753371},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1681290753371},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1681290753371},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1681290753371},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1681290753371},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1681290753371},{"_id":"public/js/music.js","hash":"c80dc594f9d3c09dba2e29bd4d61ddb3bcc5e3cc","modified":1681290753371},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1681290753371},{"_id":"public/css/main.css","hash":"94f9e394de6d759eaeb0d9eaba2588057e3e935d","modified":1681290753371},{"_id":"public/dist/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1681290753371},{"_id":"public/dist/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1681290753371},{"_id":"public/img/1.png","hash":"5770013e07297677048e63e0984027ea057322d8","modified":1681290753371},{"_id":"public/img/article/default_index_img.jpg","hash":"c220edcf43bb757e4fcc7fd1c7b70b6293427ba6","modified":1681290753371},{"_id":"public/img/games/平面射击小游戏.png","hash":"0575da73fd3ad0d6a8bd65719e2352d41659951b","modified":1681290753371},{"_id":"public/img/article/Linux.jpg","hash":"cadfb4ea78d590ff8f5162ac25d9dfd1c8088b35","modified":1681290753371},{"_id":"public/img/games/危险货车.png","hash":"dddb5bef9e9b04ef408001800ac37068b3c79081","modified":1681290753371},{"_id":"public/img/games/水果忍者.png","hash":"1f1282c6f1bff3a660e1c46f26e516feeed762c4","modified":1681290753371},{"_id":"public/img/background8.png","hash":"cdd715387e5c466fdc66bb14d927d2497e31b5a6","modified":1681290753371},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1681290753371},{"_id":"public/img/background10.png","hash":"ecc7fd521170c45ba488bf847f415fda80ff10bc","modified":1681290753371},{"_id":"public/img/yuantouxiang.png","hash":"6b36741a275cd84d5559dcc268682d933df84255","modified":1681290753371},{"_id":"public/img/background9.png","hash":"5e16f92f79e88576f09678a5128c75bce0c57acb","modified":1681290753371},{"_id":"public/img/background7.png","hash":"bc605a96beab4822e26b6c144017c7062d8a0f06","modified":1681290753371},{"_id":"public/img/background3.png","hash":"09831155b34adc9fe4e696345117c1f076d2cc90","modified":1681290753371},{"_id":"public/img/background2.png","hash":"beea581d83e9bb34f0144d495a063a83875388f1","modified":1681290753371},{"_id":"public/img/background3-.png","hash":"a05823e4479ef38766a7d2b49ff42eafbab4b29d","modified":1681290753371},{"_id":"public/img/games/黄金矿工.png","hash":"cccabe02c3d4e4d6b6d624cee74d1850ae45c0ea","modified":1681290753371},{"_id":"public/img/background4.png","hash":"dfa59dfbc07bc1dcd19fbb923515257161d36501","modified":1681290753371},{"_id":"public/img/games/萌怪大冒险.png","hash":"67f6cc2cdf60e59e51e36d0efc5c92575be7262d","modified":1681290753371},{"_id":"public/img/background0.png","hash":"7c1f2f2651ee595d63ef89a5ffdf3f1fc46c341d","modified":1681290753371},{"_id":"public/img/background1.png","hash":"83db626e2417bcdd86d3775d8c7e57462522cf8e","modified":1681290753371},{"_id":"public/img/background6.png","hash":"a6221803d2db512f75263c94930fb46b341cc35c","modified":1681290753371},{"_id":"public/wyy/Body.m4a","hash":"8b40b41e22ed155134bfc655cbb10e7fa93469ca","modified":1681290753371},{"_id":"public/wyy/We.m4a","hash":"1ab68ea192a68355f2ec4b241b39255cb77d3e0a","modified":1681290753371},{"_id":"public/wyy/Time To Love.mp3","hash":"02cf15b525e47cb1770a3a856228d6995bb7323e","modified":1681290753371},{"_id":"public/wyy/I Want You to Know.m4a","hash":"273c02ebbae7b492f2ae7daa4e0d41f8e1d0451d","modified":1681290753371},{"_id":"public/wyy/Letting Go.m4a","hash":"8913612fa73d961b39510c1361354d7532377f07","modified":1681290753371}],"Category":[{"name":"编程语言学习","_id":"clgdh3tv80004ccvz9tssbt1o"},{"name":"操作系统","_id":"clgdh3tvg000accvz96iu1itx"},{"name":"LeetCode_算法题解","_id":"clgdh3tvj000fccvz8j4q975w"},{"name":"git&github","_id":"clgdh3tvv0011ccvzhcb9fko8"},{"name":"博客的总结","_id":"clgdh3tvx0014ccvz23532d0a"}],"Data":[],"Page":[{"title":"标题","layout":"about","_content":"\n## 个人简介：\n\n一名普通本科的大三科班生，还在努力中，~~励志向大佬看齐，未来一片黑暗，长得不健康的小菜鸡。~~\n~~同时这也是我第一个自己搭建并上线的项目，希望以后继续努力，我也会把自己经历和成长记录在我的博客中，继续加油！~~\n~~（喵的，废话真多，太消极了，建议重开吧，哈哈哈）~~\n\n## 目前状态：\n\n~~算法，算法没学会（继续坚持刷），项目，项目没有做（住在github，学习别人的好项目（抄b站，哈哈）），英语，英语不会，（命中缺英语，看见英语，我只想说 你丫的 ** 个 ** 的 ** ，不会，寄 ~ ）。~~\n（喜欢做梦，哈哈 ~） \n\n## 未来规划：\n\n摆烂！（很大声）（假话 ~ ~ ~）\n\n## 浅浅的学习了的技术：\n\n（只能说是了解，使用过罢了，哈哈）\n\nLinux(**ssh** + **git** + thrift + **docker**)\nWeb(**JavaScript** + **TypeScript** + **vue3** | React + **Html** + **scss**)\nJava(**SpringBoot** + **MyBatis-Plus**)\nDjango(**Nginx** + **WebSocket** + Rest Framework and **JWT**)\nC#(**.Net6** + **Sql sugar** + **JWT**)\n(学了的会再加~~~)\n\n~~什么情况，到底行不行啊，搁着做梦呢？？？快去学呀 ~ 你丫的瞅啥呢？？？~~\n\n## 学习历程\n\n+ #####  大二下：\n 两个字总结 迷茫（现在也是，哈哈）\n 学习了y总的工程课，对行业的相关技术有些了解\n\n+ ##### 大三上：\n 学习了相关项目，包括c#，android，还是很菜，啊啊啊啊啊~\n\n+ ##### 大三下：\n 只能说很菜，但还是无欲无求，不知道干嘛，丝毫不慌，但要保持微笑，~~心态好~~，哈哈~\n ~~心理问题，哈哈~~\n\n<center>\n    <b><font size='5px'>Always try to improve myself！</font></b>\n</center>","source":"about/index.md","raw":"---\ntitle: 标题\nlayout: about\n---\n\n## 个人简介：\n\n一名普通本科的大三科班生，还在努力中，~~励志向大佬看齐，未来一片黑暗，长得不健康的小菜鸡。~~\n~~同时这也是我第一个自己搭建并上线的项目，希望以后继续努力，我也会把自己经历和成长记录在我的博客中，继续加油！~~\n~~（喵的，废话真多，太消极了，建议重开吧，哈哈哈）~~\n\n## 目前状态：\n\n~~算法，算法没学会（继续坚持刷），项目，项目没有做（住在github，学习别人的好项目（抄b站，哈哈）），英语，英语不会，（命中缺英语，看见英语，我只想说 你丫的 ** 个 ** 的 ** ，不会，寄 ~ ）。~~\n（喜欢做梦，哈哈 ~） \n\n## 未来规划：\n\n摆烂！（很大声）（假话 ~ ~ ~）\n\n## 浅浅的学习了的技术：\n\n（只能说是了解，使用过罢了，哈哈）\n\nLinux(**ssh** + **git** + thrift + **docker**)\nWeb(**JavaScript** + **TypeScript** + **vue3** | React + **Html** + **scss**)\nJava(**SpringBoot** + **MyBatis-Plus**)\nDjango(**Nginx** + **WebSocket** + Rest Framework and **JWT**)\nC#(**.Net6** + **Sql sugar** + **JWT**)\n(学了的会再加~~~)\n\n~~什么情况，到底行不行啊，搁着做梦呢？？？快去学呀 ~ 你丫的瞅啥呢？？？~~\n\n## 学习历程\n\n+ #####  大二下：\n 两个字总结 迷茫（现在也是，哈哈）\n 学习了y总的工程课，对行业的相关技术有些了解\n\n+ ##### 大三上：\n 学习了相关项目，包括c#，android，还是很菜，啊啊啊啊啊~\n\n+ ##### 大三下：\n 只能说很菜，但还是无欲无求，不知道干嘛，丝毫不慌，但要保持微笑，~~心态好~~，哈哈~\n ~~心理问题，哈哈~~\n\n<center>\n    <b><font size='5px'>Always try to improve myself！</font></b>\n</center>","date":"2023-03-25T09:48:45.325Z","updated":"2023-03-25T09:48:45.325Z","path":"about/index.html","comments":1,"_id":"clgdh3tut0000ccvz0lzy6k12","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"个人简介：\"><a href=\"#个人简介：\" class=\"headerlink\" title=\"个人简介：\"></a>个人简介：</h2><p>一名普通本科的大三科班生，还在努力中，<del>励志向大佬看齐，未来一片黑暗，长得不健康的小菜鸡。</del><br><del>同时这也是我第一个自己搭建并上线的项目，希望以后继续努力，我也会把自己经历和成长记录在我的博客中，继续加油！</del><br><del>（喵的，废话真多，太消极了，建议重开吧，哈哈哈）</del></p>\n<h2 id=\"目前状态：\"><a href=\"#目前状态：\" class=\"headerlink\" title=\"目前状态：\"></a>目前状态：</h2><p><del>算法，算法没学会（继续坚持刷），项目，项目没有做（住在github，学习别人的好项目（抄b站，哈哈）），英语，英语不会，（命中缺英语，看见英语，我只想说 你丫的 ** 个 ** 的 ** ，不会，寄 ~ ）。</del><br>（喜欢做梦，哈哈 ~） </p>\n<h2 id=\"未来规划：\"><a href=\"#未来规划：\" class=\"headerlink\" title=\"未来规划：\"></a>未来规划：</h2><p>摆烂！（很大声）（假话 ~ ~ ~）</p>\n<h2 id=\"浅浅的学习了的技术：\"><a href=\"#浅浅的学习了的技术：\" class=\"headerlink\" title=\"浅浅的学习了的技术：\"></a>浅浅的学习了的技术：</h2><p>（只能说是了解，使用过罢了，哈哈）</p>\n<p>Linux(<strong>ssh</strong> + <strong>git</strong> + thrift + <strong>docker</strong>)<br>Web(<strong>JavaScript</strong> + <strong>TypeScript</strong> + <strong>vue3</strong> | React + <strong>Html</strong> + <strong>scss</strong>)<br>Java(<strong>SpringBoot</strong> + <strong>MyBatis-Plus</strong>)<br>Django(<strong>Nginx</strong> + <strong>WebSocket</strong> + Rest Framework and <strong>JWT</strong>)<br>C#(<strong>.Net6</strong> + <strong>Sql sugar</strong> + <strong>JWT</strong>)<br>(学了的会再加~~~)</p>\n<p><del>什么情况，到底行不行啊，搁着做梦呢？？？快去学呀 ~ 你丫的瞅啥呢？？？</del></p>\n<h2 id=\"学习历程\"><a href=\"#学习历程\" class=\"headerlink\" title=\"学习历程\"></a>学习历程</h2><ul>\n<li><h5 id=\"大二下：\"><a href=\"#大二下：\" class=\"headerlink\" title=\"大二下：\"></a>大二下：</h5><p>两个字总结 迷茫（现在也是，哈哈）<br>学习了y总的工程课，对行业的相关技术有些了解</p>\n</li>\n<li><h5 id=\"大三上：\"><a href=\"#大三上：\" class=\"headerlink\" title=\"大三上：\"></a>大三上：</h5><p>学习了相关项目，包括c#，android，还是很菜，啊啊啊啊啊~</p>\n</li>\n<li><h5 id=\"大三下：\"><a href=\"#大三下：\" class=\"headerlink\" title=\"大三下：\"></a>大三下：</h5><p>只能说很菜，但还是无欲无求，不知道干嘛，丝毫不慌，但要保持微笑，<del>心态好</del>，哈哈~<br><del>心理问题，哈哈</del></p>\n</li>\n</ul>\n<center>\n    <b><font size='5px'>Always try to improve myself！</font></b>\n</center>","site":{"data":{}},"wordcount":655,"excerpt":"","more":"<h2 id=\"个人简介：\"><a href=\"#个人简介：\" class=\"headerlink\" title=\"个人简介：\"></a>个人简介：</h2><p>一名普通本科的大三科班生，还在努力中，<del>励志向大佬看齐，未来一片黑暗，长得不健康的小菜鸡。</del><br><del>同时这也是我第一个自己搭建并上线的项目，希望以后继续努力，我也会把自己经历和成长记录在我的博客中，继续加油！</del><br><del>（喵的，废话真多，太消极了，建议重开吧，哈哈哈）</del></p>\n<h2 id=\"目前状态：\"><a href=\"#目前状态：\" class=\"headerlink\" title=\"目前状态：\"></a>目前状态：</h2><p><del>算法，算法没学会（继续坚持刷），项目，项目没有做（住在github，学习别人的好项目（抄b站，哈哈）），英语，英语不会，（命中缺英语，看见英语，我只想说 你丫的 ** 个 ** 的 ** ，不会，寄 ~ ）。</del><br>（喜欢做梦，哈哈 ~） </p>\n<h2 id=\"未来规划：\"><a href=\"#未来规划：\" class=\"headerlink\" title=\"未来规划：\"></a>未来规划：</h2><p>摆烂！（很大声）（假话 ~ ~ ~）</p>\n<h2 id=\"浅浅的学习了的技术：\"><a href=\"#浅浅的学习了的技术：\" class=\"headerlink\" title=\"浅浅的学习了的技术：\"></a>浅浅的学习了的技术：</h2><p>（只能说是了解，使用过罢了，哈哈）</p>\n<p>Linux(<strong>ssh</strong> + <strong>git</strong> + thrift + <strong>docker</strong>)<br>Web(<strong>JavaScript</strong> + <strong>TypeScript</strong> + <strong>vue3</strong> | React + <strong>Html</strong> + <strong>scss</strong>)<br>Java(<strong>SpringBoot</strong> + <strong>MyBatis-Plus</strong>)<br>Django(<strong>Nginx</strong> + <strong>WebSocket</strong> + Rest Framework and <strong>JWT</strong>)<br>C#(<strong>.Net6</strong> + <strong>Sql sugar</strong> + <strong>JWT</strong>)<br>(学了的会再加~~~)</p>\n<p><del>什么情况，到底行不行啊，搁着做梦呢？？？快去学呀 ~ 你丫的瞅啥呢？？？</del></p>\n<h2 id=\"学习历程\"><a href=\"#学习历程\" class=\"headerlink\" title=\"学习历程\"></a>学习历程</h2><ul>\n<li><h5 id=\"大二下：\"><a href=\"#大二下：\" class=\"headerlink\" title=\"大二下：\"></a>大二下：</h5><p>两个字总结 迷茫（现在也是，哈哈）<br>学习了y总的工程课，对行业的相关技术有些了解</p>\n</li>\n<li><h5 id=\"大三上：\"><a href=\"#大三上：\" class=\"headerlink\" title=\"大三上：\"></a>大三上：</h5><p>学习了相关项目，包括c#，android，还是很菜，啊啊啊啊啊~</p>\n</li>\n<li><h5 id=\"大三下：\"><a href=\"#大三下：\" class=\"headerlink\" title=\"大三下：\"></a>大三下：</h5><p>只能说很菜，但还是无欲无求，不知道干嘛，丝毫不慌，但要保持微笑，<del>心态好</del>，哈哈~<br><del>心理问题，哈哈</del></p>\n</li>\n</ul>\n<center>\n    <b><font size='5px'>Always try to improve myself！</font></b>\n</center>"},{"_content":"/* 打字机效果渐变 -bynote.cn*/\n\n/* #subtitle {\n    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);\n    background-size: 400% 400%;\n    -webkit-animation: Gradient 10s ease infinite;\n    -moz-animation: Gradient 10s ease infinite;\n    animation: Gradient 10s ease infinite;\n    -o-user-select: none;\n    -ms-user-select: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n}\n\n#subtitle:before {\n    background-color: rgba(0, 0, 0, 0);\n} */","source":"css/toubudaziji.css","raw":"/* 打字机效果渐变 -bynote.cn*/\n\n/* #subtitle {\n    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);\n    background-size: 400% 400%;\n    -webkit-animation: Gradient 10s ease infinite;\n    -moz-animation: Gradient 10s ease infinite;\n    animation: Gradient 10s ease infinite;\n    -o-user-select: none;\n    -ms-user-select: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n}\n\n#subtitle:before {\n    background-color: rgba(0, 0, 0, 0);\n} */","date":"2023-03-01T07:54:24.994Z","updated":"2022-08-15T17:20:32.908Z","path":"css/toubudaziji.css","layout":"false","title":"","comments":1,"_id":"clgdh3tv40002ccvz41gq3ucb","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>/* 打字机效果渐变 -bynote.cn*/\n\n/* #subtitle {\n    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);\n    background-size: 400% 400%;\n    -webkit-animation: Gradient 10s ease infinite;\n    -moz-animation: Gradient 10s ease infinite;\n    animation: Gradient 10s ease infinite;\n    -o-user-select: none;\n    -ms-user-select: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n}\n\n#subtitle:before {\n    background-color: rgba(0, 0, 0, 0);\n} */","site":{"data":{}},"wordcount":519,"excerpt":"","more":"/* 打字机效果渐变 -bynote.cn*/\n\n/* #subtitle {\n    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);\n    background-size: 400% 400%;\n    -webkit-animation: Gradient 10s ease infinite;\n    -moz-animation: Gradient 10s ease infinite;\n    animation: Gradient 10s ease infinite;\n    -o-user-select: none;\n    -ms-user-select: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    border-top-left-radius: 10px;\n    border-top-right-radius: 10px;\n}\n\n#subtitle:before {\n    background-color: rgba(0, 0, 0, 0);\n} */"},{"_content":"(function (window, document, undefined) {\n    var hearts = [];\n    window.requestAnimationFrame = (function () {\n        return window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function (callback) {\n                setTimeout(callback, 1000 / 60);\n            }\n    })();\n    init();\n\n    function init() {\n        css(\n            \".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"\n        );\n        attachEvent();\n        gameloop();\n    }\n\n    function gameloop() {\n        for (var i = 0; i < hearts.length; i++) {\n            if (hearts[i].alpha <= 0) {\n                document.body.removeChild(hearts[i].el);\n                hearts.splice(i, 1);\n                continue;\n            }\n            hearts[i].y--;\n            hearts[i].scale += 0.004;\n            hearts[i].alpha -= 0.013;\n            hearts[i].el.style.cssText = \"left:\" + hearts[i].x + \"px;top:\" + hearts[i].y + \"px;opacity:\" + hearts[i]\n                .alpha + \";transform:scale(\" + hearts[i].scale + \",\" + hearts[i].scale +\n                \") rotate(45deg);background:\" + hearts[i].color;\n        }\n        requestAnimationFrame(gameloop);\n    }\n\n    function attachEvent() {\n        var old = typeof window.onclick === \"function\" && window.onclick;\n        window.onclick = function (event) {\n            old && old();\n            createHeart(event);\n        }\n    }\n\n    function createHeart(event) {\n        var d = document.createElement(\"div\");\n        d.className = \"heart\";\n        hearts.push({\n            el: d,\n            x: event.clientX - 5,\n            y: event.clientY - 5,\n            scale: 1,\n            alpha: 1,\n            color: randomColor()\n        });\n        document.body.appendChild(d);\n    }\n\n    function css(css) {\n        var style = document.createElement(\"style\");\n        style.type = \"text/css\";\n        try {\n            style.appendChild(document.createTextNode(css));\n        } catch (ex) {\n            style.styleSheet.cssText = css;\n        }\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    function randomColor() {\n        return \"rgb(\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) +\n            \")\";\n    }\n})(window, document);","source":"js/love.js","raw":"(function (window, document, undefined) {\n    var hearts = [];\n    window.requestAnimationFrame = (function () {\n        return window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function (callback) {\n                setTimeout(callback, 1000 / 60);\n            }\n    })();\n    init();\n\n    function init() {\n        css(\n            \".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"\n        );\n        attachEvent();\n        gameloop();\n    }\n\n    function gameloop() {\n        for (var i = 0; i < hearts.length; i++) {\n            if (hearts[i].alpha <= 0) {\n                document.body.removeChild(hearts[i].el);\n                hearts.splice(i, 1);\n                continue;\n            }\n            hearts[i].y--;\n            hearts[i].scale += 0.004;\n            hearts[i].alpha -= 0.013;\n            hearts[i].el.style.cssText = \"left:\" + hearts[i].x + \"px;top:\" + hearts[i].y + \"px;opacity:\" + hearts[i]\n                .alpha + \";transform:scale(\" + hearts[i].scale + \",\" + hearts[i].scale +\n                \") rotate(45deg);background:\" + hearts[i].color;\n        }\n        requestAnimationFrame(gameloop);\n    }\n\n    function attachEvent() {\n        var old = typeof window.onclick === \"function\" && window.onclick;\n        window.onclick = function (event) {\n            old && old();\n            createHeart(event);\n        }\n    }\n\n    function createHeart(event) {\n        var d = document.createElement(\"div\");\n        d.className = \"heart\";\n        hearts.push({\n            el: d,\n            x: event.clientX - 5,\n            y: event.clientY - 5,\n            scale: 1,\n            alpha: 1,\n            color: randomColor()\n        });\n        document.body.appendChild(d);\n    }\n\n    function css(css) {\n        var style = document.createElement(\"style\");\n        style.type = \"text/css\";\n        try {\n            style.appendChild(document.createTextNode(css));\n        } catch (ex) {\n            style.styleSheet.cssText = css;\n        }\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    function randomColor() {\n        return \"rgb(\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) +\n            \")\";\n    }\n})(window, document);","date":"2023-03-01T07:54:24.997Z","updated":"2022-08-15T16:43:12.678Z","path":"js/love.js","layout":"false","title":"","comments":1,"_id":"clgdh3tvd0006ccvzh2ze0nx0","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>(function (window, document, undefined) {\n    var hearts = [];\n    window.requestAnimationFrame = (function () {\n        return window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function (callback) {\n                setTimeout(callback, 1000 / 60);\n            }\n    })();\n    init();\n\n    function init() {\n        css(\n            \".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"\n        );\n        attachEvent();\n        gameloop();\n    }\n\n    function gameloop() {\n        for (var i = 0; i < hearts.length; i++) {\n            if (hearts[i].alpha <= 0) {\n                document.body.removeChild(hearts[i].el);\n                hearts.splice(i, 1);\n                continue;\n            }\n            hearts[i].y--;\n            hearts[i].scale += 0.004;\n            hearts[i].alpha -= 0.013;\n            hearts[i].el.style.cssText = \"left:\" + hearts[i].x + \"px;top:\" + hearts[i].y + \"px;opacity:\" + hearts[i]\n                .alpha + \";transform:scale(\" + hearts[i].scale + \",\" + hearts[i].scale +\n                \") rotate(45deg);background:\" + hearts[i].color;\n        }\n        requestAnimationFrame(gameloop);\n    }\n\n    function attachEvent() {\n        var old = typeof window.onclick === \"function\" && window.onclick;\n        window.onclick = function (event) {\n            old && old();\n            createHeart(event);\n        }\n    }\n\n    function createHeart(event) {\n        var d = document.createElement(\"div\");\n        d.className = \"heart\";\n        hearts.push({\n            el: d,\n            x: event.clientX - 5,\n            y: event.clientY - 5,\n            scale: 1,\n            alpha: 1,\n            color: randomColor()\n        });\n        document.body.appendChild(d);\n    }\n\n    function css(css) {\n        var style = document.createElement(\"style\");\n        style.type = \"text/css\";\n        try {\n            style.appendChild(document.createTextNode(css));\n        } catch (ex) {\n            style.styleSheet.cssText = css;\n        }\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    function randomColor() {\n        return \"rgb(\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) +\n            \")\";\n    }\n})(window, document);","site":{"data":{}},"wordcount":805,"excerpt":"","more":"(function (window, document, undefined) {\n    var hearts = [];\n    window.requestAnimationFrame = (function () {\n        return window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function (callback) {\n                setTimeout(callback, 1000 / 60);\n            }\n    })();\n    init();\n\n    function init() {\n        css(\n            \".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: absolute;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"\n        );\n        attachEvent();\n        gameloop();\n    }\n\n    function gameloop() {\n        for (var i = 0; i < hearts.length; i++) {\n            if (hearts[i].alpha <= 0) {\n                document.body.removeChild(hearts[i].el);\n                hearts.splice(i, 1);\n                continue;\n            }\n            hearts[i].y--;\n            hearts[i].scale += 0.004;\n            hearts[i].alpha -= 0.013;\n            hearts[i].el.style.cssText = \"left:\" + hearts[i].x + \"px;top:\" + hearts[i].y + \"px;opacity:\" + hearts[i]\n                .alpha + \";transform:scale(\" + hearts[i].scale + \",\" + hearts[i].scale +\n                \") rotate(45deg);background:\" + hearts[i].color;\n        }\n        requestAnimationFrame(gameloop);\n    }\n\n    function attachEvent() {\n        var old = typeof window.onclick === \"function\" && window.onclick;\n        window.onclick = function (event) {\n            old && old();\n            createHeart(event);\n        }\n    }\n\n    function createHeart(event) {\n        var d = document.createElement(\"div\");\n        d.className = \"heart\";\n        hearts.push({\n            el: d,\n            x: event.clientX - 5,\n            y: event.clientY - 5,\n            scale: 1,\n            alpha: 1,\n            color: randomColor()\n        });\n        document.body.appendChild(d);\n    }\n\n    function css(css) {\n        var style = document.createElement(\"style\");\n        style.type = \"text/css\";\n        try {\n            style.appendChild(document.createTextNode(css));\n        } catch (ex) {\n            style.styleSheet.cssText = css;\n        }\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    function randomColor() {\n        return \"rgb(\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) + \",\" + (~~(Math.random() * 255)) +\n            \")\";\n    }\n})(window, document);"},{"title":"游戏","date":"2022-08-30T15:48:34.000Z","banner_img":"/img/background10.png","_content":"\n#### Tip : 这里是游戏界面，点击图片跳转到游戏页面哦！ \n游戏来源：感谢[海拥](https://haiyong.site/moyu/)大佬支持\n\n-------------\n<a href=\"https://app4020.acapp.acwing.com.cn/user/account/login/\">\n<h4>King Of Bots</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/King Of Bots.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/mgdmx/\">\n<h4>萌怪大冒险</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/萌怪大冒险.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://wanghao221.github.io/shuiguorenzhe/\">\n<h4>水果忍者</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/水果忍者.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/SpaceHuggers/\">\n<h4>平面射击小游戏</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/平面射击小游戏.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/weixiandehuoche/\">\n<h4>危险货车</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/危险货车.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/wuziqi.html\">\n<h4>五子棋（人vsAI）</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/五子棋（人vsAI）.png\">        \n    </img>\n</a>\n<a href=\"https://haiyong.site/moyu/wu.html\">\n<h4>五子棋（人vs人）</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/五子棋（人vsAI）.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/hjkg/\">\n<h4>黄金矿工</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/黄金矿工.png\">        \n    </img>\n</a>\n\n-------------\n\n\n写在最后：希望每一个访客，都可以愉快，轻松的游戏，如果你有什么做的好的游戏，联系我添加QvQ","source":"game/index.md","raw":"---\ntitle: 游戏\ndate: 2022-08-30 23:48:34\nbanner_img: /img/background10.png\n---\n\n#### Tip : 这里是游戏界面，点击图片跳转到游戏页面哦！ \n游戏来源：感谢[海拥](https://haiyong.site/moyu/)大佬支持\n\n-------------\n<a href=\"https://app4020.acapp.acwing.com.cn/user/account/login/\">\n<h4>King Of Bots</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/King Of Bots.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/mgdmx/\">\n<h4>萌怪大冒险</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/萌怪大冒险.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://wanghao221.github.io/shuiguorenzhe/\">\n<h4>水果忍者</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/水果忍者.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/SpaceHuggers/\">\n<h4>平面射击小游戏</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/平面射击小游戏.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/weixiandehuoche/\">\n<h4>危险货车</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/危险货车.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/wuziqi.html\">\n<h4>五子棋（人vsAI）</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/五子棋（人vsAI）.png\">        \n    </img>\n</a>\n<a href=\"https://haiyong.site/moyu/wu.html\">\n<h4>五子棋（人vs人）</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/五子棋（人vsAI）.png\">        \n    </img>\n</a>\n\n-------------\n\n<a href=\"https://haiyong.site/moyu/hjkg/\">\n<h4>黄金矿工</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/黄金矿工.png\">        \n    </img>\n</a>\n\n-------------\n\n\n写在最后：希望每一个访客，都可以愉快，轻松的游戏，如果你有什么做的好的游戏，联系我添加QvQ","updated":"2023-03-25T10:10:40.795Z","path":"game/index.html","comments":1,"layout":"page","_id":"clgdh3tvf0008ccvzb8cg4b5v","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h4 id=\"Tip-这里是游戏界面，点击图片跳转到游戏页面哦！\"><a href=\"#Tip-这里是游戏界面，点击图片跳转到游戏页面哦！\" class=\"headerlink\" title=\"Tip : 这里是游戏界面，点击图片跳转到游戏页面哦！\"></a>Tip : 这里是游戏界面，点击图片跳转到游戏页面哦！</h4><p>游戏来源：感谢<a href=\"https://haiyong.site/moyu/\">海拥</a>大佬支持</p>\n<hr>\n<a href=\"https://app4020.acapp.acwing.com.cn/user/account/login/\">\n<h4>King Of Bots</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/King Of Bots.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/mgdmx/\">\n<h4>萌怪大冒险</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/萌怪大冒险.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://wanghao221.github.io/shuiguorenzhe/\">\n<h4>水果忍者</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/水果忍者.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/SpaceHuggers/\">\n<h4>平面射击小游戏</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/平面射击小游戏.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/weixiandehuoche/\">\n<h4>危险货车</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/危险货车.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/wuziqi.html\">\n<h4>五子棋（人vsAI）</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/五子棋（人vsAI）.png\">        \n    </img>\n</a>\n<a href=\"https://haiyong.site/moyu/wu.html\">\n<h4>五子棋（人vs人）</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/五子棋（人vsAI）.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/hjkg/\">\n<h4>黄金矿工</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/黄金矿工.png\">        \n    </img>\n</a>\n\n<hr>\n<p>写在最后：希望每一个访客，都可以愉快，轻松的游戏，如果你有什么做的好的游戏，联系我添加QvQ</p>\n","site":{"data":{}},"wordcount":137,"excerpt":"","more":"<h4 id=\"Tip-这里是游戏界面，点击图片跳转到游戏页面哦！\"><a href=\"#Tip-这里是游戏界面，点击图片跳转到游戏页面哦！\" class=\"headerlink\" title=\"Tip : 这里是游戏界面，点击图片跳转到游戏页面哦！\"></a>Tip : 这里是游戏界面，点击图片跳转到游戏页面哦！</h4><p>游戏来源：感谢<a href=\"https://haiyong.site/moyu/\">海拥</a>大佬支持</p>\n<hr>\n<a href=\"https://app4020.acapp.acwing.com.cn/user/account/login/\">\n<h4>King Of Bots</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/King Of Bots.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/mgdmx/\">\n<h4>萌怪大冒险</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/萌怪大冒险.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://wanghao221.github.io/shuiguorenzhe/\">\n<h4>水果忍者</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/水果忍者.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/SpaceHuggers/\">\n<h4>平面射击小游戏</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/平面射击小游戏.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/weixiandehuoche/\">\n<h4>危险货车</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/危险货车.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/wuziqi.html\">\n<h4>五子棋（人vsAI）</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/五子棋（人vsAI）.png\">        \n    </img>\n</a>\n<a href=\"https://haiyong.site/moyu/wu.html\">\n<h4>五子棋（人vs人）</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/五子棋（人vsAI）.png\">        \n    </img>\n</a>\n\n<hr>\n<a href=\"https://haiyong.site/moyu/hjkg/\">\n<h4>黄金矿工</h4>\n        <img height=\"250px\" width=\"895px\" src=\"/img/games/黄金矿工.png\">        \n    </img>\n</a>\n\n<hr>\n<p>写在最后：希望每一个访客，都可以愉快，轻松的游戏，如果你有什么做的好的游戏，联系我添加QvQ</p>\n"},{"_content":"// 上升的气泡bynote.cn\nfunction qipao() {\n    $('#background').circleMagic({\n        radius: 10,\n        density: .2,\n        color: 'rgba(255,255,255,.4)',\n        clearOffset: 0.99\n    });\n} ! function (p) {\n    p.fn.circleMagic = function (t) {\n        var o, a, n, r, e = !0,\n            i = [],\n            d = p.extend({ color: \"rgba(255,0,0,.5)\", radius: 10, density: .3, clearOffset: .2 }, t),\n            l = this[0];\n\n        function c() { e = !(document.body.scrollTop > a) }\n\n        function s() { o = l.clientWidth, a = l.clientHeight, l.height = a + \"px\", n.width = o, n.height = a }\n\n        function h() {\n            if (e)\n                for (var t in r.clearRect(0, 0, o, a), i) i[t].draw();\n            requestAnimationFrame(h)\n        }\n\n        function f() {\n            var t = this;\n\n            function e() { t.pos.x = Math.random() * o, t.pos.y = a + 100 * Math.random(), t.alpha = .1 + Math.random() * d.clearOffset, t.scale = .1 + .3 * Math.random(), t.speed = Math.random(), \"random\" === d.color ? t.color = \"rgba(\" + Math.floor(255 * Math.random()) + \", \" + Math.floor(0 * Math.random()) + \", \" + Math.floor(0 * Math.random()) + \", \" + Math.random().toPrecision(2) + \")\" : t.color = d.color }\n            t.pos = {}, e(), this.draw = function () { t.alpha <= 0 && e(), t.pos.y -= t.speed, t.alpha -= 5e-4, r.beginPath(), r.arc(t.pos.x, t.pos.y, t.scale * d.radius, 0, 2 * Math.PI, !1), r.fillStyle = t.color, r.fill(), r.closePath() }\n        } ! function () {\n            o = l.offsetWidth, a = l.offsetHeight,\n                function () {\n                    var t = document.createElement(\"canvas\");\n                    t.id = \"canvas\", t.style.top = 0, t.style.zIndex = 0, t.style.position = \"absolute\", l.appendChild(t), t.parentElement.style.overflow = \"hidden\"\n                }(), (n = document.getElementById(\"canvas\")).width = o, n.height = a, r = n.getContext(\"2d\");\n            for (var t = 0; t < o * d.density; t++) {\n                var e = new f;\n                i.push(e)\n            }\n            h()\n        }(), window.addEventListener(\"scroll\", c, !1), window.addEventListener(\"resize\", s, !1)\n    }\n}(jQuery);\nqipao()","source":"js/qipao.js","raw":"// 上升的气泡bynote.cn\nfunction qipao() {\n    $('#background').circleMagic({\n        radius: 10,\n        density: .2,\n        color: 'rgba(255,255,255,.4)',\n        clearOffset: 0.99\n    });\n} ! function (p) {\n    p.fn.circleMagic = function (t) {\n        var o, a, n, r, e = !0,\n            i = [],\n            d = p.extend({ color: \"rgba(255,0,0,.5)\", radius: 10, density: .3, clearOffset: .2 }, t),\n            l = this[0];\n\n        function c() { e = !(document.body.scrollTop > a) }\n\n        function s() { o = l.clientWidth, a = l.clientHeight, l.height = a + \"px\", n.width = o, n.height = a }\n\n        function h() {\n            if (e)\n                for (var t in r.clearRect(0, 0, o, a), i) i[t].draw();\n            requestAnimationFrame(h)\n        }\n\n        function f() {\n            var t = this;\n\n            function e() { t.pos.x = Math.random() * o, t.pos.y = a + 100 * Math.random(), t.alpha = .1 + Math.random() * d.clearOffset, t.scale = .1 + .3 * Math.random(), t.speed = Math.random(), \"random\" === d.color ? t.color = \"rgba(\" + Math.floor(255 * Math.random()) + \", \" + Math.floor(0 * Math.random()) + \", \" + Math.floor(0 * Math.random()) + \", \" + Math.random().toPrecision(2) + \")\" : t.color = d.color }\n            t.pos = {}, e(), this.draw = function () { t.alpha <= 0 && e(), t.pos.y -= t.speed, t.alpha -= 5e-4, r.beginPath(), r.arc(t.pos.x, t.pos.y, t.scale * d.radius, 0, 2 * Math.PI, !1), r.fillStyle = t.color, r.fill(), r.closePath() }\n        } ! function () {\n            o = l.offsetWidth, a = l.offsetHeight,\n                function () {\n                    var t = document.createElement(\"canvas\");\n                    t.id = \"canvas\", t.style.top = 0, t.style.zIndex = 0, t.style.position = \"absolute\", l.appendChild(t), t.parentElement.style.overflow = \"hidden\"\n                }(), (n = document.getElementById(\"canvas\")).width = o, n.height = a, r = n.getContext(\"2d\");\n            for (var t = 0; t < o * d.density; t++) {\n                var e = new f;\n                i.push(e)\n            }\n            h()\n        }(), window.addEventListener(\"scroll\", c, !1), window.addEventListener(\"resize\", s, !1)\n    }\n}(jQuery);\nqipao()","date":"2023-03-01T07:54:24.998Z","updated":"2022-08-15T16:50:46.915Z","path":"js/qipao.js","layout":"false","title":"","comments":1,"_id":"clgdh3tvg0009ccvz6n3ge7e5","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>// 上升的气泡bynote.cn\nfunction qipao() {\n    $('#background').circleMagic({\n        radius: 10,\n        density: .2,\n        color: 'rgba(255,255,255,.4)',\n        clearOffset: 0.99\n    });\n} ! function (p) {\n    p.fn.circleMagic = function (t) {\n        var o, a, n, r, e = !0,\n            i = [],\n            d = p.extend({ color: \"rgba(255,0,0,.5)\", radius: 10, density: .3, clearOffset: .2 }, t),\n            l = this[0];\n\n        function c() { e = !(document.body.scrollTop > a) }\n\n        function s() { o = l.clientWidth, a = l.clientHeight, l.height = a + \"px\", n.width = o, n.height = a }\n\n        function h() {\n            if (e)\n                for (var t in r.clearRect(0, 0, o, a), i) i[t].draw();\n            requestAnimationFrame(h)\n        }\n\n        function f() {\n            var t = this;\n\n            function e() { t.pos.x = Math.random() * o, t.pos.y = a + 100 * Math.random(), t.alpha = .1 + Math.random() * d.clearOffset, t.scale = .1 + .3 * Math.random(), t.speed = Math.random(), \"random\" === d.color ? t.color = \"rgba(\" + Math.floor(255 * Math.random()) + \", \" + Math.floor(0 * Math.random()) + \", \" + Math.floor(0 * Math.random()) + \", \" + Math.random().toPrecision(2) + \")\" : t.color = d.color }\n            t.pos = {}, e(), this.draw = function () { t.alpha <= 0 && e(), t.pos.y -= t.speed, t.alpha -= 5e-4, r.beginPath(), r.arc(t.pos.x, t.pos.y, t.scale * d.radius, 0, 2 * Math.PI, !1), r.fillStyle = t.color, r.fill(), r.closePath() }\n        } ! function () {\n            o = l.offsetWidth, a = l.offsetHeight,\n                function () {\n                    var t = document.createElement(\"canvas\");\n                    t.id = \"canvas\", t.style.top = 0, t.style.zIndex = 0, t.style.position = \"absolute\", l.appendChild(t), t.parentElement.style.overflow = \"hidden\"\n                }(), (n = document.getElementById(\"canvas\")).width = o, n.height = a, r = n.getContext(\"2d\");\n            for (var t = 0; t < o * d.density; t++) {\n                var e = new f;\n                i.push(e)\n            }\n            h()\n        }(), window.addEventListener(\"scroll\", c, !1), window.addEventListener(\"resize\", s, !1)\n    }\n}(jQuery);\nqipao()","site":{"data":{}},"wordcount":892,"excerpt":"","more":"// 上升的气泡bynote.cn\nfunction qipao() {\n    $('#background').circleMagic({\n        radius: 10,\n        density: .2,\n        color: 'rgba(255,255,255,.4)',\n        clearOffset: 0.99\n    });\n} ! function (p) {\n    p.fn.circleMagic = function (t) {\n        var o, a, n, r, e = !0,\n            i = [],\n            d = p.extend({ color: \"rgba(255,0,0,.5)\", radius: 10, density: .3, clearOffset: .2 }, t),\n            l = this[0];\n\n        function c() { e = !(document.body.scrollTop > a) }\n\n        function s() { o = l.clientWidth, a = l.clientHeight, l.height = a + \"px\", n.width = o, n.height = a }\n\n        function h() {\n            if (e)\n                for (var t in r.clearRect(0, 0, o, a), i) i[t].draw();\n            requestAnimationFrame(h)\n        }\n\n        function f() {\n            var t = this;\n\n            function e() { t.pos.x = Math.random() * o, t.pos.y = a + 100 * Math.random(), t.alpha = .1 + Math.random() * d.clearOffset, t.scale = .1 + .3 * Math.random(), t.speed = Math.random(), \"random\" === d.color ? t.color = \"rgba(\" + Math.floor(255 * Math.random()) + \", \" + Math.floor(0 * Math.random()) + \", \" + Math.floor(0 * Math.random()) + \", \" + Math.random().toPrecision(2) + \")\" : t.color = d.color }\n            t.pos = {}, e(), this.draw = function () { t.alpha <= 0 && e(), t.pos.y -= t.speed, t.alpha -= 5e-4, r.beginPath(), r.arc(t.pos.x, t.pos.y, t.scale * d.radius, 0, 2 * Math.PI, !1), r.fillStyle = t.color, r.fill(), r.closePath() }\n        } ! function () {\n            o = l.offsetWidth, a = l.offsetHeight,\n                function () {\n                    var t = document.createElement(\"canvas\");\n                    t.id = \"canvas\", t.style.top = 0, t.style.zIndex = 0, t.style.position = \"absolute\", l.appendChild(t), t.parentElement.style.overflow = \"hidden\"\n                }(), (n = document.getElementById(\"canvas\")).width = o, n.height = a, r = n.getContext(\"2d\");\n            for (var t = 0; t < o * d.density; t++) {\n                var e = new f;\n                i.push(e)\n            }\n            h()\n        }(), window.addEventListener(\"scroll\", c, !1), window.addEventListener(\"resize\", s, !1)\n    }\n}(jQuery);\nqipao()"},{"_content":"//运行时间bynote.cn\nvar now = new Date();\nfunction createtime() {\n    var grt = new Date(\"8/15/2022 22:22:22\");//在此处修改你的建站时间，格式：月/日/年 时:分:秒\n    now.setTime(now.getTime() + 250);\n    days = (now - grt) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);\n    hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);\n    if (String(hnum).length == 1) { hnum = \"0\" + hnum; } minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);\n    mnum = Math.floor(minutes); if (String(mnum).length == 1) { mnum = \"0\" + mnum; }\n    seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n    snum = Math.round(seconds); if (String(snum).length == 1) { snum = \"0\" + snum; }\n    document.getElementById(\"timeDate\").innerHTML = \"本站已各种夹缝中安全运行 \" + dnum + \" 天 \";\n    document.getElementById(\"times\").innerHTML = hnum + \" 小时 \" + mnum + \" 分 \" + snum + \" 秒\";\n}\nsetInterval(\"createtime()\", 250);","source":"js/timeDate.js","raw":"//运行时间bynote.cn\nvar now = new Date();\nfunction createtime() {\n    var grt = new Date(\"8/15/2022 22:22:22\");//在此处修改你的建站时间，格式：月/日/年 时:分:秒\n    now.setTime(now.getTime() + 250);\n    days = (now - grt) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);\n    hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);\n    if (String(hnum).length == 1) { hnum = \"0\" + hnum; } minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);\n    mnum = Math.floor(minutes); if (String(mnum).length == 1) { mnum = \"0\" + mnum; }\n    seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n    snum = Math.round(seconds); if (String(snum).length == 1) { snum = \"0\" + snum; }\n    document.getElementById(\"timeDate\").innerHTML = \"本站已各种夹缝中安全运行 \" + dnum + \" 天 \";\n    document.getElementById(\"times\").innerHTML = hnum + \" 小时 \" + mnum + \" 分 \" + snum + \" 秒\";\n}\nsetInterval(\"createtime()\", 250);","date":"2023-03-01T07:54:24.998Z","updated":"2022-08-20T08:52:36.529Z","path":"js/timeDate.js","layout":"false","title":"","comments":1,"_id":"clgdh3tvi000cccvz65rbdd5k","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>//运行时间bynote.cn\nvar now = new Date();\nfunction createtime() {\n    var grt = new Date(\"8/15/2022 22:22:22\");//在此处修改你的建站时间，格式：月/日/年 时:分:秒\n    now.setTime(now.getTime() + 250);\n    days = (now - grt) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);\n    hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);\n    if (String(hnum).length == 1) { hnum = \"0\" + hnum; } minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);\n    mnum = Math.floor(minutes); if (String(mnum).length == 1) { mnum = \"0\" + mnum; }\n    seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n    snum = Math.round(seconds); if (String(snum).length == 1) { snum = \"0\" + snum; }\n    document.getElementById(\"timeDate\").innerHTML = \"本站已各种夹缝中安全运行 \" + dnum + \" 天 \";\n    document.getElementById(\"times\").innerHTML = hnum + \" 小时 \" + mnum + \" 分 \" + snum + \" 秒\";\n}\nsetInterval(\"createtime()\", 250);","site":{"data":{}},"wordcount":719,"excerpt":"","more":"//运行时间bynote.cn\nvar now = new Date();\nfunction createtime() {\n    var grt = new Date(\"8/15/2022 22:22:22\");//在此处修改你的建站时间，格式：月/日/年 时:分:秒\n    now.setTime(now.getTime() + 250);\n    days = (now - grt) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);\n    hours = (now - grt) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);\n    if (String(hnum).length == 1) { hnum = \"0\" + hnum; } minutes = (now - grt) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum);\n    mnum = Math.floor(minutes); if (String(mnum).length == 1) { mnum = \"0\" + mnum; }\n    seconds = (now - grt) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n    snum = Math.round(seconds); if (String(snum).length == 1) { snum = \"0\" + snum; }\n    document.getElementById(\"timeDate\").innerHTML = \"本站已各种夹缝中安全运行 \" + dnum + \" 天 \";\n    document.getElementById(\"times\").innerHTML = hnum + \" 小时 \" + mnum + \" 分 \" + snum + \" 秒\";\n}\nsetInterval(\"createtime()\", 250);"},{"_content":"window.onload = function() {\n\t//定义点击出现文字类\n\tfunction ClickFrontShow() {\n\t\t//定义所需文字和颜色\n\t\tthis.fron = ['高兴', '开心', '❤', '欢乐', '愉悦', '愉快', '快乐', '欢喜', '喜悦', '欢欣', '欢畅', '欢腾', '雀跃', '欢快'];\n\t\tthis.colo = ['#FF69B4', '#ff6651', 'orange', '#FF00FF', '#00FF7F', '#00BFFF', '#BA55D3'];\n\t\t//获取body元素\n\t\tthis.elBody = document.getElementsByTagName(\"body\")[0];\n\t\t//初始化randomNum\n\t\tthis.randomNum = null;\n\t\t//初始化字体inde\n\t\tthis.finde = 0;\n\t\t//初始化className\n\t\tthis.cls = 0;\n\t}\n\t\n\t//定义初始化\n\tClickFrontShow.prototype.init = function(frontArray, colorArray) {\n\t\t//自定义颜色和字体\n\t\tthis.fron = frontArray || this.fron;\n\t\tthis.colo = colorArray || this.colo;\n\t\t\n\t\tthis.listenMouse();\n\t}\n\t\n\t//创建文字 \n\tClickFrontShow.prototype.createFront = function (classname) {\n\t\tvar self = this;\n\t\tlet ospan = document.createElement('span');\n\t\t//设置样式\n\t\tlet cssText = \"position:absolute; width: 40px; height: 20px; cursor: default; transform: translate(-50%,-50%); font-weight: bold; opacity: 1; z-index: 1000; transition: 1s;\";\n\t\t//随机字体和颜色\n\t\tlet randomFront = self.fron[self.finde];\n\t\tlet randomColor = self.colo[Math.round(Math.random()*(self.colo.length-1))];\n\t\t//字体下标增1\n\t\tself.finde = (self.finde+1) % self.fron.length;\n\t\t//向body中添加元素\n\t\tself.elBody.appendChild(ospan);\n\t\t//绑定一个classname\n\t\tospan.className = String(classname);\n\t\t//添加样式\n\t\tospan.style.cssText = cssText + \"-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;user-select: none;\"\n\t\tospan.style.color = randomColor;\n\t\tospan.innerHTML = randomFront;\n\t}\n\t\n\t\n\t//监听鼠标点击\n\tClickFrontShow.prototype.listenMouse = function() {\n\t\tvar self = this;\n\n\t\t//鼠标点击事件\n\t\tdocument.onclick = function(e) {\n\t\t\t//避免classname值重复导致出现bug\n\t\t\tif(self.cls === 20){\n\t\t\t\tself.cls = 0;\n\t\t\t}else{\n\t\t\t\tself.cls += 1;\n\t\t\t}\n\t\t\t//创建文字\n\t\t\tself.createFront(self.cls);\n\t\t\tlet el = document.getElementsByClassName(self.cls)[0];\n\t\t\t\n\t\t\t//鼠标点击位置\n\t\t\tel.style.left = e.clientX + 'px';\n\t\t\tel.style.top = e.clientY + 'px';\n\t\t\t\n\t\t\t//过时改变\n\t\t\tsetTimeout(function() {\n\t\t\t\tel.style.opacity = 0;\n\t\t\t\tel.style.top = el.offsetTop - 100 + 'px';\n\t\t\t}, 100);\n\t\t\t//过时清除\n\t\t\tsetTimeout(function() {\n\t\t\t\tself.elBody.removeChild(el);\n\t\t\t}, 2000);\n\t\t}\n\t\t\n\t}\n\t\n\t//实例化\n\tvar frontShow = new ClickFrontShow();\n\t//用户可在此传递参数，默认第一个参数是字体数组；\n\t//第二个参数是颜色数组，必须是数组类型！\n\tfrontShow.init();\n }\n","source":"js/words.js","raw":"window.onload = function() {\n\t//定义点击出现文字类\n\tfunction ClickFrontShow() {\n\t\t//定义所需文字和颜色\n\t\tthis.fron = ['高兴', '开心', '❤', '欢乐', '愉悦', '愉快', '快乐', '欢喜', '喜悦', '欢欣', '欢畅', '欢腾', '雀跃', '欢快'];\n\t\tthis.colo = ['#FF69B4', '#ff6651', 'orange', '#FF00FF', '#00FF7F', '#00BFFF', '#BA55D3'];\n\t\t//获取body元素\n\t\tthis.elBody = document.getElementsByTagName(\"body\")[0];\n\t\t//初始化randomNum\n\t\tthis.randomNum = null;\n\t\t//初始化字体inde\n\t\tthis.finde = 0;\n\t\t//初始化className\n\t\tthis.cls = 0;\n\t}\n\t\n\t//定义初始化\n\tClickFrontShow.prototype.init = function(frontArray, colorArray) {\n\t\t//自定义颜色和字体\n\t\tthis.fron = frontArray || this.fron;\n\t\tthis.colo = colorArray || this.colo;\n\t\t\n\t\tthis.listenMouse();\n\t}\n\t\n\t//创建文字 \n\tClickFrontShow.prototype.createFront = function (classname) {\n\t\tvar self = this;\n\t\tlet ospan = document.createElement('span');\n\t\t//设置样式\n\t\tlet cssText = \"position:absolute; width: 40px; height: 20px; cursor: default; transform: translate(-50%,-50%); font-weight: bold; opacity: 1; z-index: 1000; transition: 1s;\";\n\t\t//随机字体和颜色\n\t\tlet randomFront = self.fron[self.finde];\n\t\tlet randomColor = self.colo[Math.round(Math.random()*(self.colo.length-1))];\n\t\t//字体下标增1\n\t\tself.finde = (self.finde+1) % self.fron.length;\n\t\t//向body中添加元素\n\t\tself.elBody.appendChild(ospan);\n\t\t//绑定一个classname\n\t\tospan.className = String(classname);\n\t\t//添加样式\n\t\tospan.style.cssText = cssText + \"-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;user-select: none;\"\n\t\tospan.style.color = randomColor;\n\t\tospan.innerHTML = randomFront;\n\t}\n\t\n\t\n\t//监听鼠标点击\n\tClickFrontShow.prototype.listenMouse = function() {\n\t\tvar self = this;\n\n\t\t//鼠标点击事件\n\t\tdocument.onclick = function(e) {\n\t\t\t//避免classname值重复导致出现bug\n\t\t\tif(self.cls === 20){\n\t\t\t\tself.cls = 0;\n\t\t\t}else{\n\t\t\t\tself.cls += 1;\n\t\t\t}\n\t\t\t//创建文字\n\t\t\tself.createFront(self.cls);\n\t\t\tlet el = document.getElementsByClassName(self.cls)[0];\n\t\t\t\n\t\t\t//鼠标点击位置\n\t\t\tel.style.left = e.clientX + 'px';\n\t\t\tel.style.top = e.clientY + 'px';\n\t\t\t\n\t\t\t//过时改变\n\t\t\tsetTimeout(function() {\n\t\t\t\tel.style.opacity = 0;\n\t\t\t\tel.style.top = el.offsetTop - 100 + 'px';\n\t\t\t}, 100);\n\t\t\t//过时清除\n\t\t\tsetTimeout(function() {\n\t\t\t\tself.elBody.removeChild(el);\n\t\t\t}, 2000);\n\t\t}\n\t\t\n\t}\n\t\n\t//实例化\n\tvar frontShow = new ClickFrontShow();\n\t//用户可在此传递参数，默认第一个参数是字体数组；\n\t//第二个参数是颜色数组，必须是数组类型！\n\tfrontShow.init();\n }\n","date":"2023-03-01T07:54:24.998Z","updated":"2022-08-20T09:18:38.186Z","path":"js/words.js","layout":"false","title":"","comments":1,"_id":"clgdh3tvj000dccvz95hcezta","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>window.onload = function() {\n\t//定义点击出现文字类\n\tfunction ClickFrontShow() {\n\t\t//定义所需文字和颜色\n\t\tthis.fron = ['高兴', '开心', '❤', '欢乐', '愉悦', '愉快', '快乐', '欢喜', '喜悦', '欢欣', '欢畅', '欢腾', '雀跃', '欢快'];\n\t\tthis.colo = ['#FF69B4', '#ff6651', 'orange', '#FF00FF', '#00FF7F', '#00BFFF', '#BA55D3'];\n\t\t//获取body元素\n\t\tthis.elBody = document.getElementsByTagName(\"body\")[0];\n\t\t//初始化randomNum\n\t\tthis.randomNum = null;\n\t\t//初始化字体inde\n\t\tthis.finde = 0;\n\t\t//初始化className\n\t\tthis.cls = 0;\n\t}\n\t\n\t//定义初始化\n\tClickFrontShow.prototype.init = function(frontArray, colorArray) {\n\t\t//自定义颜色和字体\n\t\tthis.fron = frontArray || this.fron;\n\t\tthis.colo = colorArray || this.colo;\n\t\t\n\t\tthis.listenMouse();\n\t}\n\t\n\t//创建文字 \n\tClickFrontShow.prototype.createFront = function (classname) {\n\t\tvar self = this;\n\t\tlet ospan = document.createElement('span');\n\t\t//设置样式\n\t\tlet cssText = \"position:absolute; width: 40px; height: 20px; cursor: default; transform: translate(-50%,-50%); font-weight: bold; opacity: 1; z-index: 1000; transition: 1s;\";\n\t\t//随机字体和颜色\n\t\tlet randomFront = self.fron[self.finde];\n\t\tlet randomColor = self.colo[Math.round(Math.random()*(self.colo.length-1))];\n\t\t//字体下标增1\n\t\tself.finde = (self.finde+1) % self.fron.length;\n\t\t//向body中添加元素\n\t\tself.elBody.appendChild(ospan);\n\t\t//绑定一个classname\n\t\tospan.className = String(classname);\n\t\t//添加样式\n\t\tospan.style.cssText = cssText + \"-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;user-select: none;\"\n\t\tospan.style.color = randomColor;\n\t\tospan.innerHTML = randomFront;\n\t}\n\t\n\t\n\t//监听鼠标点击\n\tClickFrontShow.prototype.listenMouse = function() {\n\t\tvar self = this;\n\n\t\t//鼠标点击事件\n\t\tdocument.onclick = function(e) {\n\t\t\t//避免classname值重复导致出现bug\n\t\t\tif(self.cls === 20){\n\t\t\t\tself.cls = 0;\n\t\t\t}else{\n\t\t\t\tself.cls += 1;\n\t\t\t}\n\t\t\t//创建文字\n\t\t\tself.createFront(self.cls);\n\t\t\tlet el = document.getElementsByClassName(self.cls)[0];\n\t\t\t\n\t\t\t//鼠标点击位置\n\t\t\tel.style.left = e.clientX + 'px';\n\t\t\tel.style.top = e.clientY + 'px';\n\t\t\t\n\t\t\t//过时改变\n\t\t\tsetTimeout(function() {\n\t\t\t\tel.style.opacity = 0;\n\t\t\t\tel.style.top = el.offsetTop - 100 + 'px';\n\t\t\t}, 100);\n\t\t\t//过时清除\n\t\t\tsetTimeout(function() {\n\t\t\t\tself.elBody.removeChild(el);\n\t\t\t}, 2000);\n\t\t}\n\t\t\n\t}\n\t\n\t//实例化\n\tvar frontShow = new ClickFrontShow();\n\t//用户可在此传递参数，默认第一个参数是字体数组；\n\t//第二个参数是颜色数组，必须是数组类型！\n\tfrontShow.init();\n }\n","site":{"data":{}},"wordcount":1846,"excerpt":"","more":"window.onload = function() {\n\t//定义点击出现文字类\n\tfunction ClickFrontShow() {\n\t\t//定义所需文字和颜色\n\t\tthis.fron = ['高兴', '开心', '❤', '欢乐', '愉悦', '愉快', '快乐', '欢喜', '喜悦', '欢欣', '欢畅', '欢腾', '雀跃', '欢快'];\n\t\tthis.colo = ['#FF69B4', '#ff6651', 'orange', '#FF00FF', '#00FF7F', '#00BFFF', '#BA55D3'];\n\t\t//获取body元素\n\t\tthis.elBody = document.getElementsByTagName(\"body\")[0];\n\t\t//初始化randomNum\n\t\tthis.randomNum = null;\n\t\t//初始化字体inde\n\t\tthis.finde = 0;\n\t\t//初始化className\n\t\tthis.cls = 0;\n\t}\n\t\n\t//定义初始化\n\tClickFrontShow.prototype.init = function(frontArray, colorArray) {\n\t\t//自定义颜色和字体\n\t\tthis.fron = frontArray || this.fron;\n\t\tthis.colo = colorArray || this.colo;\n\t\t\n\t\tthis.listenMouse();\n\t}\n\t\n\t//创建文字 \n\tClickFrontShow.prototype.createFront = function (classname) {\n\t\tvar self = this;\n\t\tlet ospan = document.createElement('span');\n\t\t//设置样式\n\t\tlet cssText = \"position:absolute; width: 40px; height: 20px; cursor: default; transform: translate(-50%,-50%); font-weight: bold; opacity: 1; z-index: 1000; transition: 1s;\";\n\t\t//随机字体和颜色\n\t\tlet randomFront = self.fron[self.finde];\n\t\tlet randomColor = self.colo[Math.round(Math.random()*(self.colo.length-1))];\n\t\t//字体下标增1\n\t\tself.finde = (self.finde+1) % self.fron.length;\n\t\t//向body中添加元素\n\t\tself.elBody.appendChild(ospan);\n\t\t//绑定一个classname\n\t\tospan.className = String(classname);\n\t\t//添加样式\n\t\tospan.style.cssText = cssText + \"-moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;user-select: none;\"\n\t\tospan.style.color = randomColor;\n\t\tospan.innerHTML = randomFront;\n\t}\n\t\n\t\n\t//监听鼠标点击\n\tClickFrontShow.prototype.listenMouse = function() {\n\t\tvar self = this;\n\n\t\t//鼠标点击事件\n\t\tdocument.onclick = function(e) {\n\t\t\t//避免classname值重复导致出现bug\n\t\t\tif(self.cls === 20){\n\t\t\t\tself.cls = 0;\n\t\t\t}else{\n\t\t\t\tself.cls += 1;\n\t\t\t}\n\t\t\t//创建文字\n\t\t\tself.createFront(self.cls);\n\t\t\tlet el = document.getElementsByClassName(self.cls)[0];\n\t\t\t\n\t\t\t//鼠标点击位置\n\t\t\tel.style.left = e.clientX + 'px';\n\t\t\tel.style.top = e.clientY + 'px';\n\t\t\t\n\t\t\t//过时改变\n\t\t\tsetTimeout(function() {\n\t\t\t\tel.style.opacity = 0;\n\t\t\t\tel.style.top = el.offsetTop - 100 + 'px';\n\t\t\t}, 100);\n\t\t\t//过时清除\n\t\t\tsetTimeout(function() {\n\t\t\t\tself.elBody.removeChild(el);\n\t\t\t}, 2000);\n\t\t}\n\t\t\n\t}\n\t\n\t//实例化\n\tvar frontShow = new ClickFrontShow();\n\t//用户可在此传递参数，默认第一个参数是字体数组；\n\t//第二个参数是颜色数组，必须是数组类型！\n\tfrontShow.init();\n }\n"},{"title":"音乐","date":"2022-08-25T05:29:15.000Z","_content":"\n<!-- <center>  \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=600 height=450 src=\"//music.163.com/outchain/player?type=0&id=974387610&auto=1&height=430\"></iframe>\n</center> -->\n\n\n\n#### ❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加 ~❤\n\n\n<link rel=\"stylesheet\" href=\"/dist/APlayer.min.css\">\n  <div id=\"aplayer\"></div>\n  <script type=\"text/javascript\" src=\"/dist/APlayer.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/music.js\"></script>\n\n\n<!-- <iframe src=\"https://www.jsdaima.com/Uploads/js/201804/1523085687/index.html\" height=\"500\" frameborder=\"no\" border=\"0\" width=\"100%\"> </iframe> -->\n","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2022-08-25 13:29:15\n---\n\n<!-- <center>  \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=600 height=450 src=\"//music.163.com/outchain/player?type=0&id=974387610&auto=1&height=430\"></iframe>\n</center> -->\n\n\n\n#### ❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加 ~❤\n\n\n<link rel=\"stylesheet\" href=\"/dist/APlayer.min.css\">\n  <div id=\"aplayer\"></div>\n  <script type=\"text/javascript\" src=\"/dist/APlayer.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/music.js\"></script>\n\n\n<!-- <iframe src=\"https://www.jsdaima.com/Uploads/js/201804/1523085687/index.html\" height=\"500\" frameborder=\"no\" border=\"0\" width=\"100%\"> </iframe> -->\n","updated":"2022-08-30T16:03:02.677Z","path":"music/index.html","comments":1,"layout":"page","_id":"clgdh3tvk000hccvz0yj8a1u2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><!-- <center>  \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=600 height=450 src=\"//music.163.com/outchain/player?type=0&id=974387610&auto=1&height=430\"></iframe>\n</center> -->\n\n\n\n<h4 id=\"❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加-❤\"><a href=\"#❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加-❤\" class=\"headerlink\" title=\"❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加 ~❤\"></a>❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加 ~❤</h4><link rel=\"stylesheet\" href=\"/dist/APlayer.min.css\">\n  <div id=\"aplayer\"></div>\n  <script type=\"text/javascript\" src=\"/dist/APlayer.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/music.js\"></script>\n\n\n<!-- <iframe src=\"https://www.jsdaima.com/Uploads/js/201804/1523085687/index.html\" height=\"500\" frameborder=\"no\" border=\"0\" width=\"100%\"> </iframe> -->\n","site":{"data":{}},"wordcount":36,"excerpt":"","more":"<!-- <center>  \n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=600 height=450 src=\"//music.163.com/outchain/player?type=0&id=974387610&auto=1&height=430\"></iframe>\n</center> -->\n\n\n\n<h4 id=\"❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加-❤\"><a href=\"#❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加-❤\" class=\"headerlink\" title=\"❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加 ~❤\"></a>❤这里是音乐界面，分享我喜欢的音乐，如果你有所推荐的音乐，联系我添加 ~❤</h4><link rel=\"stylesheet\" href=\"/dist/APlayer.min.css\">\n  <div id=\"aplayer\"></div>\n  <script type=\"text/javascript\" src=\"/dist/APlayer.min.js\"></script>\n<script type=\"text/javascript\" src=\"/js/music.js\"></script>\n\n\n<!-- <iframe src=\"https://www.jsdaima.com/Uploads/js/201804/1523085687/index.html\" height=\"500\" frameborder=\"no\" border=\"0\" width=\"100%\"> </iframe> -->\n"}],"Post":[{"title":"浅学JavaScript","index_img":"/img/article/JavaScript.png","date":"2022-10-18T14:22:22.000Z","_content":"# JavaScript\n\n快速入门笔记（只能说是浅浅的学了一点！）\n\n文档建议使用   [w3school](https://www.w3school.com.cn/)\n\n\n\n------\n\n## 1、什么是JavaScript?\n\n### 1.1、概述\n\nJavaScript是一门世界上最流行的脚本语言\n\nJavaScript一门弱类型脚本语言，其源代码在发往客户端运行之前不需要编译，而是将文本格式的字符代码发送给浏览器由浏览器解释运行。\n\n### 1.2、历史\n\n[ECMAScript](https://so.csdn.net/so/search?q=ECMAScript&spm=1001.2101.3001.7020)：可以理解为JavaScript的一个标准\n\nNative原生JS开发\n原生JS开发，也就是让我们按照【ECMAScript】标准的开发方式，简称是ES，特点是所有浏览器都支持，ES标准已发布如下版本：\nES3\nES4（内部，未正式发布）\nES5（全浏览器支持）\nES6（常用，当前主流版本：webpack打包成为ES5支持）\nES7\nES8\nES9\n\n### 1.3 大前端开发\n\n#### 1.3.1 TypeScript 微软的标准\n\nTypeScript 是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。\n该语言的特点就是除了具备ES的特征之外还纳入了许多不在标准范围内的新特性，所以会导致很多浏览器不能直接支持。TypeScript语法，需要编译后（编译成js文件）才能被浏览器正确执行。\n\n#### 1.3.2 JavaScript库\n\njQuery：\n优点是简化了DOM操作，缺点是DOM操作太频繁，影响前台性能。在前端眼里使用它仅仅是为了兼容IE6、7、8。\n\n#### 1.3.3 JavaScript框架\n\n**Angular：**\nGoogle收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了模块化开发的理念，与微软合作，采用TypeScript语法开发，对后台程序员友好，对前端程序员不友好，缺点是版本迭代不合理（1代->2代，除了名字相同，基本就是两个东西）。\n**React：**\nFacebook出品，一款高性能能的JS前端框架，特点是提出了新概念【虚拟DOM】用于减少真实DOM操作，在内存中模拟DOM操作，有效的提升了前端渲染效率，缺点是使用复杂，因为需要额外学习一门【JSX】语言。\n**Vue：**\n一款渐进式Javascript框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点。\n**Axios：**\n前端通信框架，因为Vue的边界很明确，即使为了处理DOM，所以并不具备通信能能力，因此就需要额外使用一个通信框架与服务器交互，当然也可以直接使用jQuery提供的AJAX通信功能。\n\n#### 1.3.4 UI框架\n\n**Ant-Design：**阿里巴巴出品，基于React的UI框架。\n**ElementUI、iview、ice：**饿了么出品，基于Vue的UI框架。\n**Bootstrap：** Twitter推出的一个用于前端开发的工具包。\n**AmazeUI：** 一款HTML5跨屏前端框架。\n\n#### 1.3.5 Javascript构建工具\n\n**Babel：** js编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript。\n**WebPack：** 模块打包工具，主要作用是打包、压缩、合并以及按序加载。\n\n#### 1.3.6 后端技术\n\n前端人员为了方便开发也需要掌握一定的后端技术，但Java后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，出现了Node.JS**（JavaScript的运行环境）**这样的技术。\nNode.JS的作者已经生成放弃Node.JS（说是架构做的不好在加上笨重的node_modules），开始开发全新架构的Deno。\n既然是后台技术，那肯定也需要框架和项目管理工具，Node.JS框架及项目管理工具如下：\n**Express：** NodeJS框架\n**Koa：** Express简化版\n**NPM：** 项目综合管理工具，类似于Maven\n**YARN：** NPM的代提方案，类似于Maven和Gradle的关系\n\n\n\n------\n\n## 2、快速入门\n\n### 2.1 引入JavaScript\n\n#### 2.1.1内部标签\n\n**script位置**\n可以放在head标签内或body\n\n```html\n<!-- 弹窗输出hello word -->\n<script>\n\talert('hello word');\n</script>\n```\n\n#### 2.1.2外部引入\n\n**问题**：外部引用一定要写全，不要写这样\n\n```html\n<!-- 弹窗输出hello word -->\n<script src=\"js/sw.js\"></script>\n<!-- 当前类型，不用显示定义也可以 -->\n<script type=\"text/javascript\">\n```\n\n### 2.2浏览器调试\n\n在浏览器按F12进入开发中模式，选择控制台可以写JavaScript观察输出，并且有调试功能。\n浏览器控制台打印：console.log();\n\n调试器：可以打断点，一行一行执行，观看代码运行情况。\n\n### 2.3严格模式\n\njs自己检查代码是否书写正确\n\n```html\n// 必须写在第一行\n'use strict'\n// 定义变量可以用var 或 let 最好使用let\nlet a = 9;\n// let a = 9;（局部变量） a = 9（全局变量）\nconsole.log(a);\n```\n\n\n\n------\n\n## 3、数据类型\n\n### 3.1、字符串\n\n1、正常字符我们使用 单引号，或者双引号\n\n2、转义字符 \\\n\n```\n\\'\n\\n\n\\t\n\\u4e2d \\u#### Unicode字符\n\n\\x41          Ascll字符\n```\n\n3、多行字符串编写\n\n```javascript\n// tab 上面 esc 键下面\nvar msg = `\n\thello\nworld\n你好ya\n你好\n`\n```\n\n4、模板字符串\n\n```javascript\nlet name = \"shiwei\";\nlet age = 3;\n\nlet msg = `你好呀，${name}`\n```\n\n5、字符串长度\n\n```javascript\nstr.length\n```\n\n6、字符串的可变性，不可变\n\n7、大小写转换\n\n```javascript\n// 注意，这里是方法，不是属性了\nstudent.toUpperCase() // 变为大写\nstudent.toLowerCase() // 变为小写\n```\n\n8、student.indexOf('t') 获取指定字符串的下标\n\n9、substring\n\n```javascript\n[)\n student.substring(1) // 从第一个字符串截取到最后一个字符串\n student.substring(1, 3) // [1, 3)\n```\n\n\n\n### 3.2 、数组\n\n**Array（数组）可以包含任意的数据类型**\n\neg：\n\n```javascript\nvar a = [1, 2, 3, \"1\", 'shiwei', \"石玮\", null, undefined]\n```\n\n\n\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6] // 通过下标取值和赋值\narr[0]\narr[0] = 1\n```\n\n1、长度\n\n```javascript\narr.length\n```\n\n注意 :  加入给arr.length 赋值，数组的大小就会发生改变，如果赋值过小，元素就会丢失，如果数据超过长度，也不会报错，会显示undefined，是JavaScript特有的\n\n2、indexof()，通过元素获得下标索引\n\n```javascript\narr.indexof(2)\n1\n```\n\n字符串的额\"1\" 和数字的 1 是不同的\n\n+ == （判断数值相等，类型可以不相同，不建议使用，属于是js的缺陷）\n+ === （判断数值和类型相同，和java相同，建议使用）\n\n**3、slice()**   截取Array的一部分，返回一个新数组，类似String中的substring\n\n**4、push()、pop() 尾部**\n\n```javascript\narr.push()  // 压入到尾部\narr.pop()   // 弹出尾部的一个元素\n```\n\n**5、unshift()、shift() 头部**\n\n```javascript\narr.unshift('a', 'b') // 压入头部，返回数组的长度\narr.shifit() // 弹出头部的一个元素，返回弹出的元素\n```\n\n6、排序 sort()\n\n```javascript\narr = [\"B\",\"C\",\"A\"]\narr.sort()\narr = [\"A\",\"B\",\"C\"]\n```\n\n7、元素反转 reverse()\n\n```javascript\narr = [\"A\",\"B\",\"C\"]\narr.sort()\narr = [\"C\",\"B\",\"A\"]\n```\n\n**8、concat () 拼接**\n\n```javascript\narr = [\"C\",\"B\",\"A\"]\narr.concat([1, 2, 3])\narr = [\"C\",\"B\",\"A\",1,2,3]\n```\n\n注意: concat () 并没有修改数组. 只是返回一个新的数组\n\n9、连接符 join\n\n打印拼接数组，使用特定的字符换拼接\n\n```javascript\n(3) ['B', 'C', 'A']\narr.join('-')\n> 'B-C-A'\n```\n\n10、多维数组\n\n```javascript\narr = [[1,2], [3,4],[\"5\",\"6\"]];\narr[1][1]\n> 4\n```\n\n11、还有简单的一些\n\n ```javascript\n// fill 填充\narr.fill(1)\n> [1, 1, 1]\n// find 查找 （不是一个方法）\n// arr.find(作为函数提供)\n ```\n\n\n\n数组：存储数据（如何存，如何取，方法都可以自己实现！）\n\n### 3.3、对象\n\n1. JavaScript 中的**所有事物**都是对象：字符串、数字、数组、日期，等等。\n2. 在 JavaScript 中，对象是拥有**属性**和**方法**的数据。\n\n若干个赋值对\n\n```javascript\nvar 对象名 = {\n    属性名:属性值,\n    属性名:属性值,\n    属性名:属性值\n}\n\n// 定义了一个person对象，它有四个属性！\nvar person = {\n    name: \"shiwei\",\n    age: 18,\n    email: \"1828045443@qq.com\",\n    score: 0\n}\n```\n\nJs中对象，{.....} 表示一个对象，键值对描述属性 xxxx: xxxx，多个属性之间使用逗号隔开，最后一个属性不加逗号！\n\nJavaScript中的所有的键都是字符串，值是任意对象！\n\n1、对象赋值\n\n```javascript\nperson.name = \"shiwei\"\n> \"shiwei\"\nperson.name\n> \"shiwei\"\n```\n\n2、使用一个不存在的对象属性，不会报错！undefined\n\n```javascript\nperson.haha\n> undefined\n```\n\n3、动态的删减属性\n\n```javascript\ndelete person.name\n> true\nperson\n> {age: 18, email: \"1828045443@qq.com\", score: 0}\n```\n\n4、动态的添加，直接给新的属性添加值即可\n\n```javascript\nperson.haha = \"haha\"\n> \"haha\"\nperson\n> {age: 18, email: \"1828045443@qq.com\", score: 0, haha: \"haha\"}\n```\n\n5、判断属性值是否在这个对象中！ xxx in xxx!\n\n```javascript\n'age' in person\n> true\n// 继承\n'tostring' in person\n> true\n```\n\n6、判断一个属性是否是这个对象自身拥有的  *hasOwnProperty()*\n\n```javascript\nperson.hasOwnProperty('tostring')\n> false\nperson.hasOwnProperty('age')\n> true\n```\n\n### 3.4、流程控制\n\nif 判断\n\n循环  for   while    do while \n\n```javascript\nfor (let i = 0; i < 100 ; i ++ ) {\n    console.log(i);\n}\n```\n\nforEach 循环\n\n```javascript\nvar age = [12, 3, 12, 3, 4, 4, 5, 6, 18, 66]\n\n// 函数\nage.forEach(function(value) {\n    console.log(value);\n})\n```\n\nfor ... in     (索引值 key)  for (var index in object) {} \n\nfor ... of     (具体的值 value)（也可以打印map和set的值）\n\n### 3.5、Map和Set\n\n> ES6 的新特性\n\nMap:\n\nMap 和python里的字典一样\n\n```javascript\n// ES6 Map\n// 学生的成绩，学生的名字\n\nvar map = new Map(['tom', 100], ['jack', 90], ['haha', 80]);\nvar name = map.get('tom'); // 通过key获取value\nmap.set('admin', 123456); // 新增或修改\nmap.delete(\"tom\"); // 删除\n```\n\nSet: 无序不重复的集合\n\n```javascript\nvar set = new Set([3, 1, 1, 1, 1]); //  set可以去重\nset.add(2); // 添加！\nset.delete(1); // 删除！\nconsole.log(set.has(3)); // 是否包含某个元素！\n```\n\n### 3.6、iterator(迭代器)\n\n> ES6 的新特性\n\n遍历数组\n\n```javascript\n// 通过for of / for in 下标\nvar arr = [3, 4, 5]\nfor (var x of arr) {\n    console.log(x);\n}\n```\n\n遍历map\n\n```javascript\nvar map = new Map([[\"tom\",100],[\"jack\",90],[\"haha\",80]]);\nfor (let x of map) {\n \tconsole.log(x);\n}\n```\n\n遍历set\n\n```javascript\nvar set = new Set([5, 6, 7]);\nfor (let x of set) {\n    console.log(x);\n}\n```\n\n\n\n------\n\n## 4、函数\n\n方法：对象（属性，方法）（把函数放到对象里面就成了方法）\n\n方法（method）: 当将**函数**和**对象**合写在一起时，函数就变成了 “方法”（method）// 当函数赋值给对象的属性，我们称为\"方法\"\n\n函数：\n\n函数（function）: 函数是带有名称（named）和参数的JavaScript代码段，可以一次定义多次调用\n\n>  函数和方法本质上是一样的，只不过方法是函数的特例，是将**函数**值赋给了**对象**，只是放到的位置不同。\n\n[javascript中函数和方法的区别](https://blog.csdn.net/qq_44163269/article/details/104627274)\n\n### 4.1、定义函数\n\n> 定义方式一\n\n绝对值函数\n\n```javascript\nfunction abs(x) {\n    if (x >= 0) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n```\n\n一旦执行到  return  代表函数结束，返回结果！\n\n如果没有执行  return  , 函数执行完也会返回结果，结果就是 undefined\n\n\n\n> 定义方式二\n\n```javascript\n// 匿名函数，匿名内部类\nvar abs = function(x) {\n    if (x >= 0) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n```\n\n定义方式一和定义方式二等价！\n\n参数问题：JavaScript可以传任意个参数，也可以不传参数\n\n参数进来是否存在的问题：\n\n假设参数不存在，如何规避？\n\n```javascript\nvar abs = function(x) {\n  //手动抛出异常来判断\n    if(typeof x !== 'number'){\n        throw 'Not a Number';\n    }\n    if(x >= 0) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n```\n\n`arguments `是一个js免费赠送的关键字\n\n`arguments `： 代表传递进来的所有参数，是一个数组\n\n```javascript\nvar abs = function(x) {\n    \n    console.log(\"x=>\" + x);\n    for (var i = 0; i < arguments.length ; i ++ ) {\n        console.log(arguments[i]);\n    }\n\n    if(x >= 0) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n```\n\n\n问题：arguments包含所有参数，我们有时想使用多余的参数来进行附加操作，需要排除已有的参数\n\n`rest` : 获取没有使用的参数，从前往后没有使用的参数（前面的按顺序是使用的参数，后面全部都是不使用的参数）\n\nbefore:\n\n```javascript\nfunction shiwei(a, b) {\n    console.log(\"a=>\" + a);\n    console.log(\"b=>\" + b);\n    if(arguments.length > 2) {\n        for (let i = 0; i < arguments.length ; i ++ ) {\n            // 。。。。。。。\n        }\n    }\n}\n```\n\nnow：\n\n```javascript\nfunction shiwei(a,b,...rest){\n      console.log(\"a=>\" + a);\n      console.log(\"b=>\" + b);\n      console.log(rest);\n  }\n \n// rest 只能写在后面，必须用...标识\n/*\neg:\nshiwei(1, 2, 3, 4, 5, 6, 7, 8, 9)\n> a=> 1\n> b=> 2\n> [3, 4, 5, 6, 7, 8, 9]\n*/\n/*\neg:\nshiwei(1)\n> a=> 1\n> b=> undefined\n> []\n*/\n```\n\n### 4.2 、变量的作用域\n\n在JavaScript中，var 定义变量实际是有作用域的， 一般认为var是全局变量，let是局部变量\n\n+ 假设在函数体中声明，则在函数体外不可以使用，（非要想用的话，之后可以研究**闭包**）\n\n```javascript\nfunction qj() {\n      var x = 1;\n      x = x + 1;\n  }\n    x = x + 2; //Uncaught ReferenceError: x is not defined\n```\n\n+ 如果两个函数使用了相同的变量名，只要在函数内部，就不冲突\n\n+ 内部函数可以访问外部函数，反之则不行\n\n```javascript\nfunction qj() {\n    var x = 1;\n\n    // 内部函数可以访问外部函数，反之则不行\n    function qj2() {\n        var y = x + 1;  // 2\n    }\n\n    var z = y + 1;  // Uncaught ReferenceError: z is not defined\n}\n```\n\n假设，内部函数变量和外部函数的变量，重名\n\n```javascript\nfunction qj() {\n  var x = 1;\n   \n  function qj2() {\n    var x = 'A';\n    console.log('inner' + x); //outer1\n  }\n  console.log('outer' + x); //innerA\n  qj2()\n  \n}\n\nqj()\n```\n\n假设在JavaScript中函数查找变量从自身函数开始，由“内”向“外” 查找，假设外部存在这个同名的函数变量，则在内部函数会屏蔽外部函数的变量。`提升变量的作用域`\n\n```javascript\nfunction qj() {\n  var x = \"x\" + y;\n  console.log(x);\n  var y = 'y';\n}\n\n//结果： y undefined\n```\n\n说明:JS执行引擎，自动提升了y的声明，但是不会提升变量y的赋值（这不是废话嘛？）\n\n```javascript\nfunction qj2() {\n  var y；\n  var x = \"x\" + y;\n  console.log(x);\n  y = 'y';\n}\n```\n\n这个是在JavaScript建立之初就存在的特性。养成**规范**：所有变量定义都在函数的头部，不要乱放，便于代码维护（也是废话！）\n\n```javascript\nfunction qj2(){\n  var x = 1；\n  y = x + 1;\n  z, i, a;  // undefined\n}\n```\n\n全局函数\n\n**默认所有的全局变量，都会自动绑定在window对象下**\n\nJavaScript实际上只有一个全局作用域，任何变量(函数也可以视为变量)，假设没有任何函数作用范围内找到，就会向外查找，如果在全局作用域都没有找到，报错**RefrenceError**\n\n由于我们所有的全局变量都会绑定到我们的window上，如果不同的js文件，使用了相同的全局变量，冲突。 —如何减少冲突？\n\n>  把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名的冲突的问题。jQuery可以解决。\n\n>  ES6 let 关键字，解决局部作用域冲突问题\n>\n>  常量 const\n\n\n\n### 4.3、方法\n\n>  方法：对象（属性，方法）（把函数放到对象里面就成了方法）\n\n方法就是把函数放在对象的里面，对象只有两个东西：属性 和 方法\n\n```javascript\nvar shi = {\n    name　: 'shiwei',\n    birth : 2002,\n    //方法\n    age : function () {\n        //今年 - 出生年\n        var now = new Date().getFullYear();\n        return now - this.birth;\n    }\n}\n\n//属性\nshi.name\n//方法\nshi.age()\n\n```\n\nthis. 代表什么？拆开上面的代码看看\n\n```javascript\nfunction getAge() {\n    var now = new Date().getFullYear();\n    return now - this.birth;\n}\n\nvar shi = {\n    name　: 'shiwei',\n    birth : 2002,\n    age : getAge\n}\n\n// shi.age()     ok\n// getAge()      NaN   window\n// 直接调用getAge表示调用window的这个方法,但是window没有\n```\n\nthis 是无法指向的， 是默认指向调用它的那个对象\n\n\n\n> apply\n\n可以指定  this 的作用对象（一种调用方法的方法 ）\n\n```javascript\nfunction getAge(){\n        let now = new Date().getFullYear();\n        return now - this.birth;\n    }\n    let shi = {\n        name: \"石玮\",\n        birth: 2002,\n        age: getAge\n    };\n    let xiaoming = {\n        name: \"小明\",\n        birth: 2010,\n        age: getAge\n    };\n\n \tgetAge.apply(shi, []); // this, 指向了 shi 这个对象，参数为空\n    //getAge.apply(EASON, []);\n    console.log(getAge.apply(shi,[]));\n    console.log(getAge.apply(xiaoming,[]));\n```\n\n```javascript\n20\n12\n```\n\n\n\n---\n\n\n## 5、内部对象\n\n> 标准对象\n\nJavaScript 中的**所有事物**都是对象：字符串、数字、数组、日期，等等。\n\n### 5.1、Date\n\n```javascript\n// 基本使用\nnow.getFullYear(); // 年\nnow.getMonth(); // 月 0~11 没有12月\nnow.getDate(); // 日\nnow.getDay(); // 星期几\nnow.getHours(); // 时\nnow.getMinutes(); // 分\nnow.getSeconds(); // 秒\n// 使用js获取时间一般使用时间戳，因为其它是可以更改的\nnow.getTime(); // 时间戳（1970年1月1日按时区到现在的毫秒值）\n// 转化时间格式\nnow.toLocaleString();\n//返回值：\"2022/6/2 21:33:10\" \n```\n\n\n\n### 5.2、JSON\n\n> json 是什么\n\n早期，所有数据传输习惯使用 XML 文件！\n\n+ JSON（JavaScript Object Notation, JS 对象简谱）是一种轻量级的数据交换格式。\n+ 简洁和清晰的层次结构使得JSON成为理想的数据交换语言。\n+ 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。\n\n在JavaScript一切皆为对象、任何 js 支持的类型都可以用 JSON 来表示；\n\n格式：\n\n+ 对象都用 {}\n+ 数组都用 []\n+ 所有的键值对都是用 key : value\n\nJSON 字符串和 JS 对象的转化\n\n```javascript\nvar user = {\n    name : \"shiwei\",\n    age : 3,\n    sex : '男'\n  }\n  \n  //对象转化为json字符串--->{\"name\":\"shiwei\",\"age\":3,\"sex\":\"男\"}\n  var jsonUser = JSON.stringify(user)\n  \n  //json 字符串转化为对象  参数为 json 字符串\n  var obj = JSON.parse('\"name\":\"shiwei\",\"age\":3,\"sex\":\"男\"')\n\n```\n\nJSON 和 JS 对象的区别\n\n```javascript\nvar obj = {a:'hello', b:'hi'};\nvar json = '{\"a\":\"hello\", \"b\":\"hi\"}' // json 是个字符串（本质就是一堆字符串解析）\n```\n\n### 5.3、Ajax\n\n+ 原生的 js 写法    xhr 异步请求\n+ jQuery封装好的 方法 $(\"#name\").ajax(\"\")\n+ axios 请求\n\n\n\n------\n\n## 6、面向对象编程\n\n> #### 原型对象\n\njavaScript 、Java、c# 。。。。面向对象；javaScript有些区别！\n\n+ 类：模板\n+ 对象：具体的实例\n\n在 JavaScript 这个需要大家换一下思维方式！\n\n原型：\n\n```javascript\nvar Student = {\n    name: \"a\",\n    age: 3,\n    run: function() {\n        console.log(this.name +\"run\")\n    }\n};\nvar xiaoming = {\n    name:xiaoming\n};\n\nxiaoming._proto_ = Student;\n// 小明的原型是Student,可以使用Student中的run方法\n// 简单说就是小明继承了它爹Student\n\nvar Bird = {\n    fly: function() {\n        console.log(this.name + \"fly....\");\n    }\n};\n\n// 小明的原型是 Bird\nxiaoming.__proto__ = Bird;\n```\n\n> #### class 继承\n\nclass 关键字，是在  ES6  引入的\n\n1、定义一个类，属性，方法\n\n```javascript\n//定义一个学生类\nclass Student {\n\n    constructor(name) {\n        this.name = name;\n    }\n\n    hello() {\n        alert('hello')\n    }\n   \n}\nvar xiaoming = new Student(\"xiaoming\");\nvar xiaohong = new Student(\"xiaohong\");\nxiaoming.hello()\n\n```\n\n2、继承\n\n```javascript\nclass Student {\n\n    constructor(name) {\n        this.name = name;\n    }\n\n    hello() {\n        alert('hello')\n    }\n    \n}\nclass xiaoStudent extends Student {\n    \n    constructor(name, grade) {\n        super(name);\n        this.grade = grade;\n    }\n\n    myGrade() {\n        alert('我是小学生')\n    }\n    \n}\n\nvar xiaoming = new Student(\"xiaoming\");\nvar xiaohong = new xiaoStudent(\"xiaohong\", 1);\nxiaoming.hello()\n// xiaohong 的原型对象（他爹）是Student\n```\n\n> #### 原型链\n>\n> #### [博客圆---javascript——原型与原型链](https://www.cnblogs.com/loveyaxin/p/11151586.html)\n\n简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》\n\n**在查找属性的时候查到 Object.prototype 就可以停止查找了，所以就不会无线查找，不会一直循环了。**\n\n![原型链](https://img2018.cnblogs.com/blog/850375/201907/850375-20190708153139577-2105652554.png)\n\n\n\n------\n\n## 7、操作BOM对象(重点)\n\nBOM：浏览器对象模型\n\n> 浏览器介绍\n\nJavaScript 和 浏览器关系？\n\nJavaScript诞生就是为了能够让他在浏览器中运行\n\nBOM：浏览器对象模型（内核）\n\n+ IE 6–11\n+ Chrome\n+ Safari\n+ Firefox\n+ Opera\n\n> window (重要)\n\nwindow 代表浏览器窗口\n\n```javascript\nwindow.alert(1)\nundefined\nwindow.outerHeight  // 外部\n995\nwindow.outerWidth\n1018\nwindow.innerHeight  // 内部\n444\nwindow.innerWidth\n1003\n```\n\n\n\n> Navigator  （不建议使用）\n\nnavigator, 封装了浏览器的信息\n\n大写Navigator是类，小写`navigator`是对象\n\n```javascript\nnavigator.appName    // 名字\n'Netscape'\nnavigator.appVersion // 版本号\n'5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36'\nnavigator.userAgent  // 用户浏览信息\n'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36'\nnavigator.platform   // 运行浏览器的操作系统和（或）硬件平台\n'Win32'\n```\n\n大多数时候，我们不会使用`navogator`对象，因为会被人为修改，不建议使用这些属性来判断和编写代码\n\n> screen \n\n代表计算机屏幕尺寸\n\n```javascript\nscreen.width\n2048 \n// 2048 px\nscreen.height\n1152\n// 1152 px\n```\n\n> location (重要)\n\nlocation 代表当前页面的URL信息\n\n```javascript\n//location 的一些属性\nhost: \"www.baidu.com\"\nhostname: \"www.baidu.com\"\nhref: \"https://www.baidu.com/\"\nprotocol: \"https:\"\nreload: ƒ reload() //刷新网页\n\n//设置新地址\nlocation.assign(\"https://app2004.acapp.acwing.com.cn/user/account/login/\")\n```\n\n\n\n> document (内容 DOM， 文档对象模型)\n\ndocument 代表当前的页面，HTML DOM文档树\n\n```javascript\ndocument.title\n'百度一下，你就知道'\ndocument.title = \"努力挣钱和吃饭，要不然就不被xh\"  // 自定义title，也就是导航栏的内容\n'努力挣钱和吃饭，要不然就不被xh'\n```\n\n**获取具体的文档树节点**\n\n```html\n<dl id=\"app\">\n    <dt>Java</dt>\n    <dd>JavaSE</dd>\n    <dd>JavaEE</dd>\n</dl>\n\n<script>\n    var dl = document.getElementById('app')\n</script>\n```\n\n\n\n>  获取cookie（客户端的本地信息）\n\n不安全，会被劫持\n\n```html\n<script src=\"aa.js\"></script>\n<!--恶意人员：获取你的cookie上传到他的服务器-->\n```\n\n服务器端可以设置 cookie: httpOnly       (只读，不能修改)\n\n```javascript\ndocument.cookie\n```\n\n```\n> 'BIDUPSID=B8683E2A9F4C1F3886911F077A0A1102; PSTM=1641251220; BAIDUID=B8683E2A9F4C1F38C871142E273C7207:SL=0:NR=10:FG=1; BD_UPN=12314753; H_PS_PSSID=37545_36549_37352_34812_37486_36807_37404_36786_37536_37498_26350_37446; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; BAIDUID_BFESS=B8683E2A9F4C1F38C871142E273C7207:SL=0:NR=10:FG=1; COOKIE_SESSION=3405_0_9_9_21_10_1_0_9_8_6_5_3906678_0_0_0_1665840096_0_1665843476%7C9%232539_5_1661438898%7C2; delPer=0; BD_CK_SAM=1; PSINO=3; BA_HECTOR=0520al2g8lak8kal018hfbi01hklg8v1b; ZFY=R0v3mV:A3kLPM6oCMd:BJTo:AI7QCqLLzIgO:AI2tY0ITn8:C; H_PS_645EC=b8fb%2B7%2BrcoNJDZr2BnHdidyAlYZ0SNLLncRf%2BB45PZnt59SFK6fbf98nhvQ; BD_HOME=1'\n```\n\n劫持cookie原理\n\n```html\n<script src=\"a.js\"></script>\n<!--恶意人员： 获取你的cookie上传到他的服务器上-->\n```\n\n服务器端可以设置cookie:httpOnly\n\n\n\n> history (不建议使用)\n\nhistory 代表浏览器的历史纪录\n\n```javascript\nhistory.back() // 返回\nhistory.forward() // 前进\n```\n\n\n\n------\n\n## 8、操作DOM对象(重点)\n\nDOM：文档对象模型（一颗文档树 -- 将嵌套关系看成树形结构）。\n\n> 核心\n\n浏览器网页就是一个Dom树形结构\n\n+ 更新：更新Dom节点\n\n+ 遍历Dom节点：得到Dom节点\n+ 删除：删除一个Dom节点\n+ 添加：添加一个新的节点\n\n要制作一个Dom节点，就必须要先获得这个Dom节点\n\n> 获得Dom节点\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\n\t</head>\n\t<body>\n\t\t<div id=\"father\">\n\t\t\t<h1>标题一</h1>\n\t\t\t<p id=\"p1\">p1</p>\n\t\t\t<p class=\"p2\">p2</p>\n\t\t</div>\n\n\t\t<script type=\"text/javascript\">\n\t\t\t'use strict'\n\t\t\t// 对应css选择器\n\t\t\t// 标签选择器\n\t\t\tvar h1 = document.getElementsByTagName('h1');\n\t\t\t// ID选择器\n\t\t\tvar p1 = document.getElementById('p1');\n\t\t\t// 类选择器\n\t\t\tvar p2 = document.getElementsByClassName('p2');\n\t\t\t// ID选择器\n\t\t\tvar father = document.getElementById('father');\n\t\t\t// 获取父节点下所有子节点属性\n\t\t\tvar childrens = father.children;\n            // var childrens = father.children[index]; index 可打印出来\n\t\t\t// 获取第一个节点\n\t\t\tp1.firstChild;\n\t\t\t// 获取最后一个节点\n\t\t\tp1.lastChild;\n\t\t</script>\n\t</body>\n</html>\n```\n\n这是原生代码，之后尽量使用jQuery()；\n\n> 更新节点\n\n```html\n<div id=\"id1\">\n\n</div>\n\n<script>\n    var id1 = document.getElementById('id1')\n</script>\n```\n\n> 操作文本（动态操作页面样式）\n\n```html\n// ID选择器\nvar p1 = document.getElementById('p1');\n// 向p1更新值\np1.innerText = 'xhxhxhxhxhmyl';  // 更新内容\n// 向p1更新html\np1.innerHTML = <strong>123</strong>;  // 可以解析HTML文本\n```\n\n> 操作 JS\n\n```javascript\n// 设置字体颜色\np1.style.color = 'yellow'; // 属性使用 字符串 包裹\n// 设置字体大小\np1.style.fontSize = '50px';  // - 转 驼峰命名问题\n// 设置内边距\np1.style.padding = '2em'; // 盒子模型，内边距\n```\n\n> 删除节点\n\n**删除节点的步骤**：先获取父节点，再通过父节点删除自己\n\n```html\n<div id=\"father\">\n    <h1>标题一</h1>\n    <p id=\"p1\">p1</p>\n    <p class=\"p2\">p2</p>\n</div>\n<script>\n    var self = document.getElementsById('p1')\n    var father = p1.parentElement;\n    father.removeChild(self)\n    \n    // 删除是一个动态的过程\n    father.removeChild(father.children[0])\n    father.removeChild(father.children[1])\n    father.removeChild(father.children[2])\n</script>\n```\n\n注意：删除多个节点时，children是在时刻变化的（类似于vector，会动态变短），删除节点的时候一定要注意\n\n> 插入节点\n\n我们获得了某个Dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素，但是这个Dom节点已经存在元素了，我们就不能这么做，因为会覆盖。\n\n一般通过追加操作。\n\n追加（已存在）\n\n```html\n// 将 id = \"js\" 移到（追加）到 list 里面 （因为存在id js，所以是移动）\n<P id=\"js\">JavaScript</P>\n<div id=\"list\">\n    <p id=\"se\">JavaSE</p>\n    <p id=\"ee\">JavaEE</p>\n    <p id=\"me\">JavaME</p>\n</div>\n\n<script>\n    var js = document.getElementById('js'); // 已存在的节点\n    var list = document.getElementById('list');\n    list.appendChild(js); //追加到后面\n</script>\n```\n\n创建一个新的标签，实现插入（任何位置都可以）\n\n```html\n<script>\n    var js = document.getElementById('js');//已经存在的节点\n    var list = document.getElementById('list');\n    //通过JS创建一个新节点\n    var newP = document.createElement('p')//创建一个p标签\n    newP.id = 'newP';\n    newP.innerText = 'Hello,shiwei'\n    // 创建一个新的标签，并插入\n    // list.appendChild(newp); // 这里可在页面内写\n    // 创建一个新标签节点\n    var myScript = document.createElement('script');\n    myScript.setAttribute('type','text/javascript')\n    // list.appendChild(myScript);  // 这里可在页面内写\n    // 可以创建一个 Style 标签\n    var myStyle = document.createElement('style');// 可以创建一个空Style标签\n    myStyle.setAttribute('type','text/css');\n    myStyle.innerHTML = 'body{background-color:chartreuse}';// 设置标签内容\n    // 将创建的标签放到 head 里面 [0] 是类似于编号\n    document.getElementsByTagName('head')[0].appendChild(myStyle)\n    \n\t// 总结 就是 js 可以干 html 和 css 的所有事情\n</script>\n```\n\n插入指定位置（insertBefore）\n\n```javascript\nvar ee = document.getElementById('ee');\nvar js = document.getElementById('js');\nvar list = document.getElementById('list');\n\n//要包含的节点,insertBefore(newNode,targetNode)\nlist.insertBefore(js,ee);\n```\n\n\n\n------\n\n## 9、操作表单 (验证)\n\n> 表单是什么 ？  form  DOM树\n\n+ 文本框 text\n+ 下拉框 select\n+ 单选框 radio\n+ 多选框 checkbox\n+ 隐藏域 hidden\n+ 密码框 password\n\n>  表单的目的：提交信息\n\n获得要提交的信息\n\n```html\n<form action=\"post\">\n\n  <p>\n      <span>用户名：</span> <input type=\"text\" id=\"username\">\n  </p>\n  <!--多选框的值，就是定义好的value-->\n  <p>\n      <span>性别：</span>\n      <input type=\"radio\" name=\"gender\" value=\"man\" id=\"boy\">男\n      <input type=\"radio\" name=\"gender\" value=\"woman\" id=\"girl\">女\n  </p>\n\n</form>\n\n<script>\n  var input_text = document.getElementById('username');\n  \n  var boy_radio = document.getElementById('boy');\n  var girl_radio = document.getElementById('girl');\n  \n  // 得到输入框的值\n  // input_text.value\n  // 修改输入框的值\n  input_text.value = '123'\n  \n  // 对于单选框，多选框等固定的值，boy_radio.value只能取到当前的值，不能确定是否被选\n  boy_radio.checked;// 查看返回的结果，是否为true，如果为true，则被选中。\n  girl_radio.checked = true;// 赋值\n  \n</script>\n```\n\n> 提交表单 ，md5加密密码 表单优化 （我记得 y总 的 jwt 也可以加密 + 验证，比较主流）\n\n### 9.1 按钮绑定\n\n```html\n<head>\n\t<meta charset=\"utf-8\">\n\t<title></title>\n    <!-- md5的工具类 -->\n\t<script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script>\n</head>\n<body>\n\t<form id=\"form1\"  action=\"#\" method=\"POST\">\n\t\t<p>\n\t\t\t<span>用户名：</span><input type=\"text\" id=\"username\" name=\"username\"><br>\n\t\t\t<span>密码：</span><input type=\"password\" id=\"input_password\">\n\t\t\t<input type=\"hidden\" id=\"md5_password\" name=\"password\">\n\t\t</p>\n\t\t<!-- 按钮绑定事件 当被点击触发事件-->\n\t\t<button type=\"submit\" onclick=\"f()\">提交</button>\n\t</form>\n\t<script type=\"text/javascript\">\n\t\t'use strict'\n\t\tfunction validate() {\n\t        if(confirm(\"是否提交\")){\n\t            return true;\n\t        }else{\n\t            return false;\n\t        }\n        }\n\t\tfunction f() {\n\t\t\tvar uname = document.getElementById('username');\n\t\t\tvar input_pwd = document.getElementById('input_password');\n\t\t\tvar pwd = document.getElementById('md5_password');\n\t\t\t// md5算法加密\n\t\t\tpwd.value = md5(input_pwd.value);\n\t\t\tconsole.log(uname.value + '+' + pwd.value);\n\t\t\tif(validate()){\n            \tdocument.getElementById(\"form1\").submit();\n        \t}\n\t\t}\n\t</script>\n</body>\n```\n\n### 9.2 表单绑定\n\nmd5加密验证，表单优化（设置 hidden 类型）\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<!-- 表单绑定提交事件 -->\n\t\t<!-- onsubmit=绑定一个提交检测的函数， -->\n\t\t<!-- 将这个结果返回给表单，使用onsubmit接收 -->\n\t\t<form action=\"#\" method=\"POST\" onsubmit=\"return f()\">\n\t\t\t<p>\n\t\t\t\t<span>用户名：</span><input type=\"text\" id=\"username\" name=\"username\"><br>\n\t\t\t\t<span>密码：</span><input type=\"password\" id=\"input_password\">\n\t\t\t\t<!-- 使用隐藏域提交，这样密码框不会在提交一瞬间变长，直接是面试常考 -->\n\t\t\t\t<input type=\"hidden\" id=\"md5_password\" name=\"password\">\n\t\t\t</p>\n\t\t\t<!-- 绑定事件 当被点击触发事件-->\n\t\t\t<button type=\"submit\" >提交</button>\n\t\t</form>\n\n\t\t<script type=\"text/javascript\">\n\t\t\t'use strict'\n\n\t\t\tfunction f() {\n\t\t\t\tvar uname = document.getElementById('username');\n\t\t\t\tvar input_pwd = document.getElementById('input_password');\n\t\t\t\tvar pwd = document.getElementById('md5_password');\n\t\t\t\t// md5算法\n\t\t\t\tpwd.value = md5(input_pwd.value);\n\t\t\t\t// 提交到控制台\n\t\t\t\tconsole.log(uname.value + '+' + pwd.value);\n\t\t\t\t// 允许表单提交true，阻止表单提交false\n                // 可以自己校验判断表单内容\n\t\t\t\treturn true;\n\t\t\t}\n\t\t</script>\n\t</body>\n</html>\n```\n\n\n\n------\n\n## 10、jQuery\n\njQuery（write less, do more.）\n\njQuery库， 里面存在大量的JavaScript函数（说白了就是封装函数，直接调用，方便使用）\n\n> 获取jQuery\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <!--在线cdn-->\n    <script src=\"http://code.jquery.com/jquery-2.1.1.min.js\"></script>\n</head>\n<body>\n    <!-- 公式： $(selector).action -->\n    <a href=\"\" id=\"test-jquery\">点我</a>\n\n    <script>\n        // document.getElementById('id');\n        // 选择器就是css的选择器\n        $('#test-jquery').click(function (){\n            alert('hello,jquery');\n        })\n    </script>\n\n</body>\n</html>\n```\n\n注意:在线cdn\n\n> 选择器\n\n```html\n<script>\n    // 原生js，选择器少，麻烦\n    // 标签\n    document.getElementsByTagName();\n    // id\n    document.getElementById();\n    // 类\n    document.getElementsByClassName()\n\n    // jQuery  css中的选择器 它 都能用\n    $('p').click(); // 标签选择器\n    $('#id1').click(); // id选择器\n    $('.class').click(); // class选择器\n</script>\n```\n\n文档工具站  https://jquery.cuishifeng.cn/\n\n```javascript\n$(selector).action() // 常见用法\n```\n\n\n\n> 事件\n\n鼠标事件，键盘事件，其他事件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n\n    <style>\n        #divMove{\n            width:500px;\n            height:500px;\n            border:1px solid red;\n        }\n    </style>\n\n    <script src=\"http://code.jquery.com/jquery-2.1.1.min.js\"></script>\n</head>\n<body>\n<!--要求：获取鼠标当前的一个坐标-->\nmouse:<span id=\"mouseMove\"></span>\n<div id=\"divMove\">\n    在这里移动鼠标试试\n</div>\n\n<script>\n    // 当网页元素加载完毕之后响应事件\n    // $(document).ready(function () {\n    //\n    // })\n    // 其简写\n    $(function () {\n        $('#divMove').mousemove(function (e) {\n            $('#mouseMove').text('x:'+e.pageX + 'y:'+e.pageY)\n        })\n    });\n</script>\n\n</body>\n</html>\n```\n\n> 操作DOM\n\n**节点文本操作**\n\n```javascript\n// eg:\n$('#ID li[name=1]').text(); // 获取ID中名字为1的li标签的值\n$('#ID li[name=1]').text(123); // 设置ID中名字为1的li标签的值为123\n$('#ID').html('<strong>123</strong>');  // 设置值\n$('#ID li[name=1]').css(\"color\",\"red\");  // 设置CSS属性\n// eg:\n$('#test-ul li[name=python]').text(); // 设置值\n$('#test-ul li[name=python]').text('设置值'); // 设置值\n$('#test-ul').html(); // 获得值\n$('#test-ul').html('<strong>123</strong>'); // 设置值\n```\n\n**css操作**\n\n```javascript\n$('#test-ul li[name=python]').css(\"color\",\"red\");\n```\n\n**元素的显示和隐藏：**本质增加了属性 **display = none;**\n\n```javascript\n$('#test-ul li[name=python]').show()\n$('#test-ul li[name=python]').hide()\n```\n\n**娱乐测试**\n\n```javascript\n$(window).width()\n$(window).height()\n```\n\n\n\n> 小技巧\n\n1、如何巩固JS (看jQuery源码，看游戏源码)\n\n2、巩固HTML,CSS (扒网站)\n\n---\n\n## 一些问题\n\n### 箭头函数的this\n\n箭头函数会屏蔽 当前匿名函数 的 this,如果调用了this,则是调他的父级的this。\n\n> 下面的代码就是 调用了window的this\n\n```javascript\nwindow.birth = 2002;\n    let kuangshen = {\n        name: '石玮',\n        birth: 2002,\n        age:() => {\n            let now = new Date().getFullYear();\n            return now - this.birth;\n        }\n    };\n    console.log(kuangshen.age());\n```\n\n```javascript\n20\n```\n","source":"_posts/JavaScript.md","raw":"---\ntitle: 浅学JavaScript\ncategories:\n- 编程语言学习\ntags: [JavaScript, 编程语言学习, 学习]\nindex_img: /img/article/JavaScript.png\ndate: 2022-10-18 22:22:22\n\n---\n# JavaScript\n\n快速入门笔记（只能说是浅浅的学了一点！）\n\n文档建议使用   [w3school](https://www.w3school.com.cn/)\n\n\n\n------\n\n## 1、什么是JavaScript?\n\n### 1.1、概述\n\nJavaScript是一门世界上最流行的脚本语言\n\nJavaScript一门弱类型脚本语言，其源代码在发往客户端运行之前不需要编译，而是将文本格式的字符代码发送给浏览器由浏览器解释运行。\n\n### 1.2、历史\n\n[ECMAScript](https://so.csdn.net/so/search?q=ECMAScript&spm=1001.2101.3001.7020)：可以理解为JavaScript的一个标准\n\nNative原生JS开发\n原生JS开发，也就是让我们按照【ECMAScript】标准的开发方式，简称是ES，特点是所有浏览器都支持，ES标准已发布如下版本：\nES3\nES4（内部，未正式发布）\nES5（全浏览器支持）\nES6（常用，当前主流版本：webpack打包成为ES5支持）\nES7\nES8\nES9\n\n### 1.3 大前端开发\n\n#### 1.3.1 TypeScript 微软的标准\n\nTypeScript 是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。\n该语言的特点就是除了具备ES的特征之外还纳入了许多不在标准范围内的新特性，所以会导致很多浏览器不能直接支持。TypeScript语法，需要编译后（编译成js文件）才能被浏览器正确执行。\n\n#### 1.3.2 JavaScript库\n\njQuery：\n优点是简化了DOM操作，缺点是DOM操作太频繁，影响前台性能。在前端眼里使用它仅仅是为了兼容IE6、7、8。\n\n#### 1.3.3 JavaScript框架\n\n**Angular：**\nGoogle收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了模块化开发的理念，与微软合作，采用TypeScript语法开发，对后台程序员友好，对前端程序员不友好，缺点是版本迭代不合理（1代->2代，除了名字相同，基本就是两个东西）。\n**React：**\nFacebook出品，一款高性能能的JS前端框架，特点是提出了新概念【虚拟DOM】用于减少真实DOM操作，在内存中模拟DOM操作，有效的提升了前端渲染效率，缺点是使用复杂，因为需要额外学习一门【JSX】语言。\n**Vue：**\n一款渐进式Javascript框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点。\n**Axios：**\n前端通信框架，因为Vue的边界很明确，即使为了处理DOM，所以并不具备通信能能力，因此就需要额外使用一个通信框架与服务器交互，当然也可以直接使用jQuery提供的AJAX通信功能。\n\n#### 1.3.4 UI框架\n\n**Ant-Design：**阿里巴巴出品，基于React的UI框架。\n**ElementUI、iview、ice：**饿了么出品，基于Vue的UI框架。\n**Bootstrap：** Twitter推出的一个用于前端开发的工具包。\n**AmazeUI：** 一款HTML5跨屏前端框架。\n\n#### 1.3.5 Javascript构建工具\n\n**Babel：** js编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript。\n**WebPack：** 模块打包工具，主要作用是打包、压缩、合并以及按序加载。\n\n#### 1.3.6 后端技术\n\n前端人员为了方便开发也需要掌握一定的后端技术，但Java后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，出现了Node.JS**（JavaScript的运行环境）**这样的技术。\nNode.JS的作者已经生成放弃Node.JS（说是架构做的不好在加上笨重的node_modules），开始开发全新架构的Deno。\n既然是后台技术，那肯定也需要框架和项目管理工具，Node.JS框架及项目管理工具如下：\n**Express：** NodeJS框架\n**Koa：** Express简化版\n**NPM：** 项目综合管理工具，类似于Maven\n**YARN：** NPM的代提方案，类似于Maven和Gradle的关系\n\n\n\n------\n\n## 2、快速入门\n\n### 2.1 引入JavaScript\n\n#### 2.1.1内部标签\n\n**script位置**\n可以放在head标签内或body\n\n```html\n<!-- 弹窗输出hello word -->\n<script>\n\talert('hello word');\n</script>\n```\n\n#### 2.1.2外部引入\n\n**问题**：外部引用一定要写全，不要写这样\n\n```html\n<!-- 弹窗输出hello word -->\n<script src=\"js/sw.js\"></script>\n<!-- 当前类型，不用显示定义也可以 -->\n<script type=\"text/javascript\">\n```\n\n### 2.2浏览器调试\n\n在浏览器按F12进入开发中模式，选择控制台可以写JavaScript观察输出，并且有调试功能。\n浏览器控制台打印：console.log();\n\n调试器：可以打断点，一行一行执行，观看代码运行情况。\n\n### 2.3严格模式\n\njs自己检查代码是否书写正确\n\n```html\n// 必须写在第一行\n'use strict'\n// 定义变量可以用var 或 let 最好使用let\nlet a = 9;\n// let a = 9;（局部变量） a = 9（全局变量）\nconsole.log(a);\n```\n\n\n\n------\n\n## 3、数据类型\n\n### 3.1、字符串\n\n1、正常字符我们使用 单引号，或者双引号\n\n2、转义字符 \\\n\n```\n\\'\n\\n\n\\t\n\\u4e2d \\u#### Unicode字符\n\n\\x41          Ascll字符\n```\n\n3、多行字符串编写\n\n```javascript\n// tab 上面 esc 键下面\nvar msg = `\n\thello\nworld\n你好ya\n你好\n`\n```\n\n4、模板字符串\n\n```javascript\nlet name = \"shiwei\";\nlet age = 3;\n\nlet msg = `你好呀，${name}`\n```\n\n5、字符串长度\n\n```javascript\nstr.length\n```\n\n6、字符串的可变性，不可变\n\n7、大小写转换\n\n```javascript\n// 注意，这里是方法，不是属性了\nstudent.toUpperCase() // 变为大写\nstudent.toLowerCase() // 变为小写\n```\n\n8、student.indexOf('t') 获取指定字符串的下标\n\n9、substring\n\n```javascript\n[)\n student.substring(1) // 从第一个字符串截取到最后一个字符串\n student.substring(1, 3) // [1, 3)\n```\n\n\n\n### 3.2 、数组\n\n**Array（数组）可以包含任意的数据类型**\n\neg：\n\n```javascript\nvar a = [1, 2, 3, \"1\", 'shiwei', \"石玮\", null, undefined]\n```\n\n\n\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6] // 通过下标取值和赋值\narr[0]\narr[0] = 1\n```\n\n1、长度\n\n```javascript\narr.length\n```\n\n注意 :  加入给arr.length 赋值，数组的大小就会发生改变，如果赋值过小，元素就会丢失，如果数据超过长度，也不会报错，会显示undefined，是JavaScript特有的\n\n2、indexof()，通过元素获得下标索引\n\n```javascript\narr.indexof(2)\n1\n```\n\n字符串的额\"1\" 和数字的 1 是不同的\n\n+ == （判断数值相等，类型可以不相同，不建议使用，属于是js的缺陷）\n+ === （判断数值和类型相同，和java相同，建议使用）\n\n**3、slice()**   截取Array的一部分，返回一个新数组，类似String中的substring\n\n**4、push()、pop() 尾部**\n\n```javascript\narr.push()  // 压入到尾部\narr.pop()   // 弹出尾部的一个元素\n```\n\n**5、unshift()、shift() 头部**\n\n```javascript\narr.unshift('a', 'b') // 压入头部，返回数组的长度\narr.shifit() // 弹出头部的一个元素，返回弹出的元素\n```\n\n6、排序 sort()\n\n```javascript\narr = [\"B\",\"C\",\"A\"]\narr.sort()\narr = [\"A\",\"B\",\"C\"]\n```\n\n7、元素反转 reverse()\n\n```javascript\narr = [\"A\",\"B\",\"C\"]\narr.sort()\narr = [\"C\",\"B\",\"A\"]\n```\n\n**8、concat () 拼接**\n\n```javascript\narr = [\"C\",\"B\",\"A\"]\narr.concat([1, 2, 3])\narr = [\"C\",\"B\",\"A\",1,2,3]\n```\n\n注意: concat () 并没有修改数组. 只是返回一个新的数组\n\n9、连接符 join\n\n打印拼接数组，使用特定的字符换拼接\n\n```javascript\n(3) ['B', 'C', 'A']\narr.join('-')\n> 'B-C-A'\n```\n\n10、多维数组\n\n```javascript\narr = [[1,2], [3,4],[\"5\",\"6\"]];\narr[1][1]\n> 4\n```\n\n11、还有简单的一些\n\n ```javascript\n// fill 填充\narr.fill(1)\n> [1, 1, 1]\n// find 查找 （不是一个方法）\n// arr.find(作为函数提供)\n ```\n\n\n\n数组：存储数据（如何存，如何取，方法都可以自己实现！）\n\n### 3.3、对象\n\n1. JavaScript 中的**所有事物**都是对象：字符串、数字、数组、日期，等等。\n2. 在 JavaScript 中，对象是拥有**属性**和**方法**的数据。\n\n若干个赋值对\n\n```javascript\nvar 对象名 = {\n    属性名:属性值,\n    属性名:属性值,\n    属性名:属性值\n}\n\n// 定义了一个person对象，它有四个属性！\nvar person = {\n    name: \"shiwei\",\n    age: 18,\n    email: \"1828045443@qq.com\",\n    score: 0\n}\n```\n\nJs中对象，{.....} 表示一个对象，键值对描述属性 xxxx: xxxx，多个属性之间使用逗号隔开，最后一个属性不加逗号！\n\nJavaScript中的所有的键都是字符串，值是任意对象！\n\n1、对象赋值\n\n```javascript\nperson.name = \"shiwei\"\n> \"shiwei\"\nperson.name\n> \"shiwei\"\n```\n\n2、使用一个不存在的对象属性，不会报错！undefined\n\n```javascript\nperson.haha\n> undefined\n```\n\n3、动态的删减属性\n\n```javascript\ndelete person.name\n> true\nperson\n> {age: 18, email: \"1828045443@qq.com\", score: 0}\n```\n\n4、动态的添加，直接给新的属性添加值即可\n\n```javascript\nperson.haha = \"haha\"\n> \"haha\"\nperson\n> {age: 18, email: \"1828045443@qq.com\", score: 0, haha: \"haha\"}\n```\n\n5、判断属性值是否在这个对象中！ xxx in xxx!\n\n```javascript\n'age' in person\n> true\n// 继承\n'tostring' in person\n> true\n```\n\n6、判断一个属性是否是这个对象自身拥有的  *hasOwnProperty()*\n\n```javascript\nperson.hasOwnProperty('tostring')\n> false\nperson.hasOwnProperty('age')\n> true\n```\n\n### 3.4、流程控制\n\nif 判断\n\n循环  for   while    do while \n\n```javascript\nfor (let i = 0; i < 100 ; i ++ ) {\n    console.log(i);\n}\n```\n\nforEach 循环\n\n```javascript\nvar age = [12, 3, 12, 3, 4, 4, 5, 6, 18, 66]\n\n// 函数\nage.forEach(function(value) {\n    console.log(value);\n})\n```\n\nfor ... in     (索引值 key)  for (var index in object) {} \n\nfor ... of     (具体的值 value)（也可以打印map和set的值）\n\n### 3.5、Map和Set\n\n> ES6 的新特性\n\nMap:\n\nMap 和python里的字典一样\n\n```javascript\n// ES6 Map\n// 学生的成绩，学生的名字\n\nvar map = new Map(['tom', 100], ['jack', 90], ['haha', 80]);\nvar name = map.get('tom'); // 通过key获取value\nmap.set('admin', 123456); // 新增或修改\nmap.delete(\"tom\"); // 删除\n```\n\nSet: 无序不重复的集合\n\n```javascript\nvar set = new Set([3, 1, 1, 1, 1]); //  set可以去重\nset.add(2); // 添加！\nset.delete(1); // 删除！\nconsole.log(set.has(3)); // 是否包含某个元素！\n```\n\n### 3.6、iterator(迭代器)\n\n> ES6 的新特性\n\n遍历数组\n\n```javascript\n// 通过for of / for in 下标\nvar arr = [3, 4, 5]\nfor (var x of arr) {\n    console.log(x);\n}\n```\n\n遍历map\n\n```javascript\nvar map = new Map([[\"tom\",100],[\"jack\",90],[\"haha\",80]]);\nfor (let x of map) {\n \tconsole.log(x);\n}\n```\n\n遍历set\n\n```javascript\nvar set = new Set([5, 6, 7]);\nfor (let x of set) {\n    console.log(x);\n}\n```\n\n\n\n------\n\n## 4、函数\n\n方法：对象（属性，方法）（把函数放到对象里面就成了方法）\n\n方法（method）: 当将**函数**和**对象**合写在一起时，函数就变成了 “方法”（method）// 当函数赋值给对象的属性，我们称为\"方法\"\n\n函数：\n\n函数（function）: 函数是带有名称（named）和参数的JavaScript代码段，可以一次定义多次调用\n\n>  函数和方法本质上是一样的，只不过方法是函数的特例，是将**函数**值赋给了**对象**，只是放到的位置不同。\n\n[javascript中函数和方法的区别](https://blog.csdn.net/qq_44163269/article/details/104627274)\n\n### 4.1、定义函数\n\n> 定义方式一\n\n绝对值函数\n\n```javascript\nfunction abs(x) {\n    if (x >= 0) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n```\n\n一旦执行到  return  代表函数结束，返回结果！\n\n如果没有执行  return  , 函数执行完也会返回结果，结果就是 undefined\n\n\n\n> 定义方式二\n\n```javascript\n// 匿名函数，匿名内部类\nvar abs = function(x) {\n    if (x >= 0) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n```\n\n定义方式一和定义方式二等价！\n\n参数问题：JavaScript可以传任意个参数，也可以不传参数\n\n参数进来是否存在的问题：\n\n假设参数不存在，如何规避？\n\n```javascript\nvar abs = function(x) {\n  //手动抛出异常来判断\n    if(typeof x !== 'number'){\n        throw 'Not a Number';\n    }\n    if(x >= 0) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n```\n\n`arguments `是一个js免费赠送的关键字\n\n`arguments `： 代表传递进来的所有参数，是一个数组\n\n```javascript\nvar abs = function(x) {\n    \n    console.log(\"x=>\" + x);\n    for (var i = 0; i < arguments.length ; i ++ ) {\n        console.log(arguments[i]);\n    }\n\n    if(x >= 0) {\n        return x;\n    } else {\n        return -x;\n    }\n}\n```\n\n\n问题：arguments包含所有参数，我们有时想使用多余的参数来进行附加操作，需要排除已有的参数\n\n`rest` : 获取没有使用的参数，从前往后没有使用的参数（前面的按顺序是使用的参数，后面全部都是不使用的参数）\n\nbefore:\n\n```javascript\nfunction shiwei(a, b) {\n    console.log(\"a=>\" + a);\n    console.log(\"b=>\" + b);\n    if(arguments.length > 2) {\n        for (let i = 0; i < arguments.length ; i ++ ) {\n            // 。。。。。。。\n        }\n    }\n}\n```\n\nnow：\n\n```javascript\nfunction shiwei(a,b,...rest){\n      console.log(\"a=>\" + a);\n      console.log(\"b=>\" + b);\n      console.log(rest);\n  }\n \n// rest 只能写在后面，必须用...标识\n/*\neg:\nshiwei(1, 2, 3, 4, 5, 6, 7, 8, 9)\n> a=> 1\n> b=> 2\n> [3, 4, 5, 6, 7, 8, 9]\n*/\n/*\neg:\nshiwei(1)\n> a=> 1\n> b=> undefined\n> []\n*/\n```\n\n### 4.2 、变量的作用域\n\n在JavaScript中，var 定义变量实际是有作用域的， 一般认为var是全局变量，let是局部变量\n\n+ 假设在函数体中声明，则在函数体外不可以使用，（非要想用的话，之后可以研究**闭包**）\n\n```javascript\nfunction qj() {\n      var x = 1;\n      x = x + 1;\n  }\n    x = x + 2; //Uncaught ReferenceError: x is not defined\n```\n\n+ 如果两个函数使用了相同的变量名，只要在函数内部，就不冲突\n\n+ 内部函数可以访问外部函数，反之则不行\n\n```javascript\nfunction qj() {\n    var x = 1;\n\n    // 内部函数可以访问外部函数，反之则不行\n    function qj2() {\n        var y = x + 1;  // 2\n    }\n\n    var z = y + 1;  // Uncaught ReferenceError: z is not defined\n}\n```\n\n假设，内部函数变量和外部函数的变量，重名\n\n```javascript\nfunction qj() {\n  var x = 1;\n   \n  function qj2() {\n    var x = 'A';\n    console.log('inner' + x); //outer1\n  }\n  console.log('outer' + x); //innerA\n  qj2()\n  \n}\n\nqj()\n```\n\n假设在JavaScript中函数查找变量从自身函数开始，由“内”向“外” 查找，假设外部存在这个同名的函数变量，则在内部函数会屏蔽外部函数的变量。`提升变量的作用域`\n\n```javascript\nfunction qj() {\n  var x = \"x\" + y;\n  console.log(x);\n  var y = 'y';\n}\n\n//结果： y undefined\n```\n\n说明:JS执行引擎，自动提升了y的声明，但是不会提升变量y的赋值（这不是废话嘛？）\n\n```javascript\nfunction qj2() {\n  var y；\n  var x = \"x\" + y;\n  console.log(x);\n  y = 'y';\n}\n```\n\n这个是在JavaScript建立之初就存在的特性。养成**规范**：所有变量定义都在函数的头部，不要乱放，便于代码维护（也是废话！）\n\n```javascript\nfunction qj2(){\n  var x = 1；\n  y = x + 1;\n  z, i, a;  // undefined\n}\n```\n\n全局函数\n\n**默认所有的全局变量，都会自动绑定在window对象下**\n\nJavaScript实际上只有一个全局作用域，任何变量(函数也可以视为变量)，假设没有任何函数作用范围内找到，就会向外查找，如果在全局作用域都没有找到，报错**RefrenceError**\n\n由于我们所有的全局变量都会绑定到我们的window上，如果不同的js文件，使用了相同的全局变量，冲突。 —如何减少冲突？\n\n>  把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名的冲突的问题。jQuery可以解决。\n\n>  ES6 let 关键字，解决局部作用域冲突问题\n>\n>  常量 const\n\n\n\n### 4.3、方法\n\n>  方法：对象（属性，方法）（把函数放到对象里面就成了方法）\n\n方法就是把函数放在对象的里面，对象只有两个东西：属性 和 方法\n\n```javascript\nvar shi = {\n    name　: 'shiwei',\n    birth : 2002,\n    //方法\n    age : function () {\n        //今年 - 出生年\n        var now = new Date().getFullYear();\n        return now - this.birth;\n    }\n}\n\n//属性\nshi.name\n//方法\nshi.age()\n\n```\n\nthis. 代表什么？拆开上面的代码看看\n\n```javascript\nfunction getAge() {\n    var now = new Date().getFullYear();\n    return now - this.birth;\n}\n\nvar shi = {\n    name　: 'shiwei',\n    birth : 2002,\n    age : getAge\n}\n\n// shi.age()     ok\n// getAge()      NaN   window\n// 直接调用getAge表示调用window的这个方法,但是window没有\n```\n\nthis 是无法指向的， 是默认指向调用它的那个对象\n\n\n\n> apply\n\n可以指定  this 的作用对象（一种调用方法的方法 ）\n\n```javascript\nfunction getAge(){\n        let now = new Date().getFullYear();\n        return now - this.birth;\n    }\n    let shi = {\n        name: \"石玮\",\n        birth: 2002,\n        age: getAge\n    };\n    let xiaoming = {\n        name: \"小明\",\n        birth: 2010,\n        age: getAge\n    };\n\n \tgetAge.apply(shi, []); // this, 指向了 shi 这个对象，参数为空\n    //getAge.apply(EASON, []);\n    console.log(getAge.apply(shi,[]));\n    console.log(getAge.apply(xiaoming,[]));\n```\n\n```javascript\n20\n12\n```\n\n\n\n---\n\n\n## 5、内部对象\n\n> 标准对象\n\nJavaScript 中的**所有事物**都是对象：字符串、数字、数组、日期，等等。\n\n### 5.1、Date\n\n```javascript\n// 基本使用\nnow.getFullYear(); // 年\nnow.getMonth(); // 月 0~11 没有12月\nnow.getDate(); // 日\nnow.getDay(); // 星期几\nnow.getHours(); // 时\nnow.getMinutes(); // 分\nnow.getSeconds(); // 秒\n// 使用js获取时间一般使用时间戳，因为其它是可以更改的\nnow.getTime(); // 时间戳（1970年1月1日按时区到现在的毫秒值）\n// 转化时间格式\nnow.toLocaleString();\n//返回值：\"2022/6/2 21:33:10\" \n```\n\n\n\n### 5.2、JSON\n\n> json 是什么\n\n早期，所有数据传输习惯使用 XML 文件！\n\n+ JSON（JavaScript Object Notation, JS 对象简谱）是一种轻量级的数据交换格式。\n+ 简洁和清晰的层次结构使得JSON成为理想的数据交换语言。\n+ 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。\n\n在JavaScript一切皆为对象、任何 js 支持的类型都可以用 JSON 来表示；\n\n格式：\n\n+ 对象都用 {}\n+ 数组都用 []\n+ 所有的键值对都是用 key : value\n\nJSON 字符串和 JS 对象的转化\n\n```javascript\nvar user = {\n    name : \"shiwei\",\n    age : 3,\n    sex : '男'\n  }\n  \n  //对象转化为json字符串--->{\"name\":\"shiwei\",\"age\":3,\"sex\":\"男\"}\n  var jsonUser = JSON.stringify(user)\n  \n  //json 字符串转化为对象  参数为 json 字符串\n  var obj = JSON.parse('\"name\":\"shiwei\",\"age\":3,\"sex\":\"男\"')\n\n```\n\nJSON 和 JS 对象的区别\n\n```javascript\nvar obj = {a:'hello', b:'hi'};\nvar json = '{\"a\":\"hello\", \"b\":\"hi\"}' // json 是个字符串（本质就是一堆字符串解析）\n```\n\n### 5.3、Ajax\n\n+ 原生的 js 写法    xhr 异步请求\n+ jQuery封装好的 方法 $(\"#name\").ajax(\"\")\n+ axios 请求\n\n\n\n------\n\n## 6、面向对象编程\n\n> #### 原型对象\n\njavaScript 、Java、c# 。。。。面向对象；javaScript有些区别！\n\n+ 类：模板\n+ 对象：具体的实例\n\n在 JavaScript 这个需要大家换一下思维方式！\n\n原型：\n\n```javascript\nvar Student = {\n    name: \"a\",\n    age: 3,\n    run: function() {\n        console.log(this.name +\"run\")\n    }\n};\nvar xiaoming = {\n    name:xiaoming\n};\n\nxiaoming._proto_ = Student;\n// 小明的原型是Student,可以使用Student中的run方法\n// 简单说就是小明继承了它爹Student\n\nvar Bird = {\n    fly: function() {\n        console.log(this.name + \"fly....\");\n    }\n};\n\n// 小明的原型是 Bird\nxiaoming.__proto__ = Bird;\n```\n\n> #### class 继承\n\nclass 关键字，是在  ES6  引入的\n\n1、定义一个类，属性，方法\n\n```javascript\n//定义一个学生类\nclass Student {\n\n    constructor(name) {\n        this.name = name;\n    }\n\n    hello() {\n        alert('hello')\n    }\n   \n}\nvar xiaoming = new Student(\"xiaoming\");\nvar xiaohong = new Student(\"xiaohong\");\nxiaoming.hello()\n\n```\n\n2、继承\n\n```javascript\nclass Student {\n\n    constructor(name) {\n        this.name = name;\n    }\n\n    hello() {\n        alert('hello')\n    }\n    \n}\nclass xiaoStudent extends Student {\n    \n    constructor(name, grade) {\n        super(name);\n        this.grade = grade;\n    }\n\n    myGrade() {\n        alert('我是小学生')\n    }\n    \n}\n\nvar xiaoming = new Student(\"xiaoming\");\nvar xiaohong = new xiaoStudent(\"xiaohong\", 1);\nxiaoming.hello()\n// xiaohong 的原型对象（他爹）是Student\n```\n\n> #### 原型链\n>\n> #### [博客圆---javascript——原型与原型链](https://www.cnblogs.com/loveyaxin/p/11151586.html)\n\n简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》\n\n**在查找属性的时候查到 Object.prototype 就可以停止查找了，所以就不会无线查找，不会一直循环了。**\n\n![原型链](https://img2018.cnblogs.com/blog/850375/201907/850375-20190708153139577-2105652554.png)\n\n\n\n------\n\n## 7、操作BOM对象(重点)\n\nBOM：浏览器对象模型\n\n> 浏览器介绍\n\nJavaScript 和 浏览器关系？\n\nJavaScript诞生就是为了能够让他在浏览器中运行\n\nBOM：浏览器对象模型（内核）\n\n+ IE 6–11\n+ Chrome\n+ Safari\n+ Firefox\n+ Opera\n\n> window (重要)\n\nwindow 代表浏览器窗口\n\n```javascript\nwindow.alert(1)\nundefined\nwindow.outerHeight  // 外部\n995\nwindow.outerWidth\n1018\nwindow.innerHeight  // 内部\n444\nwindow.innerWidth\n1003\n```\n\n\n\n> Navigator  （不建议使用）\n\nnavigator, 封装了浏览器的信息\n\n大写Navigator是类，小写`navigator`是对象\n\n```javascript\nnavigator.appName    // 名字\n'Netscape'\nnavigator.appVersion // 版本号\n'5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36'\nnavigator.userAgent  // 用户浏览信息\n'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36'\nnavigator.platform   // 运行浏览器的操作系统和（或）硬件平台\n'Win32'\n```\n\n大多数时候，我们不会使用`navogator`对象，因为会被人为修改，不建议使用这些属性来判断和编写代码\n\n> screen \n\n代表计算机屏幕尺寸\n\n```javascript\nscreen.width\n2048 \n// 2048 px\nscreen.height\n1152\n// 1152 px\n```\n\n> location (重要)\n\nlocation 代表当前页面的URL信息\n\n```javascript\n//location 的一些属性\nhost: \"www.baidu.com\"\nhostname: \"www.baidu.com\"\nhref: \"https://www.baidu.com/\"\nprotocol: \"https:\"\nreload: ƒ reload() //刷新网页\n\n//设置新地址\nlocation.assign(\"https://app2004.acapp.acwing.com.cn/user/account/login/\")\n```\n\n\n\n> document (内容 DOM， 文档对象模型)\n\ndocument 代表当前的页面，HTML DOM文档树\n\n```javascript\ndocument.title\n'百度一下，你就知道'\ndocument.title = \"努力挣钱和吃饭，要不然就不被xh\"  // 自定义title，也就是导航栏的内容\n'努力挣钱和吃饭，要不然就不被xh'\n```\n\n**获取具体的文档树节点**\n\n```html\n<dl id=\"app\">\n    <dt>Java</dt>\n    <dd>JavaSE</dd>\n    <dd>JavaEE</dd>\n</dl>\n\n<script>\n    var dl = document.getElementById('app')\n</script>\n```\n\n\n\n>  获取cookie（客户端的本地信息）\n\n不安全，会被劫持\n\n```html\n<script src=\"aa.js\"></script>\n<!--恶意人员：获取你的cookie上传到他的服务器-->\n```\n\n服务器端可以设置 cookie: httpOnly       (只读，不能修改)\n\n```javascript\ndocument.cookie\n```\n\n```\n> 'BIDUPSID=B8683E2A9F4C1F3886911F077A0A1102; PSTM=1641251220; BAIDUID=B8683E2A9F4C1F38C871142E273C7207:SL=0:NR=10:FG=1; BD_UPN=12314753; H_PS_PSSID=37545_36549_37352_34812_37486_36807_37404_36786_37536_37498_26350_37446; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; BAIDUID_BFESS=B8683E2A9F4C1F38C871142E273C7207:SL=0:NR=10:FG=1; COOKIE_SESSION=3405_0_9_9_21_10_1_0_9_8_6_5_3906678_0_0_0_1665840096_0_1665843476%7C9%232539_5_1661438898%7C2; delPer=0; BD_CK_SAM=1; PSINO=3; BA_HECTOR=0520al2g8lak8kal018hfbi01hklg8v1b; ZFY=R0v3mV:A3kLPM6oCMd:BJTo:AI7QCqLLzIgO:AI2tY0ITn8:C; H_PS_645EC=b8fb%2B7%2BrcoNJDZr2BnHdidyAlYZ0SNLLncRf%2BB45PZnt59SFK6fbf98nhvQ; BD_HOME=1'\n```\n\n劫持cookie原理\n\n```html\n<script src=\"a.js\"></script>\n<!--恶意人员： 获取你的cookie上传到他的服务器上-->\n```\n\n服务器端可以设置cookie:httpOnly\n\n\n\n> history (不建议使用)\n\nhistory 代表浏览器的历史纪录\n\n```javascript\nhistory.back() // 返回\nhistory.forward() // 前进\n```\n\n\n\n------\n\n## 8、操作DOM对象(重点)\n\nDOM：文档对象模型（一颗文档树 -- 将嵌套关系看成树形结构）。\n\n> 核心\n\n浏览器网页就是一个Dom树形结构\n\n+ 更新：更新Dom节点\n\n+ 遍历Dom节点：得到Dom节点\n+ 删除：删除一个Dom节点\n+ 添加：添加一个新的节点\n\n要制作一个Dom节点，就必须要先获得这个Dom节点\n\n> 获得Dom节点\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\n\t</head>\n\t<body>\n\t\t<div id=\"father\">\n\t\t\t<h1>标题一</h1>\n\t\t\t<p id=\"p1\">p1</p>\n\t\t\t<p class=\"p2\">p2</p>\n\t\t</div>\n\n\t\t<script type=\"text/javascript\">\n\t\t\t'use strict'\n\t\t\t// 对应css选择器\n\t\t\t// 标签选择器\n\t\t\tvar h1 = document.getElementsByTagName('h1');\n\t\t\t// ID选择器\n\t\t\tvar p1 = document.getElementById('p1');\n\t\t\t// 类选择器\n\t\t\tvar p2 = document.getElementsByClassName('p2');\n\t\t\t// ID选择器\n\t\t\tvar father = document.getElementById('father');\n\t\t\t// 获取父节点下所有子节点属性\n\t\t\tvar childrens = father.children;\n            // var childrens = father.children[index]; index 可打印出来\n\t\t\t// 获取第一个节点\n\t\t\tp1.firstChild;\n\t\t\t// 获取最后一个节点\n\t\t\tp1.lastChild;\n\t\t</script>\n\t</body>\n</html>\n```\n\n这是原生代码，之后尽量使用jQuery()；\n\n> 更新节点\n\n```html\n<div id=\"id1\">\n\n</div>\n\n<script>\n    var id1 = document.getElementById('id1')\n</script>\n```\n\n> 操作文本（动态操作页面样式）\n\n```html\n// ID选择器\nvar p1 = document.getElementById('p1');\n// 向p1更新值\np1.innerText = 'xhxhxhxhxhmyl';  // 更新内容\n// 向p1更新html\np1.innerHTML = <strong>123</strong>;  // 可以解析HTML文本\n```\n\n> 操作 JS\n\n```javascript\n// 设置字体颜色\np1.style.color = 'yellow'; // 属性使用 字符串 包裹\n// 设置字体大小\np1.style.fontSize = '50px';  // - 转 驼峰命名问题\n// 设置内边距\np1.style.padding = '2em'; // 盒子模型，内边距\n```\n\n> 删除节点\n\n**删除节点的步骤**：先获取父节点，再通过父节点删除自己\n\n```html\n<div id=\"father\">\n    <h1>标题一</h1>\n    <p id=\"p1\">p1</p>\n    <p class=\"p2\">p2</p>\n</div>\n<script>\n    var self = document.getElementsById('p1')\n    var father = p1.parentElement;\n    father.removeChild(self)\n    \n    // 删除是一个动态的过程\n    father.removeChild(father.children[0])\n    father.removeChild(father.children[1])\n    father.removeChild(father.children[2])\n</script>\n```\n\n注意：删除多个节点时，children是在时刻变化的（类似于vector，会动态变短），删除节点的时候一定要注意\n\n> 插入节点\n\n我们获得了某个Dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素，但是这个Dom节点已经存在元素了，我们就不能这么做，因为会覆盖。\n\n一般通过追加操作。\n\n追加（已存在）\n\n```html\n// 将 id = \"js\" 移到（追加）到 list 里面 （因为存在id js，所以是移动）\n<P id=\"js\">JavaScript</P>\n<div id=\"list\">\n    <p id=\"se\">JavaSE</p>\n    <p id=\"ee\">JavaEE</p>\n    <p id=\"me\">JavaME</p>\n</div>\n\n<script>\n    var js = document.getElementById('js'); // 已存在的节点\n    var list = document.getElementById('list');\n    list.appendChild(js); //追加到后面\n</script>\n```\n\n创建一个新的标签，实现插入（任何位置都可以）\n\n```html\n<script>\n    var js = document.getElementById('js');//已经存在的节点\n    var list = document.getElementById('list');\n    //通过JS创建一个新节点\n    var newP = document.createElement('p')//创建一个p标签\n    newP.id = 'newP';\n    newP.innerText = 'Hello,shiwei'\n    // 创建一个新的标签，并插入\n    // list.appendChild(newp); // 这里可在页面内写\n    // 创建一个新标签节点\n    var myScript = document.createElement('script');\n    myScript.setAttribute('type','text/javascript')\n    // list.appendChild(myScript);  // 这里可在页面内写\n    // 可以创建一个 Style 标签\n    var myStyle = document.createElement('style');// 可以创建一个空Style标签\n    myStyle.setAttribute('type','text/css');\n    myStyle.innerHTML = 'body{background-color:chartreuse}';// 设置标签内容\n    // 将创建的标签放到 head 里面 [0] 是类似于编号\n    document.getElementsByTagName('head')[0].appendChild(myStyle)\n    \n\t// 总结 就是 js 可以干 html 和 css 的所有事情\n</script>\n```\n\n插入指定位置（insertBefore）\n\n```javascript\nvar ee = document.getElementById('ee');\nvar js = document.getElementById('js');\nvar list = document.getElementById('list');\n\n//要包含的节点,insertBefore(newNode,targetNode)\nlist.insertBefore(js,ee);\n```\n\n\n\n------\n\n## 9、操作表单 (验证)\n\n> 表单是什么 ？  form  DOM树\n\n+ 文本框 text\n+ 下拉框 select\n+ 单选框 radio\n+ 多选框 checkbox\n+ 隐藏域 hidden\n+ 密码框 password\n\n>  表单的目的：提交信息\n\n获得要提交的信息\n\n```html\n<form action=\"post\">\n\n  <p>\n      <span>用户名：</span> <input type=\"text\" id=\"username\">\n  </p>\n  <!--多选框的值，就是定义好的value-->\n  <p>\n      <span>性别：</span>\n      <input type=\"radio\" name=\"gender\" value=\"man\" id=\"boy\">男\n      <input type=\"radio\" name=\"gender\" value=\"woman\" id=\"girl\">女\n  </p>\n\n</form>\n\n<script>\n  var input_text = document.getElementById('username');\n  \n  var boy_radio = document.getElementById('boy');\n  var girl_radio = document.getElementById('girl');\n  \n  // 得到输入框的值\n  // input_text.value\n  // 修改输入框的值\n  input_text.value = '123'\n  \n  // 对于单选框，多选框等固定的值，boy_radio.value只能取到当前的值，不能确定是否被选\n  boy_radio.checked;// 查看返回的结果，是否为true，如果为true，则被选中。\n  girl_radio.checked = true;// 赋值\n  \n</script>\n```\n\n> 提交表单 ，md5加密密码 表单优化 （我记得 y总 的 jwt 也可以加密 + 验证，比较主流）\n\n### 9.1 按钮绑定\n\n```html\n<head>\n\t<meta charset=\"utf-8\">\n\t<title></title>\n    <!-- md5的工具类 -->\n\t<script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script>\n</head>\n<body>\n\t<form id=\"form1\"  action=\"#\" method=\"POST\">\n\t\t<p>\n\t\t\t<span>用户名：</span><input type=\"text\" id=\"username\" name=\"username\"><br>\n\t\t\t<span>密码：</span><input type=\"password\" id=\"input_password\">\n\t\t\t<input type=\"hidden\" id=\"md5_password\" name=\"password\">\n\t\t</p>\n\t\t<!-- 按钮绑定事件 当被点击触发事件-->\n\t\t<button type=\"submit\" onclick=\"f()\">提交</button>\n\t</form>\n\t<script type=\"text/javascript\">\n\t\t'use strict'\n\t\tfunction validate() {\n\t        if(confirm(\"是否提交\")){\n\t            return true;\n\t        }else{\n\t            return false;\n\t        }\n        }\n\t\tfunction f() {\n\t\t\tvar uname = document.getElementById('username');\n\t\t\tvar input_pwd = document.getElementById('input_password');\n\t\t\tvar pwd = document.getElementById('md5_password');\n\t\t\t// md5算法加密\n\t\t\tpwd.value = md5(input_pwd.value);\n\t\t\tconsole.log(uname.value + '+' + pwd.value);\n\t\t\tif(validate()){\n            \tdocument.getElementById(\"form1\").submit();\n        \t}\n\t\t}\n\t</script>\n</body>\n```\n\n### 9.2 表单绑定\n\nmd5加密验证，表单优化（设置 hidden 类型）\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\">\n\t\t<title></title>\n\t\t<script src=\"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<!-- 表单绑定提交事件 -->\n\t\t<!-- onsubmit=绑定一个提交检测的函数， -->\n\t\t<!-- 将这个结果返回给表单，使用onsubmit接收 -->\n\t\t<form action=\"#\" method=\"POST\" onsubmit=\"return f()\">\n\t\t\t<p>\n\t\t\t\t<span>用户名：</span><input type=\"text\" id=\"username\" name=\"username\"><br>\n\t\t\t\t<span>密码：</span><input type=\"password\" id=\"input_password\">\n\t\t\t\t<!-- 使用隐藏域提交，这样密码框不会在提交一瞬间变长，直接是面试常考 -->\n\t\t\t\t<input type=\"hidden\" id=\"md5_password\" name=\"password\">\n\t\t\t</p>\n\t\t\t<!-- 绑定事件 当被点击触发事件-->\n\t\t\t<button type=\"submit\" >提交</button>\n\t\t</form>\n\n\t\t<script type=\"text/javascript\">\n\t\t\t'use strict'\n\n\t\t\tfunction f() {\n\t\t\t\tvar uname = document.getElementById('username');\n\t\t\t\tvar input_pwd = document.getElementById('input_password');\n\t\t\t\tvar pwd = document.getElementById('md5_password');\n\t\t\t\t// md5算法\n\t\t\t\tpwd.value = md5(input_pwd.value);\n\t\t\t\t// 提交到控制台\n\t\t\t\tconsole.log(uname.value + '+' + pwd.value);\n\t\t\t\t// 允许表单提交true，阻止表单提交false\n                // 可以自己校验判断表单内容\n\t\t\t\treturn true;\n\t\t\t}\n\t\t</script>\n\t</body>\n</html>\n```\n\n\n\n------\n\n## 10、jQuery\n\njQuery（write less, do more.）\n\njQuery库， 里面存在大量的JavaScript函数（说白了就是封装函数，直接调用，方便使用）\n\n> 获取jQuery\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <!--在线cdn-->\n    <script src=\"http://code.jquery.com/jquery-2.1.1.min.js\"></script>\n</head>\n<body>\n    <!-- 公式： $(selector).action -->\n    <a href=\"\" id=\"test-jquery\">点我</a>\n\n    <script>\n        // document.getElementById('id');\n        // 选择器就是css的选择器\n        $('#test-jquery').click(function (){\n            alert('hello,jquery');\n        })\n    </script>\n\n</body>\n</html>\n```\n\n注意:在线cdn\n\n> 选择器\n\n```html\n<script>\n    // 原生js，选择器少，麻烦\n    // 标签\n    document.getElementsByTagName();\n    // id\n    document.getElementById();\n    // 类\n    document.getElementsByClassName()\n\n    // jQuery  css中的选择器 它 都能用\n    $('p').click(); // 标签选择器\n    $('#id1').click(); // id选择器\n    $('.class').click(); // class选择器\n</script>\n```\n\n文档工具站  https://jquery.cuishifeng.cn/\n\n```javascript\n$(selector).action() // 常见用法\n```\n\n\n\n> 事件\n\n鼠标事件，键盘事件，其他事件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n\n    <style>\n        #divMove{\n            width:500px;\n            height:500px;\n            border:1px solid red;\n        }\n    </style>\n\n    <script src=\"http://code.jquery.com/jquery-2.1.1.min.js\"></script>\n</head>\n<body>\n<!--要求：获取鼠标当前的一个坐标-->\nmouse:<span id=\"mouseMove\"></span>\n<div id=\"divMove\">\n    在这里移动鼠标试试\n</div>\n\n<script>\n    // 当网页元素加载完毕之后响应事件\n    // $(document).ready(function () {\n    //\n    // })\n    // 其简写\n    $(function () {\n        $('#divMove').mousemove(function (e) {\n            $('#mouseMove').text('x:'+e.pageX + 'y:'+e.pageY)\n        })\n    });\n</script>\n\n</body>\n</html>\n```\n\n> 操作DOM\n\n**节点文本操作**\n\n```javascript\n// eg:\n$('#ID li[name=1]').text(); // 获取ID中名字为1的li标签的值\n$('#ID li[name=1]').text(123); // 设置ID中名字为1的li标签的值为123\n$('#ID').html('<strong>123</strong>');  // 设置值\n$('#ID li[name=1]').css(\"color\",\"red\");  // 设置CSS属性\n// eg:\n$('#test-ul li[name=python]').text(); // 设置值\n$('#test-ul li[name=python]').text('设置值'); // 设置值\n$('#test-ul').html(); // 获得值\n$('#test-ul').html('<strong>123</strong>'); // 设置值\n```\n\n**css操作**\n\n```javascript\n$('#test-ul li[name=python]').css(\"color\",\"red\");\n```\n\n**元素的显示和隐藏：**本质增加了属性 **display = none;**\n\n```javascript\n$('#test-ul li[name=python]').show()\n$('#test-ul li[name=python]').hide()\n```\n\n**娱乐测试**\n\n```javascript\n$(window).width()\n$(window).height()\n```\n\n\n\n> 小技巧\n\n1、如何巩固JS (看jQuery源码，看游戏源码)\n\n2、巩固HTML,CSS (扒网站)\n\n---\n\n## 一些问题\n\n### 箭头函数的this\n\n箭头函数会屏蔽 当前匿名函数 的 this,如果调用了this,则是调他的父级的this。\n\n> 下面的代码就是 调用了window的this\n\n```javascript\nwindow.birth = 2002;\n    let kuangshen = {\n        name: '石玮',\n        birth: 2002,\n        age:() => {\n            let now = new Date().getFullYear();\n            return now - this.birth;\n        }\n    };\n    console.log(kuangshen.age());\n```\n\n```javascript\n20\n```\n","slug":"JavaScript","published":1,"updated":"2022-12-21T04:10:47.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgdh3tuy0001ccvz244p6x1c","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><p>快速入门笔记（只能说是浅浅的学了一点！）</p>\n<p>文档建议使用   <a href=\"https://www.w3school.com.cn/\">w3school</a></p>\n<hr>\n<h2 id=\"1、什么是JavaScript\"><a href=\"#1、什么是JavaScript\" class=\"headerlink\" title=\"1、什么是JavaScript?\"></a>1、什么是JavaScript?</h2><h3 id=\"1-1、概述\"><a href=\"#1-1、概述\" class=\"headerlink\" title=\"1.1、概述\"></a>1.1、概述</h3><p>JavaScript是一门世界上最流行的脚本语言</p>\n<p>JavaScript一门弱类型脚本语言，其源代码在发往客户端运行之前不需要编译，而是将文本格式的字符代码发送给浏览器由浏览器解释运行。</p>\n<h3 id=\"1-2、历史\"><a href=\"#1-2、历史\" class=\"headerlink\" title=\"1.2、历史\"></a>1.2、历史</h3><p><a href=\"https://so.csdn.net/so/search?q=ECMAScript&spm=1001.2101.3001.7020\">ECMAScript</a>：可以理解为JavaScript的一个标准</p>\n<p>Native原生JS开发<br>原生JS开发，也就是让我们按照【ECMAScript】标准的开发方式，简称是ES，特点是所有浏览器都支持，ES标准已发布如下版本：<br>ES3<br>ES4（内部，未正式发布）<br>ES5（全浏览器支持）<br>ES6（常用，当前主流版本：webpack打包成为ES5支持）<br>ES7<br>ES8<br>ES9</p>\n<h3 id=\"1-3-大前端开发\"><a href=\"#1-3-大前端开发\" class=\"headerlink\" title=\"1.3 大前端开发\"></a>1.3 大前端开发</h3><h4 id=\"1-3-1-TypeScript-微软的标准\"><a href=\"#1-3-1-TypeScript-微软的标准\" class=\"headerlink\" title=\"1.3.1 TypeScript 微软的标准\"></a>1.3.1 TypeScript 微软的标准</h4><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。<br>该语言的特点就是除了具备ES的特征之外还纳入了许多不在标准范围内的新特性，所以会导致很多浏览器不能直接支持。TypeScript语法，需要编译后（编译成js文件）才能被浏览器正确执行。</p>\n<h4 id=\"1-3-2-JavaScript库\"><a href=\"#1-3-2-JavaScript库\" class=\"headerlink\" title=\"1.3.2 JavaScript库\"></a>1.3.2 JavaScript库</h4><p>jQuery：<br>优点是简化了DOM操作，缺点是DOM操作太频繁，影响前台性能。在前端眼里使用它仅仅是为了兼容IE6、7、8。</p>\n<h4 id=\"1-3-3-JavaScript框架\"><a href=\"#1-3-3-JavaScript框架\" class=\"headerlink\" title=\"1.3.3 JavaScript框架\"></a>1.3.3 JavaScript框架</h4><p><strong>Angular：</strong><br>Google收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了模块化开发的理念，与微软合作，采用TypeScript语法开发，对后台程序员友好，对前端程序员不友好，缺点是版本迭代不合理（1代-&gt;2代，除了名字相同，基本就是两个东西）。<br><strong>React：</strong><br>Facebook出品，一款高性能能的JS前端框架，特点是提出了新概念【虚拟DOM】用于减少真实DOM操作，在内存中模拟DOM操作，有效的提升了前端渲染效率，缺点是使用复杂，因为需要额外学习一门【JSX】语言。<br><strong>Vue：</strong><br>一款渐进式Javascript框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点。<br><strong>Axios：</strong><br>前端通信框架，因为Vue的边界很明确，即使为了处理DOM，所以并不具备通信能能力，因此就需要额外使用一个通信框架与服务器交互，当然也可以直接使用jQuery提供的AJAX通信功能。</p>\n<h4 id=\"1-3-4-UI框架\"><a href=\"#1-3-4-UI框架\" class=\"headerlink\" title=\"1.3.4 UI框架\"></a>1.3.4 UI框架</h4><p><strong>Ant-Design：</strong>阿里巴巴出品，基于React的UI框架。<br><strong>ElementUI、iview、ice：</strong>饿了么出品，基于Vue的UI框架。<br><strong>Bootstrap：</strong> Twitter推出的一个用于前端开发的工具包。<br><strong>AmazeUI：</strong> 一款HTML5跨屏前端框架。</p>\n<h4 id=\"1-3-5-Javascript构建工具\"><a href=\"#1-3-5-Javascript构建工具\" class=\"headerlink\" title=\"1.3.5 Javascript构建工具\"></a>1.3.5 Javascript构建工具</h4><p><strong>Babel：</strong> js编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript。<br><strong>WebPack：</strong> 模块打包工具，主要作用是打包、压缩、合并以及按序加载。</p>\n<h4 id=\"1-3-6-后端技术\"><a href=\"#1-3-6-后端技术\" class=\"headerlink\" title=\"1.3.6 后端技术\"></a>1.3.6 后端技术</h4><p>前端人员为了方便开发也需要掌握一定的后端技术，但Java后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，出现了Node.JS<strong>（JavaScript的运行环境）</strong>这样的技术。<br>Node.JS的作者已经生成放弃Node.JS（说是架构做的不好在加上笨重的node_modules），开始开发全新架构的Deno。<br>既然是后台技术，那肯定也需要框架和项目管理工具，Node.JS框架及项目管理工具如下：<br><strong>Express：</strong> NodeJS框架<br><strong>Koa：</strong> Express简化版<br><strong>NPM：</strong> 项目综合管理工具，类似于Maven<br><strong>YARN：</strong> NPM的代提方案，类似于Maven和Gradle的关系</p>\n<hr>\n<h2 id=\"2、快速入门\"><a href=\"#2、快速入门\" class=\"headerlink\" title=\"2、快速入门\"></a>2、快速入门</h2><h3 id=\"2-1-引入JavaScript\"><a href=\"#2-1-引入JavaScript\" class=\"headerlink\" title=\"2.1 引入JavaScript\"></a>2.1 引入JavaScript</h3><h4 id=\"2-1-1内部标签\"><a href=\"#2-1-1内部标签\" class=\"headerlink\" title=\"2.1.1内部标签\"></a>2.1.1内部标签</h4><p><strong>script位置</strong><br>可以放在head标签内或body</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 弹窗输出hello word --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">\t<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;hello word&#x27;</span>);</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\n<h4 id=\"2-1-2外部引入\"><a href=\"#2-1-2外部引入\" class=\"headerlink\" title=\"2.1.2外部引入\"></a>2.1.2外部引入</h4><p><strong>问题</strong>：外部引用一定要写全，不要写这样</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 弹窗输出hello word --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;js/sw.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- 当前类型，不用显示定义也可以 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span></code></pre></div>\n\n<h3 id=\"2-2浏览器调试\"><a href=\"#2-2浏览器调试\" class=\"headerlink\" title=\"2.2浏览器调试\"></a>2.2浏览器调试</h3><p>在浏览器按F12进入开发中模式，选择控制台可以写JavaScript观察输出，并且有调试功能。<br>浏览器控制台打印：console.log();</p>\n<p>调试器：可以打断点，一行一行执行，观看代码运行情况。</p>\n<h3 id=\"2-3严格模式\"><a href=\"#2-3严格模式\" class=\"headerlink\" title=\"2.3严格模式\"></a>2.3严格模式</h3><p>js自己检查代码是否书写正确</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\">// 必须写在第一行\n&#x27;use strict&#x27;\n// 定义变量可以用var 或 let 最好使用let\nlet a = 9;\n// let a = 9;（局部变量） a = 9（全局变量）\nconsole.log(a);</code></pre></div>\n\n\n\n<hr>\n<h2 id=\"3、数据类型\"><a href=\"#3、数据类型\" class=\"headerlink\" title=\"3、数据类型\"></a>3、数据类型</h2><h3 id=\"3-1、字符串\"><a href=\"#3-1、字符串\" class=\"headerlink\" title=\"3.1、字符串\"></a>3.1、字符串</h3><p>1、正常字符我们使用 单引号，或者双引号</p>\n<p>2、转义字符 \\</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs livescript\"><span class=\"hljs-string\">\\&#x27;</span>\n<span class=\"hljs-string\">\\n</span>\n<span class=\"hljs-string\">\\t</span>\n<span class=\"hljs-string\">\\u4e2d</span> <span class=\"hljs-string\">\\u####</span> Unicode字符\n\n<span class=\"hljs-string\">\\x41</span>          Ascll字符</code></pre></div>\n\n<p>3、多行字符串编写</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// tab 上面 esc 键下面</span>\n<span class=\"hljs-keyword\">var</span> msg = <span class=\"hljs-string\">`</span>\n<span class=\"hljs-string\">\thello</span>\n<span class=\"hljs-string\">world</span>\n<span class=\"hljs-string\">你好ya</span>\n<span class=\"hljs-string\">你好</span>\n<span class=\"hljs-string\">`</span></code></pre></div>\n\n<p>4、模板字符串</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">&quot;shiwei&quot;</span>;\n<span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">3</span>;\n\n<span class=\"hljs-keyword\">let</span> msg = <span class=\"hljs-string\">`你好呀，<span class=\"hljs-subst\">$&#123;name&#125;</span>`</span></code></pre></div>\n\n<p>5、字符串长度</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">str.<span class=\"hljs-property\">length</span></code></pre></div>\n\n<p>6、字符串的可变性，不可变</p>\n<p>7、大小写转换</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 注意，这里是方法，不是属性了</span>\nstudent.<span class=\"hljs-title function_\">toUpperCase</span>() <span class=\"hljs-comment\">// 变为大写</span>\nstudent.<span class=\"hljs-title function_\">toLowerCase</span>() <span class=\"hljs-comment\">// 变为小写</span></code></pre></div>\n\n<p>8、student.indexOf(‘t’) 获取指定字符串的下标</p>\n<p>9、substring</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">[)\n student.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 从第一个字符串截取到最后一个字符串</span>\n student.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// [1, 3)</span></code></pre></div>\n\n\n\n<h3 id=\"3-2-、数组\"><a href=\"#3-2-、数组\" class=\"headerlink\" title=\"3.2 、数组\"></a>3.2 、数组</h3><p><strong>Array（数组）可以包含任意的数据类型</strong></p>\n<p>eg：</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&#x27;shiwei&#x27;</span>, <span class=\"hljs-string\">&quot;石玮&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>]</code></pre></div>\n\n\n\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>] <span class=\"hljs-comment\">// 通过下标取值和赋值</span>\narr[<span class=\"hljs-number\">0</span>]\narr[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span></code></pre></div>\n\n<p>1、长度</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">arr.<span class=\"hljs-property\">length</span></code></pre></div>\n\n<p>注意 :  加入给arr.length 赋值，数组的大小就会发生改变，如果赋值过小，元素就会丢失，如果数据超过长度，也不会报错，会显示undefined，是JavaScript特有的</p>\n<p>2、indexof()，通过元素获得下标索引</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">arr.<span class=\"hljs-title function_\">indexof</span>(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">1</span></code></pre></div>\n\n<p>字符串的额”1” 和数字的 1 是不同的</p>\n<ul>\n<li>== （判断数值相等，类型可以不相同，不建议使用，属于是js的缺陷）</li>\n<li>=== （判断数值和类型相同，和java相同，建议使用）</li>\n</ul>\n<p><strong>3、slice()</strong>   截取Array的一部分，返回一个新数组，类似String中的substring</p>\n<p><strong>4、push()、pop() 尾部</strong></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">arr.<span class=\"hljs-title function_\">push</span>()  <span class=\"hljs-comment\">// 压入到尾部</span>\narr.<span class=\"hljs-title function_\">pop</span>()   <span class=\"hljs-comment\">// 弹出尾部的一个元素</span></code></pre></div>\n\n<p><strong>5、unshift()、shift() 头部</strong></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">arr.<span class=\"hljs-title function_\">unshift</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>) <span class=\"hljs-comment\">// 压入头部，返回数组的长度</span>\narr.<span class=\"hljs-title function_\">shifit</span>() <span class=\"hljs-comment\">// 弹出头部的一个元素，返回弹出的元素</span></code></pre></div>\n\n<p>6、排序 sort()</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">arr = [<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;C&quot;</span>,<span class=\"hljs-string\">&quot;A&quot;</span>]\narr.<span class=\"hljs-title function_\">sort</span>()\narr = [<span class=\"hljs-string\">&quot;A&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;C&quot;</span>]</code></pre></div>\n\n<p>7、元素反转 reverse()</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">arr = [<span class=\"hljs-string\">&quot;A&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;C&quot;</span>]\narr.<span class=\"hljs-title function_\">sort</span>()\narr = [<span class=\"hljs-string\">&quot;C&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;A&quot;</span>]</code></pre></div>\n\n<p><strong>8、concat () 拼接</strong></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">arr = [<span class=\"hljs-string\">&quot;C&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;A&quot;</span>]\narr.<span class=\"hljs-title function_\">concat</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\narr = [<span class=\"hljs-string\">&quot;C&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;A&quot;</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]</code></pre></div>\n\n<p>注意: concat () 并没有修改数组. 只是返回一个新的数组</p>\n<p>9、连接符 join</p>\n<p>打印拼接数组，使用特定的字符换拼接</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">(<span class=\"hljs-number\">3</span>) [<span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>]\narr.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;-&#x27;</span>)\n&gt; <span class=\"hljs-string\">&#x27;B-C-A&#x27;</span></code></pre></div>\n\n<p>10、多维数组</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">arr = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-string\">&quot;5&quot;</span>,<span class=\"hljs-string\">&quot;6&quot;</span>]];\narr[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]\n&gt; <span class=\"hljs-number\">4</span></code></pre></div>\n\n<p>11、还有简单的一些</p>\n <div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// fill 填充</span>\narr.<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">1</span>)\n&gt; [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]\n<span class=\"hljs-comment\">// find 查找 （不是一个方法）</span>\n<span class=\"hljs-comment\">// arr.find(作为函数提供)</span></code></pre></div>\n\n\n\n<p>数组：存储数据（如何存，如何取，方法都可以自己实现！）</p>\n<h3 id=\"3-3、对象\"><a href=\"#3-3、对象\" class=\"headerlink\" title=\"3.3、对象\"></a>3.3、对象</h3><ol>\n<li>JavaScript 中的<strong>所有事物</strong>都是对象：字符串、数字、数组、日期，等等。</li>\n<li>在 JavaScript 中，对象是拥有<strong>属性</strong>和<strong>方法</strong>的数据。</li>\n</ol>\n<p>若干个赋值对</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> 对象名 = &#123;\n    属性名:属性值,\n    属性名:属性值,\n    属性名:属性值\n&#125;\n\n<span class=\"hljs-comment\">// 定义了一个person对象，它有四个属性！</span>\n<span class=\"hljs-keyword\">var</span> person = &#123;\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;shiwei&quot;</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>,\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;1828045443@qq.com&quot;</span>,\n    <span class=\"hljs-attr\">score</span>: <span class=\"hljs-number\">0</span>\n&#125;</code></pre></div>\n\n<p>Js中对象，{…..} 表示一个对象，键值对描述属性 xxxx: xxxx，多个属性之间使用逗号隔开，最后一个属性不加逗号！</p>\n<p>JavaScript中的所有的键都是字符串，值是任意对象！</p>\n<p>1、对象赋值</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">person.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;shiwei&quot;</span>\n&gt; <span class=\"hljs-string\">&quot;shiwei&quot;</span>\nperson.<span class=\"hljs-property\">name</span>\n&gt; <span class=\"hljs-string\">&quot;shiwei&quot;</span></code></pre></div>\n\n<p>2、使用一个不存在的对象属性，不会报错！undefined</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">person.<span class=\"hljs-property\">haha</span>\n&gt; <span class=\"hljs-literal\">undefined</span></code></pre></div>\n\n<p>3、动态的删减属性</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">delete</span> person.<span class=\"hljs-property\">name</span>\n&gt; <span class=\"hljs-literal\">true</span>\nperson\n&gt; &#123;<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;1828045443@qq.com&quot;</span>, <span class=\"hljs-attr\">score</span>: <span class=\"hljs-number\">0</span>&#125;</code></pre></div>\n\n<p>4、动态的添加，直接给新的属性添加值即可</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">person.<span class=\"hljs-property\">haha</span> = <span class=\"hljs-string\">&quot;haha&quot;</span>\n&gt; <span class=\"hljs-string\">&quot;haha&quot;</span>\nperson\n&gt; &#123;<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;1828045443@qq.com&quot;</span>, <span class=\"hljs-attr\">score</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">haha</span>: <span class=\"hljs-string\">&quot;haha&quot;</span>&#125;</code></pre></div>\n\n<p>5、判断属性值是否在这个对象中！ xxx in xxx!</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;age&#x27;</span> <span class=\"hljs-keyword\">in</span> person\n&gt; <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-comment\">// 继承</span>\n<span class=\"hljs-string\">&#x27;tostring&#x27;</span> <span class=\"hljs-keyword\">in</span> person\n&gt; <span class=\"hljs-literal\">true</span></code></pre></div>\n\n<p>6、判断一个属性是否是这个对象自身拥有的  <em>hasOwnProperty()</em></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">person.<span class=\"hljs-title function_\">hasOwnProperty</span>(<span class=\"hljs-string\">&#x27;tostring&#x27;</span>)\n&gt; <span class=\"hljs-literal\">false</span>\nperson.<span class=\"hljs-title function_\">hasOwnProperty</span>(<span class=\"hljs-string\">&#x27;age&#x27;</span>)\n&gt; <span class=\"hljs-literal\">true</span></code></pre></div>\n\n<h3 id=\"3-4、流程控制\"><a href=\"#3-4、流程控制\" class=\"headerlink\" title=\"3.4、流程控制\"></a>3.4、流程控制</h3><p>if 判断</p>\n<p>循环  for   while    do while </p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span> ; i ++ ) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);\n&#125;</code></pre></div>\n\n<p>forEach 循环</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> age = [<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">66</span>]\n\n<span class=\"hljs-comment\">// 函数</span>\nage.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value);\n&#125;)</code></pre></div>\n\n<p>for … in     (索引值 key)  for (var index in object) {} </p>\n<p>for … of     (具体的值 value)（也可以打印map和set的值）</p>\n<h3 id=\"3-5、Map和Set\"><a href=\"#3-5、Map和Set\" class=\"headerlink\" title=\"3.5、Map和Set\"></a>3.5、Map和Set</h3><blockquote>\n<p>ES6 的新特性</p>\n</blockquote>\n<p>Map:</p>\n<p>Map 和python里的字典一样</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ES6 Map</span>\n<span class=\"hljs-comment\">// 学生的成绩，学生的名字</span>\n\n<span class=\"hljs-keyword\">var</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([<span class=\"hljs-string\">&#x27;tom&#x27;</span>, <span class=\"hljs-number\">100</span>], [<span class=\"hljs-string\">&#x27;jack&#x27;</span>, <span class=\"hljs-number\">90</span>], [<span class=\"hljs-string\">&#x27;haha&#x27;</span>, <span class=\"hljs-number\">80</span>]);\n<span class=\"hljs-keyword\">var</span> name = map.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>); <span class=\"hljs-comment\">// 通过key获取value</span>\nmap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-number\">123456</span>); <span class=\"hljs-comment\">// 新增或修改</span>\nmap.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">&quot;tom&quot;</span>); <span class=\"hljs-comment\">// 删除</span></code></pre></div>\n\n<p>Set: 无序不重复的集合</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">//  set可以去重</span>\nset.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 添加！</span>\nset.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除！</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(set.<span class=\"hljs-title function_\">has</span>(<span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 是否包含某个元素！</span></code></pre></div>\n\n<h3 id=\"3-6、iterator-迭代器\"><a href=\"#3-6、iterator-迭代器\" class=\"headerlink\" title=\"3.6、iterator(迭代器)\"></a>3.6、iterator(迭代器)</h3><blockquote>\n<p>ES6 的新特性</p>\n</blockquote>\n<p>遍历数组</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 通过for of / for in 下标</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">of</span> arr) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n&#125;</code></pre></div>\n\n<p>遍历map</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([[<span class=\"hljs-string\">&quot;tom&quot;</span>,<span class=\"hljs-number\">100</span>],[<span class=\"hljs-string\">&quot;jack&quot;</span>,<span class=\"hljs-number\">90</span>],[<span class=\"hljs-string\">&quot;haha&quot;</span>,<span class=\"hljs-number\">80</span>]]);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x <span class=\"hljs-keyword\">of</span> map) &#123;\n \t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n&#125;</code></pre></div>\n\n<p>遍历set</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x <span class=\"hljs-keyword\">of</span> set) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n&#125;</code></pre></div>\n\n\n\n<hr>\n<h2 id=\"4、函数\"><a href=\"#4、函数\" class=\"headerlink\" title=\"4、函数\"></a>4、函数</h2><p>方法：对象（属性，方法）（把函数放到对象里面就成了方法）</p>\n<p>方法（method）: 当将<strong>函数</strong>和<strong>对象</strong>合写在一起时，函数就变成了 “方法”（method）// 当函数赋值给对象的属性，我们称为”方法”</p>\n<p>函数：</p>\n<p>函数（function）: 函数是带有名称（named）和参数的JavaScript代码段，可以一次定义多次调用</p>\n<blockquote>\n<p> 函数和方法本质上是一样的，只不过方法是函数的特例，是将<strong>函数</strong>值赋给了<strong>对象</strong>，只是放到的位置不同。</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/qq_44163269/article/details/104627274\">javascript中函数和方法的区别</a></p>\n<h3 id=\"4-1、定义函数\"><a href=\"#4-1、定义函数\" class=\"headerlink\" title=\"4.1、定义函数\"></a>4.1、定义函数</h3><blockquote>\n<p>定义方式一</p>\n</blockquote>\n<p>绝对值函数</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">abs</span>(<span class=\"hljs-params\">x</span>) &#123;\n    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> x;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> -x;\n    &#125;\n&#125;</code></pre></div>\n\n<p>一旦执行到  return  代表函数结束，返回结果！</p>\n<p>如果没有执行  return  , 函数执行完也会返回结果，结果就是 undefined</p>\n<blockquote>\n<p>定义方式二</p>\n</blockquote>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 匿名函数，匿名内部类</span>\n<span class=\"hljs-keyword\">var</span> abs = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) &#123;\n    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> x;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> -x;\n    &#125;\n&#125;</code></pre></div>\n\n<p>定义方式一和定义方式二等价！</p>\n<p>参数问题：JavaScript可以传任意个参数，也可以不传参数</p>\n<p>参数进来是否存在的问题：</p>\n<p>假设参数不存在，如何规避？</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> abs = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) &#123;\n  <span class=\"hljs-comment\">//手动抛出异常来判断</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> x !== <span class=\"hljs-string\">&#x27;number&#x27;</span>)&#123;\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">&#x27;Not a Number&#x27;</span>;\n    &#125;\n    <span class=\"hljs-keyword\">if</span>(x &gt;= <span class=\"hljs-number\">0</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> x;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> -x;\n    &#125;\n&#125;</code></pre></div>\n\n<p><code>arguments </code>是一个js免费赠送的关键字</p>\n<p><code>arguments </code>： 代表传递进来的所有参数，是一个数组</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> abs = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) &#123;\n    \n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;x=&gt;&quot;</span> + x);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> ; i ++ ) &#123;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">arguments</span>[i]);\n    &#125;\n\n    <span class=\"hljs-keyword\">if</span>(x &gt;= <span class=\"hljs-number\">0</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> x;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> -x;\n    &#125;\n&#125;</code></pre></div>\n\n\n<p>问题：arguments包含所有参数，我们有时想使用多余的参数来进行附加操作，需要排除已有的参数</p>\n<p><code>rest</code> : 获取没有使用的参数，从前往后没有使用的参数（前面的按顺序是使用的参数，后面全部都是不使用的参数）</p>\n<p>before:</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">shiwei</span>(<span class=\"hljs-params\">a, b</span>) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;a=&gt;&quot;</span> + a);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;b=&gt;&quot;</span> + b);\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">2</span>) &#123;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> ; i ++ ) &#123;\n            <span class=\"hljs-comment\">// 。。。。。。。</span>\n        &#125;\n    &#125;\n&#125;</code></pre></div>\n\n<p>now：</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">shiwei</span>(<span class=\"hljs-params\">a,b,...rest</span>)&#123;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;a=&gt;&quot;</span> + a);\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;b=&gt;&quot;</span> + b);\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(rest);\n  &#125;\n \n<span class=\"hljs-comment\">// rest 只能写在后面，必须用...标识</span>\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">eg:</span>\n<span class=\"hljs-comment\">shiwei(1, 2, 3, 4, 5, 6, 7, 8, 9)</span>\n<span class=\"hljs-comment\">&gt; a=&gt; 1</span>\n<span class=\"hljs-comment\">&gt; b=&gt; 2</span>\n<span class=\"hljs-comment\">&gt; [3, 4, 5, 6, 7, 8, 9]</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">eg:</span>\n<span class=\"hljs-comment\">shiwei(1)</span>\n<span class=\"hljs-comment\">&gt; a=&gt; 1</span>\n<span class=\"hljs-comment\">&gt; b=&gt; undefined</span>\n<span class=\"hljs-comment\">&gt; []</span>\n<span class=\"hljs-comment\">*/</span></code></pre></div>\n\n<h3 id=\"4-2-、变量的作用域\"><a href=\"#4-2-、变量的作用域\" class=\"headerlink\" title=\"4.2 、变量的作用域\"></a>4.2 、变量的作用域</h3><p>在JavaScript中，var 定义变量实际是有作用域的， 一般认为var是全局变量，let是局部变量</p>\n<ul>\n<li>假设在函数体中声明，则在函数体外不可以使用，（非要想用的话，之后可以研究<strong>闭包</strong>）</li>\n</ul>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj</span>(<span class=\"hljs-params\"></span>) &#123;\n      <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n      x = x + <span class=\"hljs-number\">1</span>;\n  &#125;\n    x = x + <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">//Uncaught ReferenceError: x is not defined</span></code></pre></div>\n\n<ul>\n<li><p>如果两个函数使用了相同的变量名，只要在函数内部，就不冲突</p>\n</li>\n<li><p>内部函数可以访问外部函数，反之则不行</p>\n</li>\n</ul>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj</span>(<span class=\"hljs-params\"></span>) &#123;\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">// 内部函数可以访问外部函数，反之则不行</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj2</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-keyword\">var</span> y = x + <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 2</span>\n    &#125;\n\n    <span class=\"hljs-keyword\">var</span> z = y + <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// Uncaught ReferenceError: z is not defined</span>\n&#125;</code></pre></div>\n\n<p>假设，内部函数变量和外部函数的变量，重名</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n   \n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj2</span>(<span class=\"hljs-params\"></span>) &#123;\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">&#x27;A&#x27;</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;inner&#x27;</span> + x); <span class=\"hljs-comment\">//outer1</span>\n  &#125;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;outer&#x27;</span> + x); <span class=\"hljs-comment\">//innerA</span>\n  <span class=\"hljs-title function_\">qj2</span>()\n  \n&#125;\n\n<span class=\"hljs-title function_\">qj</span>()</code></pre></div>\n\n<p>假设在JavaScript中函数查找变量从自身函数开始，由“内”向“外” 查找，假设外部存在这个同名的函数变量，则在内部函数会屏蔽外部函数的变量。<code>提升变量的作用域</code></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">&quot;x&quot;</span> + y;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n  <span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;\n\n<span class=\"hljs-comment\">//结果： y undefined</span></code></pre></div>\n\n<p>说明:JS执行引擎，自动提升了y的声明，但是不会提升变量y的赋值（这不是废话嘛？）</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj2</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> y；\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">&quot;x&quot;</span> + y;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n  y = <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;</code></pre></div>\n\n<p>这个是在JavaScript建立之初就存在的特性。养成<strong>规范</strong>：所有变量定义都在函数的头部，不要乱放，便于代码维护（也是废话！）</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj2</span>(<span class=\"hljs-params\"></span>)&#123;\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>；\n  y = x + <span class=\"hljs-number\">1</span>;\n  z, i, a;  <span class=\"hljs-comment\">// undefined</span>\n&#125;</code></pre></div>\n\n<p>全局函数</p>\n<p><strong>默认所有的全局变量，都会自动绑定在window对象下</strong></p>\n<p>JavaScript实际上只有一个全局作用域，任何变量(函数也可以视为变量)，假设没有任何函数作用范围内找到，就会向外查找，如果在全局作用域都没有找到，报错<strong>RefrenceError</strong></p>\n<p>由于我们所有的全局变量都会绑定到我们的window上，如果不同的js文件，使用了相同的全局变量，冲突。 —如何减少冲突？</p>\n<blockquote>\n<p> 把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名的冲突的问题。jQuery可以解决。</p>\n</blockquote>\n<blockquote>\n<p> ES6 let 关键字，解决局部作用域冲突问题</p>\n<p> 常量 const</p>\n</blockquote>\n<h3 id=\"4-3、方法\"><a href=\"#4-3、方法\" class=\"headerlink\" title=\"4.3、方法\"></a>4.3、方法</h3><blockquote>\n<p> 方法：对象（属性，方法）（把函数放到对象里面就成了方法）</p>\n</blockquote>\n<p>方法就是把函数放在对象的里面，对象只有两个东西：属性 和 方法</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> shi = &#123;\n    name　: <span class=\"hljs-string\">&#x27;shiwei&#x27;</span>,\n    birth : <span class=\"hljs-number\">2002</span>,\n    <span class=\"hljs-comment\">//方法</span>\n    age : <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-comment\">//今年 - 出生年</span>\n        <span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getFullYear</span>();\n        <span class=\"hljs-keyword\">return</span> now - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">birth</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">//属性</span>\nshi.<span class=\"hljs-property\">name</span>\n<span class=\"hljs-comment\">//方法</span>\nshi.<span class=\"hljs-title function_\">age</span>()\n</code></pre></div>\n\n<p>this. 代表什么？拆开上面的代码看看</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getAge</span>(<span class=\"hljs-params\"></span>) &#123;\n    <span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getFullYear</span>();\n    <span class=\"hljs-keyword\">return</span> now - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">birth</span>;\n&#125;\n\n<span class=\"hljs-keyword\">var</span> shi = &#123;\n    name　: <span class=\"hljs-string\">&#x27;shiwei&#x27;</span>,\n    birth : <span class=\"hljs-number\">2002</span>,\n    age : getAge\n&#125;\n\n<span class=\"hljs-comment\">// shi.age()     ok</span>\n<span class=\"hljs-comment\">// getAge()      NaN   window</span>\n<span class=\"hljs-comment\">// 直接调用getAge表示调用window的这个方法,但是window没有</span></code></pre></div>\n\n<p>this 是无法指向的， 是默认指向调用它的那个对象</p>\n<blockquote>\n<p>apply</p>\n</blockquote>\n<p>可以指定  this 的作用对象（一种调用方法的方法 ）</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getAge</span>(<span class=\"hljs-params\"></span>)&#123;\n        <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getFullYear</span>();\n        <span class=\"hljs-keyword\">return</span> now - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">birth</span>;\n    &#125;\n    <span class=\"hljs-keyword\">let</span> shi = &#123;\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;石玮&quot;</span>,\n        <span class=\"hljs-attr\">birth</span>: <span class=\"hljs-number\">2002</span>,\n        <span class=\"hljs-attr\">age</span>: getAge\n    &#125;;\n    <span class=\"hljs-keyword\">let</span> xiaoming = &#123;\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小明&quot;</span>,\n        <span class=\"hljs-attr\">birth</span>: <span class=\"hljs-number\">2010</span>,\n        <span class=\"hljs-attr\">age</span>: getAge\n    &#125;;\n\n \tgetAge.<span class=\"hljs-title function_\">apply</span>(shi, []); <span class=\"hljs-comment\">// this, 指向了 shi 这个对象，参数为空</span>\n    <span class=\"hljs-comment\">//getAge.apply(EASON, []);</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(getAge.<span class=\"hljs-title function_\">apply</span>(shi,[]));\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(getAge.<span class=\"hljs-title function_\">apply</span>(xiaoming,[]));</code></pre></div>\n\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">12</span></code></pre></div>\n\n\n\n<hr>\n<h2 id=\"5、内部对象\"><a href=\"#5、内部对象\" class=\"headerlink\" title=\"5、内部对象\"></a>5、内部对象</h2><blockquote>\n<p>标准对象</p>\n</blockquote>\n<p>JavaScript 中的<strong>所有事物</strong>都是对象：字符串、数字、数组、日期，等等。</p>\n<h3 id=\"5-1、Date\"><a href=\"#5-1、Date\" class=\"headerlink\" title=\"5.1、Date\"></a>5.1、Date</h3><div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 基本使用</span>\nnow.<span class=\"hljs-title function_\">getFullYear</span>(); <span class=\"hljs-comment\">// 年</span>\nnow.<span class=\"hljs-title function_\">getMonth</span>(); <span class=\"hljs-comment\">// 月 0~11 没有12月</span>\nnow.<span class=\"hljs-title function_\">getDate</span>(); <span class=\"hljs-comment\">// 日</span>\nnow.<span class=\"hljs-title function_\">getDay</span>(); <span class=\"hljs-comment\">// 星期几</span>\nnow.<span class=\"hljs-title function_\">getHours</span>(); <span class=\"hljs-comment\">// 时</span>\nnow.<span class=\"hljs-title function_\">getMinutes</span>(); <span class=\"hljs-comment\">// 分</span>\nnow.<span class=\"hljs-title function_\">getSeconds</span>(); <span class=\"hljs-comment\">// 秒</span>\n<span class=\"hljs-comment\">// 使用js获取时间一般使用时间戳，因为其它是可以更改的</span>\nnow.<span class=\"hljs-title function_\">getTime</span>(); <span class=\"hljs-comment\">// 时间戳（1970年1月1日按时区到现在的毫秒值）</span>\n<span class=\"hljs-comment\">// 转化时间格式</span>\nnow.<span class=\"hljs-title function_\">toLocaleString</span>();\n<span class=\"hljs-comment\">//返回值：&quot;2022/6/2 21:33:10&quot; </span></code></pre></div>\n\n\n\n<h3 id=\"5-2、JSON\"><a href=\"#5-2、JSON\" class=\"headerlink\" title=\"5.2、JSON\"></a>5.2、JSON</h3><blockquote>\n<p>json 是什么</p>\n</blockquote>\n<p>早期，所有数据传输习惯使用 XML 文件！</p>\n<ul>\n<li>JSON（JavaScript Object Notation, JS 对象简谱）是一种轻量级的数据交换格式。</li>\n<li>简洁和清晰的层次结构使得JSON成为理想的数据交换语言。</li>\n<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>\n</ul>\n<p>在JavaScript一切皆为对象、任何 js 支持的类型都可以用 JSON 来表示；</p>\n<p>格式：</p>\n<ul>\n<li>对象都用 {}</li>\n<li>数组都用 []</li>\n<li>所有的键值对都是用 key : value</li>\n</ul>\n<p>JSON 字符串和 JS 对象的转化</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> user = &#123;\n    name : <span class=\"hljs-string\">&quot;shiwei&quot;</span>,\n    age : <span class=\"hljs-number\">3</span>,\n    sex : <span class=\"hljs-string\">&#x27;男&#x27;</span>\n  &#125;\n  \n  <span class=\"hljs-comment\">//对象转化为json字符串---&gt;&#123;&quot;name&quot;:&quot;shiwei&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;</span>\n  <span class=\"hljs-keyword\">var</span> jsonUser = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(user)\n  \n  <span class=\"hljs-comment\">//json 字符串转化为对象  参数为 json 字符串</span>\n  <span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-string\">&#x27;&quot;name&quot;:&quot;shiwei&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#x27;</span>)\n</code></pre></div>\n\n<p>JSON 和 JS 对象的区别</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = &#123;<span class=\"hljs-attr\">a</span>:<span class=\"hljs-string\">&#x27;hello&#x27;</span>, <span class=\"hljs-attr\">b</span>:<span class=\"hljs-string\">&#x27;hi&#x27;</span>&#125;;\n<span class=\"hljs-keyword\">var</span> json = <span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;, &quot;b&quot;:&quot;hi&quot;&#125;&#x27;</span> <span class=\"hljs-comment\">// json 是个字符串（本质就是一堆字符串解析）</span></code></pre></div>\n\n<h3 id=\"5-3、Ajax\"><a href=\"#5-3、Ajax\" class=\"headerlink\" title=\"5.3、Ajax\"></a>5.3、Ajax</h3><ul>\n<li>原生的 js 写法    xhr 异步请求</li>\n<li>jQuery封装好的 方法 $(“#name”).ajax(“”)</li>\n<li>axios 请求</li>\n</ul>\n<hr>\n<h2 id=\"6、面向对象编程\"><a href=\"#6、面向对象编程\" class=\"headerlink\" title=\"6、面向对象编程\"></a>6、面向对象编程</h2><blockquote>\n<h4 id=\"原型对象\"><a href=\"#原型对象\" class=\"headerlink\" title=\"原型对象\"></a>原型对象</h4></blockquote>\n<p>javaScript 、Java、c# 。。。。面向对象；javaScript有些区别！</p>\n<ul>\n<li>类：模板</li>\n<li>对象：具体的实例</li>\n</ul>\n<p>在 JavaScript 这个需要大家换一下思维方式！</p>\n<p>原型：</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Student</span> = &#123;\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;a&quot;</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-attr\">run</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> +<span class=\"hljs-string\">&quot;run&quot;</span>)\n    &#125;\n&#125;;\n<span class=\"hljs-keyword\">var</span> xiaoming = &#123;\n    <span class=\"hljs-attr\">name</span>:xiaoming\n&#125;;\n\nxiaoming.<span class=\"hljs-property\">_proto_</span> = <span class=\"hljs-title class_\">Student</span>;\n<span class=\"hljs-comment\">// 小明的原型是Student,可以使用Student中的run方法</span>\n<span class=\"hljs-comment\">// 简单说就是小明继承了它爹Student</span>\n\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Bird</span> = &#123;\n    <span class=\"hljs-attr\">fly</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&quot;fly....&quot;</span>);\n    &#125;\n&#125;;\n\n<span class=\"hljs-comment\">// 小明的原型是 Bird</span>\nxiaoming.<span class=\"hljs-property\">__proto__</span> = <span class=\"hljs-title class_\">Bird</span>;</code></pre></div>\n\n<blockquote>\n<h4 id=\"class-继承\"><a href=\"#class-继承\" class=\"headerlink\" title=\"class 继承\"></a>class 继承</h4></blockquote>\n<p>class 关键字，是在  ES6  引入的</p>\n<p>1、定义一个类，属性，方法</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//定义一个学生类</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) &#123;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n    &#125;\n\n    <span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>)\n    &#125;\n   \n&#125;\n<span class=\"hljs-keyword\">var</span> xiaoming = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;xiaoming&quot;</span>);\n<span class=\"hljs-keyword\">var</span> xiaohong = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;xiaohong&quot;</span>);\nxiaoming.<span class=\"hljs-title function_\">hello</span>()\n</code></pre></div>\n\n<p>2、继承</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) &#123;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n    &#125;\n\n    <span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>)\n    &#125;\n    \n&#125;\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">xiaoStudent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Student</span> &#123;\n    \n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, grade</span>) &#123;\n        <span class=\"hljs-variable language_\">super</span>(name);\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">grade</span> = grade;\n    &#125;\n\n    <span class=\"hljs-title function_\">myGrade</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;我是小学生&#x27;</span>)\n    &#125;\n    \n&#125;\n\n<span class=\"hljs-keyword\">var</span> xiaoming = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;xiaoming&quot;</span>);\n<span class=\"hljs-keyword\">var</span> xiaohong = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">xiaoStudent</span>(<span class=\"hljs-string\">&quot;xiaohong&quot;</span>, <span class=\"hljs-number\">1</span>);\nxiaoming.<span class=\"hljs-title function_\">hello</span>()\n<span class=\"hljs-comment\">// xiaohong 的原型对象（他爹）是Student</span></code></pre></div>\n\n<blockquote>\n<h4 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h4><h4 id=\"博客圆—javascript——原型与原型链\"><a href=\"#博客圆—javascript——原型与原型链\" class=\"headerlink\" title=\"博客圆—javascript——原型与原型链\"></a><a href=\"https://www.cnblogs.com/loveyaxin/p/11151586.html\">博客圆—javascript——原型与原型链</a></h4></blockquote>\n<p>简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》</p>\n<p><strong>在查找属性的时候查到 Object.prototype 就可以停止查找了，所以就不会无线查找，不会一直循环了。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/850375/201907/850375-20190708153139577-2105652554.png\" alt=\"原型链\"></p>\n<hr>\n<h2 id=\"7、操作BOM对象-重点\"><a href=\"#7、操作BOM对象-重点\" class=\"headerlink\" title=\"7、操作BOM对象(重点)\"></a>7、操作BOM对象(重点)</h2><p>BOM：浏览器对象模型</p>\n<blockquote>\n<p>浏览器介绍</p>\n</blockquote>\n<p>JavaScript 和 浏览器关系？</p>\n<p>JavaScript诞生就是为了能够让他在浏览器中运行</p>\n<p>BOM：浏览器对象模型（内核）</p>\n<ul>\n<li>IE 6–11</li>\n<li>Chrome</li>\n<li>Safari</li>\n<li>Firefox</li>\n<li>Opera</li>\n</ul>\n<blockquote>\n<p>window (重要)</p>\n</blockquote>\n<p>window 代表浏览器窗口</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-literal\">undefined</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">outerHeight</span>  <span class=\"hljs-comment\">// 外部</span>\n<span class=\"hljs-number\">995</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">outerWidth</span>\n<span class=\"hljs-number\">1018</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span>  <span class=\"hljs-comment\">// 内部</span>\n<span class=\"hljs-number\">444</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerWidth</span>\n<span class=\"hljs-number\">1003</span></code></pre></div>\n\n\n\n<blockquote>\n<p>Navigator  （不建议使用）</p>\n</blockquote>\n<p>navigator, 封装了浏览器的信息</p>\n<p>大写Navigator是类，小写<code>navigator</code>是对象</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">navigator.<span class=\"hljs-property\">appName</span>    <span class=\"hljs-comment\">// 名字</span>\n<span class=\"hljs-string\">&#x27;Netscape&#x27;</span>\nnavigator.<span class=\"hljs-property\">appVersion</span> <span class=\"hljs-comment\">// 版本号</span>\n<span class=\"hljs-string\">&#x27;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span>\nnavigator.<span class=\"hljs-property\">userAgent</span>  <span class=\"hljs-comment\">// 用户浏览信息</span>\n<span class=\"hljs-string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span>\nnavigator.<span class=\"hljs-property\">platform</span>   <span class=\"hljs-comment\">// 运行浏览器的操作系统和（或）硬件平台</span>\n<span class=\"hljs-string\">&#x27;Win32&#x27;</span></code></pre></div>\n\n<p>大多数时候，我们不会使用<code>navogator</code>对象，因为会被人为修改，不建议使用这些属性来判断和编写代码</p>\n<blockquote>\n<p>screen </p>\n</blockquote>\n<p>代表计算机屏幕尺寸</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">screen.<span class=\"hljs-property\">width</span>\n<span class=\"hljs-number\">2048</span> \n<span class=\"hljs-comment\">// 2048 px</span>\nscreen.<span class=\"hljs-property\">height</span>\n<span class=\"hljs-number\">1152</span>\n<span class=\"hljs-comment\">// 1152 px</span></code></pre></div>\n\n<blockquote>\n<p>location (重要)</p>\n</blockquote>\n<p>location 代表当前页面的URL信息</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//location 的一些属性</span>\n<span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>\n<span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>\n<span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&quot;https://www.baidu.com/&quot;</span>\n<span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&quot;https:&quot;</span>\n<span class=\"hljs-attr\">reload</span>: ƒ <span class=\"hljs-title function_\">reload</span>() <span class=\"hljs-comment\">//刷新网页</span>\n\n<span class=\"hljs-comment\">//设置新地址</span>\nlocation.<span class=\"hljs-title function_\">assign</span>(<span class=\"hljs-string\">&quot;https://app2004.acapp.acwing.com.cn/user/account/login/&quot;</span>)</code></pre></div>\n\n\n\n<blockquote>\n<p>document (内容 DOM， 文档对象模型)</p>\n</blockquote>\n<p>document 代表当前的页面，HTML DOM文档树</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span>\n<span class=\"hljs-string\">&#x27;百度一下，你就知道&#x27;</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span> = <span class=\"hljs-string\">&quot;努力挣钱和吃饭，要不然就不被xh&quot;</span>  <span class=\"hljs-comment\">// 自定义title，也就是导航栏的内容</span>\n<span class=\"hljs-string\">&#x27;努力挣钱和吃饭，要不然就不被xh&#x27;</span></code></pre></div>\n\n<p><strong>获取具体的文档树节点</strong></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dl</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dt</span>&gt;</span>Java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dt</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>JavaSE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>JavaEE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dl</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> dl = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;app&#x27;</span>)</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\n\n\n<blockquote>\n<p> 获取cookie（客户端的本地信息）</p>\n</blockquote>\n<p>不安全，会被劫持</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;aa.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--恶意人员：获取你的cookie上传到他的服务器--&gt;</span></code></pre></div>\n\n<p>服务器端可以设置 cookie: httpOnly       (只读，不能修改)</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">cookie</span></code></pre></div>\n\n<div class=\"code-wrapper\"><pre><code class=\"hljs 1c\">&gt; &#x27;BIDUPSID=B<span class=\"hljs-number\">8683</span>E2A9F4C1F<span class=\"hljs-number\">388691</span>1F077A0A<span class=\"hljs-number\">1102</span>; PSTM=<span class=\"hljs-number\">1641251220</span>; BAIDUID=B<span class=\"hljs-number\">8683</span>E2A9F4C1F38C<span class=\"hljs-number\">871142</span>E273C<span class=\"hljs-number\">7207</span>:SL=0:NR=10:FG=1; BD_UPN=<span class=\"hljs-number\">12314753</span>; H_PS_PSSID=<span class=\"hljs-number\">3754</span>5_<span class=\"hljs-number\">3654</span>9_<span class=\"hljs-number\">3735</span>2_<span class=\"hljs-number\">3481</span>2_<span class=\"hljs-number\">3748</span>6_<span class=\"hljs-number\">3680</span>7_<span class=\"hljs-number\">3740</span>4_<span class=\"hljs-number\">3678</span>6_<span class=\"hljs-number\">3753</span>6_<span class=\"hljs-number\">3749</span>8_<span class=\"hljs-number\">2635</span>0_<span class=\"hljs-number\">3744</span>6; BDORZ=B490B5EBF6F3CD402E515D22BCDA<span class=\"hljs-number\">1598</span>; BAIDUID_BFESS=B<span class=\"hljs-number\">8683</span>E2A9F4C1F38C<span class=\"hljs-number\">871142</span>E273C<span class=\"hljs-number\">7207</span>:SL=0:NR=10:FG=1; COOKIE_SESSION=<span class=\"hljs-number\">3405</span>_0_9_9_21_10_1_0_9_8_6_5_<span class=\"hljs-number\">390667</span>8_0_0_0_<span class=\"hljs-number\">1665840096</span>_0_<span class=\"hljs-number\">1665843476</span>%7C9%<span class=\"hljs-number\">232539</span>_5_<span class=\"hljs-number\">1661438898</span>%7C2; delPer=0; BD_CK_SAM=1; PSINO=3; BA_HECTOR=<span class=\"hljs-number\">0520</span>al2g8lak8kal018hfbi01hklg8v1b; ZFY=R0v3mV:A3kLPM6oCMd:BJTo:AI7QCqLLzIgO:AI2tY0ITn8:C; H_PS_645EC=b8fb%2B7%2BrcoNJDZr2BnHdidyAlYZ0SNLLncRf%2BB45PZnt59SFK6fbf98nhvQ; BD_HOME=1&#x27;</code></pre></div>\n\n<p>劫持cookie原理</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;a.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--恶意人员： 获取你的cookie上传到他的服务器上--&gt;</span></code></pre></div>\n\n<p>服务器端可以设置cookie:httpOnly</p>\n<blockquote>\n<p>history (不建议使用)</p>\n</blockquote>\n<p>history 代表浏览器的历史纪录</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">history.<span class=\"hljs-title function_\">back</span>() <span class=\"hljs-comment\">// 返回</span>\nhistory.<span class=\"hljs-title function_\">forward</span>() <span class=\"hljs-comment\">// 前进</span></code></pre></div>\n\n\n\n<hr>\n<h2 id=\"8、操作DOM对象-重点\"><a href=\"#8、操作DOM对象-重点\" class=\"headerlink\" title=\"8、操作DOM对象(重点)\"></a>8、操作DOM对象(重点)</h2><p>DOM：文档对象模型（一颗文档树 – 将嵌套关系看成树形结构）。</p>\n<blockquote>\n<p>核心</p>\n</blockquote>\n<p>浏览器网页就是一个Dom树形结构</p>\n<ul>\n<li><p>更新：更新Dom节点</p>\n</li>\n<li><p>遍历Dom节点：得到Dom节点</p>\n</li>\n<li><p>删除：删除一个Dom节点</p>\n</li>\n<li><p>添加：添加一个新的节点</p>\n</li>\n</ul>\n<p>要制作一个Dom节点，就必须要先获得这个Dom节点</p>\n<blockquote>\n<p>获得Dom节点</p>\n</blockquote>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;father&quot;</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>标题一<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>p1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span>p2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-meta\"></span></span>\n<span class=\"hljs-meta\"><span class=\"language-javascript\">\t\t\t&#x27;use strict&#x27;</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 对应css选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 标签选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;h1&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// ID选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;p1&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 类选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> p2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>(<span class=\"hljs-string\">&#x27;p2&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// ID选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> father = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;father&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 获取父节点下所有子节点属性</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> childrens = father.<span class=\"hljs-property\">children</span>;</span>\n<span class=\"language-javascript\">            <span class=\"hljs-comment\">// var childrens = father.children[index]; index 可打印出来</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 获取第一个节点</span></span>\n<span class=\"language-javascript\">\t\t\tp1.<span class=\"hljs-property\">firstChild</span>;</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 获取最后一个节点</span></span>\n<span class=\"language-javascript\">\t\t\tp1.<span class=\"hljs-property\">lastChild</span>;</span>\n<span class=\"language-javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre></div>\n\n<p>这是原生代码，之后尽量使用jQuery()；</p>\n<blockquote>\n<p>更新节点</p>\n</blockquote>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id1&quot;</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> id1 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;id1&#x27;</span>)</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\n<blockquote>\n<p>操作文本（动态操作页面样式）</p>\n</blockquote>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\">// ID选择器\nvar p1 = document.getElementById(&#x27;p1&#x27;);\n// 向p1更新值\np1.innerText = &#x27;xhxhxhxhxhmyl&#x27;;  // 更新内容\n// 向p1更新html\np1.innerHTML = <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">strong</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">strong</span>&gt;</span>;  // 可以解析HTML文本</code></pre></div>\n\n<blockquote>\n<p>操作 JS</p>\n</blockquote>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 设置字体颜色</span>\np1.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&#x27;yellow&#x27;</span>; <span class=\"hljs-comment\">// 属性使用 字符串 包裹</span>\n<span class=\"hljs-comment\">// 设置字体大小</span>\np1.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontSize</span> = <span class=\"hljs-string\">&#x27;50px&#x27;</span>;  <span class=\"hljs-comment\">// - 转 驼峰命名问题</span>\n<span class=\"hljs-comment\">// 设置内边距</span>\np1.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">padding</span> = <span class=\"hljs-string\">&#x27;2em&#x27;</span>; <span class=\"hljs-comment\">// 盒子模型，内边距</span></code></pre></div>\n\n<blockquote>\n<p>删除节点</p>\n</blockquote>\n<p><strong>删除节点的步骤</strong>：先获取父节点，再通过父节点删除自己</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;father&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>标题一<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>p1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span>p2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsById</span>(<span class=\"hljs-string\">&#x27;p1&#x27;</span>)</span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> father = p1.<span class=\"hljs-property\">parentElement</span>;</span>\n<span class=\"language-javascript\">    father.<span class=\"hljs-title function_\">removeChild</span>(self)</span>\n<span class=\"language-javascript\">    </span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 删除是一个动态的过程</span></span>\n<span class=\"language-javascript\">    father.<span class=\"hljs-title function_\">removeChild</span>(father.<span class=\"hljs-property\">children</span>[<span class=\"hljs-number\">0</span>])</span>\n<span class=\"language-javascript\">    father.<span class=\"hljs-title function_\">removeChild</span>(father.<span class=\"hljs-property\">children</span>[<span class=\"hljs-number\">1</span>])</span>\n<span class=\"language-javascript\">    father.<span class=\"hljs-title function_\">removeChild</span>(father.<span class=\"hljs-property\">children</span>[<span class=\"hljs-number\">2</span>])</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\n<p>注意：删除多个节点时，children是在时刻变化的（类似于vector，会动态变短），删除节点的时候一定要注意</p>\n<blockquote>\n<p>插入节点</p>\n</blockquote>\n<p>我们获得了某个Dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素，但是这个Dom节点已经存在元素了，我们就不能这么做，因为会覆盖。</p>\n<p>一般通过追加操作。</p>\n<p>追加（已存在）</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\">// 将 id = &quot;js&quot; 移到（追加）到 list 里面 （因为存在id js，所以是移动）\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">P</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;js&quot;</span>&gt;</span>JavaScript<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">P</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;list&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;se&quot;</span>&gt;</span>JavaSE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;ee&quot;</span>&gt;</span>JavaEE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;me&quot;</span>&gt;</span>JavaME<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> js = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;js&#x27;</span>); <span class=\"hljs-comment\">// 已存在的节点</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;list&#x27;</span>);</span>\n<span class=\"language-javascript\">    list.<span class=\"hljs-title function_\">appendChild</span>(js); <span class=\"hljs-comment\">//追加到后面</span></span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\n<p>创建一个新的标签，实现插入（任何位置都可以）</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> js = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;js&#x27;</span>);<span class=\"hljs-comment\">//已经存在的节点</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;list&#x27;</span>);</span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">//通过JS创建一个新节点</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> newP = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;p&#x27;</span>)<span class=\"hljs-comment\">//创建一个p标签</span></span>\n<span class=\"language-javascript\">    newP.<span class=\"hljs-property\">id</span> = <span class=\"hljs-string\">&#x27;newP&#x27;</span>;</span>\n<span class=\"language-javascript\">    newP.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;Hello,shiwei&#x27;</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 创建一个新的标签，并插入</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// list.appendChild(newp); // 这里可在页面内写</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 创建一个新标签节点</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> myScript = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;script&#x27;</span>);</span>\n<span class=\"language-javascript\">    myScript.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;type&#x27;</span>,<span class=\"hljs-string\">&#x27;text/javascript&#x27;</span>)</span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// list.appendChild(myScript);  // 这里可在页面内写</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 可以创建一个 Style 标签</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> myStyle = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;style&#x27;</span>);<span class=\"hljs-comment\">// 可以创建一个空Style标签</span></span>\n<span class=\"language-javascript\">    myStyle.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;type&#x27;</span>,<span class=\"hljs-string\">&#x27;text/css&#x27;</span>);</span>\n<span class=\"language-javascript\">    myStyle.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;body&#123;background-color:chartreuse&#125;&#x27;</span>;<span class=\"hljs-comment\">// 设置标签内容</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 将创建的标签放到 head 里面 [0] 是类似于编号</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;head&#x27;</span>)[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">appendChild</span>(myStyle)</span>\n<span class=\"language-javascript\">    </span>\n<span class=\"language-javascript\">\t<span class=\"hljs-comment\">// 总结 就是 js 可以干 html 和 css 的所有事情</span></span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\n<p>插入指定位置（insertBefore）</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> ee = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;ee&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> js = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;js&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;list&#x27;</span>);\n\n<span class=\"hljs-comment\">//要包含的节点,insertBefore(newNode,targetNode)</span>\nlist.<span class=\"hljs-title function_\">insertBefore</span>(js,ee);</code></pre></div>\n\n\n\n<hr>\n<h2 id=\"9、操作表单-验证\"><a href=\"#9、操作表单-验证\" class=\"headerlink\" title=\"9、操作表单 (验证)\"></a>9、操作表单 (验证)</h2><blockquote>\n<p>表单是什么 ？  form  DOM树</p>\n</blockquote>\n<ul>\n<li>文本框 text</li>\n<li>下拉框 select</li>\n<li>单选框 radio</li>\n<li>多选框 checkbox</li>\n<li>隐藏域 hidden</li>\n<li>密码框 password</li>\n</ul>\n<blockquote>\n<p> 表单的目的：提交信息</p>\n</blockquote>\n<p>获得要提交的信息</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>用户名：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!--多选框的值，就是定义好的value--&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>性别：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;man&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;boy&quot;</span>&gt;</span>男\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;woman&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;girl&quot;</span>&gt;</span>女\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">  <span class=\"hljs-keyword\">var</span> input_text = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;username&#x27;</span>);</span>\n<span class=\"language-javascript\">  </span>\n<span class=\"language-javascript\">  <span class=\"hljs-keyword\">var</span> boy_radio = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;boy&#x27;</span>);</span>\n<span class=\"language-javascript\">  <span class=\"hljs-keyword\">var</span> girl_radio = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;girl&#x27;</span>);</span>\n<span class=\"language-javascript\">  </span>\n<span class=\"language-javascript\">  <span class=\"hljs-comment\">// 得到输入框的值</span></span>\n<span class=\"language-javascript\">  <span class=\"hljs-comment\">// input_text.value</span></span>\n<span class=\"language-javascript\">  <span class=\"hljs-comment\">// 修改输入框的值</span></span>\n<span class=\"language-javascript\">  input_text.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&#x27;123&#x27;</span></span>\n<span class=\"language-javascript\">  </span>\n<span class=\"language-javascript\">  <span class=\"hljs-comment\">// 对于单选框，多选框等固定的值，boy_radio.value只能取到当前的值，不能确定是否被选</span></span>\n<span class=\"language-javascript\">  boy_radio.<span class=\"hljs-property\">checked</span>;<span class=\"hljs-comment\">// 查看返回的结果，是否为true，如果为true，则被选中。</span></span>\n<span class=\"language-javascript\">  girl_radio.<span class=\"hljs-property\">checked</span> = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">// 赋值</span></span>\n<span class=\"language-javascript\">  </span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\n<blockquote>\n<p>提交表单 ，md5加密密码 表单优化 （我记得 y总 的 jwt 也可以加密 + 验证，比较主流）</p>\n</blockquote>\n<h3 id=\"9-1-按钮绑定\"><a href=\"#9-1-按钮绑定\" class=\"headerlink\" title=\"9.1 按钮绑定\"></a>9.1 按钮绑定</h3><div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- md5的工具类 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;form1&quot;</span>  <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;POST&quot;</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>用户名：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>密码：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;input_password&quot;</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;md5_password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- 按钮绑定事件 当被点击触发事件--&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;f()&quot;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-meta\"></span></span>\n<span class=\"hljs-meta\"><span class=\"language-javascript\">\t\t&#x27;use strict&#x27;</span></span>\n<span class=\"language-javascript\">\t\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validate</span>(<span class=\"hljs-params\"></span>) &#123;</span>\n<span class=\"language-javascript\">\t        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">confirm</span>(<span class=\"hljs-string\">&quot;是否提交&quot;</span>))&#123;</span>\n<span class=\"language-javascript\">\t            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span>\n<span class=\"language-javascript\">\t        &#125;<span class=\"hljs-keyword\">else</span>&#123;</span>\n<span class=\"language-javascript\">\t            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span>\n<span class=\"language-javascript\">\t        &#125;</span>\n<span class=\"language-javascript\">        &#125;</span>\n<span class=\"language-javascript\">\t\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) &#123;</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> uname = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;username&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> input_pwd = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;input_password&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> pwd = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;md5_password&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// md5算法加密</span></span>\n<span class=\"language-javascript\">\t\t\tpwd.<span class=\"hljs-property\">value</span> = <span class=\"hljs-title function_\">md5</span>(input_pwd.<span class=\"hljs-property\">value</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(uname.<span class=\"hljs-property\">value</span> + <span class=\"hljs-string\">&#x27;+&#x27;</span> + pwd.<span class=\"hljs-property\">value</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">validate</span>())&#123;</span>\n<span class=\"language-javascript\">            \t<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;form1&quot;</span>).<span class=\"hljs-title function_\">submit</span>();</span>\n<span class=\"language-javascript\">        \t&#125;</span>\n<span class=\"language-javascript\">\t\t&#125;</span>\n<span class=\"language-javascript\">\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></code></pre></div>\n\n<h3 id=\"9-2-表单绑定\"><a href=\"#9-2-表单绑定\" class=\"headerlink\" title=\"9.2 表单绑定\"></a>9.2 表单绑定</h3><p>md5加密验证，表单优化（设置 hidden 类型）</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- 表单绑定提交事件 --&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- onsubmit=绑定一个提交检测的函数， --&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- 将这个结果返回给表单，使用onsubmit接收 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;POST&quot;</span> <span class=\"hljs-attr\">onsubmit</span>=<span class=\"hljs-string\">&quot;return f()&quot;</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>用户名：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>\n\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>密码：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;input_password&quot;</span>&gt;</span>\n\t\t\t\t<span class=\"hljs-comment\">&lt;!-- 使用隐藏域提交，这样密码框不会在提交一瞬间变长，直接是面试常考 --&gt;</span>\n\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;md5_password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 绑定事件 当被点击触发事件--&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> &gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-meta\"></span></span>\n<span class=\"hljs-meta\"><span class=\"language-javascript\">\t\t\t&#x27;use strict&#x27;</span></span>\n<span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) &#123;</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-keyword\">var</span> uname = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;username&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-keyword\">var</span> input_pwd = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;input_password&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-keyword\">var</span> pwd = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;md5_password&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-comment\">// md5算法</span></span>\n<span class=\"language-javascript\">\t\t\t\tpwd.<span class=\"hljs-property\">value</span> = <span class=\"hljs-title function_\">md5</span>(input_pwd.<span class=\"hljs-property\">value</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-comment\">// 提交到控制台</span></span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(uname.<span class=\"hljs-property\">value</span> + <span class=\"hljs-string\">&#x27;+&#x27;</span> + pwd.<span class=\"hljs-property\">value</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-comment\">// 允许表单提交true，阻止表单提交false</span></span>\n<span class=\"language-javascript\">                <span class=\"hljs-comment\">// 可以自己校验判断表单内容</span></span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span>\n<span class=\"language-javascript\">\t\t\t&#125;</span>\n<span class=\"language-javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre></div>\n\n\n\n<hr>\n<h2 id=\"10、jQuery\"><a href=\"#10、jQuery\" class=\"headerlink\" title=\"10、jQuery\"></a>10、jQuery</h2><p>jQuery（write less, do more.）</p>\n<p>jQuery库， 里面存在大量的JavaScript函数（说白了就是封装函数，直接调用，方便使用）</p>\n<blockquote>\n<p>获取jQuery</p>\n</blockquote>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--在线cdn--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 公式： $(selector).action --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test-jquery&quot;</span>&gt;</span>点我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">        <span class=\"hljs-comment\">// document.getElementById(&#x27;id&#x27;);</span></span>\n<span class=\"language-javascript\">        <span class=\"hljs-comment\">// 选择器就是css的选择器</span></span>\n<span class=\"language-javascript\">        $(<span class=\"hljs-string\">&#x27;#test-jquery&#x27;</span>).<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123;</span>\n<span class=\"language-javascript\">            <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;hello,jquery&#x27;</span>);</span>\n<span class=\"language-javascript\">        &#125;)</span>\n<span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre></div>\n\n<p>注意:在线cdn</p>\n<blockquote>\n<p>选择器</p>\n</blockquote>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 原生js，选择器少，麻烦</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 标签</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>();</span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// id</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>();</span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 类</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>()</span>\n<span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// jQuery  css中的选择器 它 都能用</span></span>\n<span class=\"language-javascript\">    $(<span class=\"hljs-string\">&#x27;p&#x27;</span>).<span class=\"hljs-title function_\">click</span>(); <span class=\"hljs-comment\">// 标签选择器</span></span>\n<span class=\"language-javascript\">    $(<span class=\"hljs-string\">&#x27;#id1&#x27;</span>).<span class=\"hljs-title function_\">click</span>(); <span class=\"hljs-comment\">// id选择器</span></span>\n<span class=\"language-javascript\">    $(<span class=\"hljs-string\">&#x27;.class&#x27;</span>).<span class=\"hljs-title function_\">click</span>(); <span class=\"hljs-comment\">// class选择器</span></span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div>\n\n<p>文档工具站  <a href=\"https://jquery.cuishifeng.cn/\">https://jquery.cuishifeng.cn/</a></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">$(selector).<span class=\"hljs-title function_\">action</span>() <span class=\"hljs-comment\">// 常见用法</span></code></pre></div>\n\n\n\n<blockquote>\n<p>事件</p>\n</blockquote>\n<p>鼠标事件，键盘事件，其他事件</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span>\n<span class=\"language-css\">        <span class=\"hljs-selector-id\">#divMove</span>&#123;</span>\n<span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">500px</span>;</span>\n<span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">500px</span>;</span>\n<span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid red;</span>\n<span class=\"language-css\">        &#125;</span>\n<span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--要求：获取鼠标当前的一个坐标--&gt;</span>\nmouse:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mouseMove&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;divMove&quot;</span>&gt;</span>\n    在这里移动鼠标试试\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 当网页元素加载完毕之后响应事件</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// $(document).ready(function () &#123;</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">//</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// &#125;)</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 其简写</span></span>\n<span class=\"language-javascript\">    $(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span>\n<span class=\"language-javascript\">        $(<span class=\"hljs-string\">&#x27;#divMove&#x27;</span>).<span class=\"hljs-title function_\">mousemove</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) &#123;</span>\n<span class=\"language-javascript\">            $(<span class=\"hljs-string\">&#x27;#mouseMove&#x27;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&#x27;x:&#x27;</span>+e.<span class=\"hljs-property\">pageX</span> + <span class=\"hljs-string\">&#x27;y:&#x27;</span>+e.<span class=\"hljs-property\">pageY</span>)</span>\n<span class=\"language-javascript\">        &#125;)</span>\n<span class=\"language-javascript\">    &#125;);</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre></div>\n\n<blockquote>\n<p>操作DOM</p>\n</blockquote>\n<p><strong>节点文本操作</strong></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// eg:</span>\n$(<span class=\"hljs-string\">&#x27;#ID li[name=1]&#x27;</span>).<span class=\"hljs-title function_\">text</span>(); <span class=\"hljs-comment\">// 获取ID中名字为1的li标签的值</span>\n$(<span class=\"hljs-string\">&#x27;#ID li[name=1]&#x27;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-number\">123</span>); <span class=\"hljs-comment\">// 设置ID中名字为1的li标签的值为123</span>\n$(<span class=\"hljs-string\">&#x27;#ID&#x27;</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>);  <span class=\"hljs-comment\">// 设置值</span>\n$(<span class=\"hljs-string\">&#x27;#ID li[name=1]&#x27;</span>).<span class=\"hljs-title function_\">css</span>(<span class=\"hljs-string\">&quot;color&quot;</span>,<span class=\"hljs-string\">&quot;red&quot;</span>);  <span class=\"hljs-comment\">// 设置CSS属性</span>\n<span class=\"hljs-comment\">// eg:</span>\n$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">text</span>(); <span class=\"hljs-comment\">// 设置值</span>\n$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&#x27;设置值&#x27;</span>); <span class=\"hljs-comment\">// 设置值</span>\n$(<span class=\"hljs-string\">&#x27;#test-ul&#x27;</span>).<span class=\"hljs-title function_\">html</span>(); <span class=\"hljs-comment\">// 获得值</span>\n$(<span class=\"hljs-string\">&#x27;#test-ul&#x27;</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>); <span class=\"hljs-comment\">// 设置值</span></code></pre></div>\n\n<p><strong>css操作</strong></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">css</span>(<span class=\"hljs-string\">&quot;color&quot;</span>,<span class=\"hljs-string\">&quot;red&quot;</span>);</code></pre></div>\n\n<p><strong>元素的显示和隐藏：</strong>本质增加了属性 <strong>display = none;</strong></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">show</span>()\n$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">hide</span>()</code></pre></div>\n\n<p><strong>娱乐测试</strong></p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-variable language_\">window</span>).<span class=\"hljs-title function_\">width</span>()\n$(<span class=\"hljs-variable language_\">window</span>).<span class=\"hljs-title function_\">height</span>()</code></pre></div>\n\n\n\n<blockquote>\n<p>小技巧</p>\n</blockquote>\n<p>1、如何巩固JS (看jQuery源码，看游戏源码)</p>\n<p>2、巩固HTML,CSS (扒网站)</p>\n<hr>\n<h2 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h2><h3 id=\"箭头函数的this\"><a href=\"#箭头函数的this\" class=\"headerlink\" title=\"箭头函数的this\"></a>箭头函数的this</h3><p>箭头函数会屏蔽 当前匿名函数 的 this,如果调用了this,则是调他的父级的this。</p>\n<blockquote>\n<p>下面的代码就是 调用了window的this</p>\n</blockquote>\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">birth</span> = <span class=\"hljs-number\">2002</span>;\n    <span class=\"hljs-keyword\">let</span> kuangshen = &#123;\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;石玮&#x27;</span>,\n        <span class=\"hljs-attr\">birth</span>: <span class=\"hljs-number\">2002</span>,\n        <span class=\"hljs-attr\">age</span>:<span class=\"hljs-function\">() =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getFullYear</span>();\n            <span class=\"hljs-keyword\">return</span> now - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">birth</span>;\n        &#125;\n    &#125;;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(kuangshen.<span class=\"hljs-title function_\">age</span>());</code></pre></div>\n\n<div class=\"code-wrapper\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">20</span></code></pre></div>\n","site":{"data":{}},"wordcount":24377,"excerpt":"","more":"<h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><p>快速入门笔记（只能说是浅浅的学了一点！）</p>\n<p>文档建议使用   <a href=\"https://www.w3school.com.cn/\">w3school</a></p>\n<hr>\n<h2 id=\"1、什么是JavaScript\"><a href=\"#1、什么是JavaScript\" class=\"headerlink\" title=\"1、什么是JavaScript?\"></a>1、什么是JavaScript?</h2><h3 id=\"1-1、概述\"><a href=\"#1-1、概述\" class=\"headerlink\" title=\"1.1、概述\"></a>1.1、概述</h3><p>JavaScript是一门世界上最流行的脚本语言</p>\n<p>JavaScript一门弱类型脚本语言，其源代码在发往客户端运行之前不需要编译，而是将文本格式的字符代码发送给浏览器由浏览器解释运行。</p>\n<h3 id=\"1-2、历史\"><a href=\"#1-2、历史\" class=\"headerlink\" title=\"1.2、历史\"></a>1.2、历史</h3><p><a href=\"https://so.csdn.net/so/search?q=ECMAScript&spm=1001.2101.3001.7020\">ECMAScript</a>：可以理解为JavaScript的一个标准</p>\n<p>Native原生JS开发<br>原生JS开发，也就是让我们按照【ECMAScript】标准的开发方式，简称是ES，特点是所有浏览器都支持，ES标准已发布如下版本：<br>ES3<br>ES4（内部，未正式发布）<br>ES5（全浏览器支持）<br>ES6（常用，当前主流版本：webpack打包成为ES5支持）<br>ES7<br>ES8<br>ES9</p>\n<h3 id=\"1-3-大前端开发\"><a href=\"#1-3-大前端开发\" class=\"headerlink\" title=\"1.3 大前端开发\"></a>1.3 大前端开发</h3><h4 id=\"1-3-1-TypeScript-微软的标准\"><a href=\"#1-3-1-TypeScript-微软的标准\" class=\"headerlink\" title=\"1.3.1 TypeScript 微软的标准\"></a>1.3.1 TypeScript 微软的标准</h4><p>TypeScript 是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。<br>该语言的特点就是除了具备ES的特征之外还纳入了许多不在标准范围内的新特性，所以会导致很多浏览器不能直接支持。TypeScript语法，需要编译后（编译成js文件）才能被浏览器正确执行。</p>\n<h4 id=\"1-3-2-JavaScript库\"><a href=\"#1-3-2-JavaScript库\" class=\"headerlink\" title=\"1.3.2 JavaScript库\"></a>1.3.2 JavaScript库</h4><p>jQuery：<br>优点是简化了DOM操作，缺点是DOM操作太频繁，影响前台性能。在前端眼里使用它仅仅是为了兼容IE6、7、8。</p>\n<h4 id=\"1-3-3-JavaScript框架\"><a href=\"#1-3-3-JavaScript框架\" class=\"headerlink\" title=\"1.3.3 JavaScript框架\"></a>1.3.3 JavaScript框架</h4><p><strong>Angular：</strong><br>Google收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了模块化开发的理念，与微软合作，采用TypeScript语法开发，对后台程序员友好，对前端程序员不友好，缺点是版本迭代不合理（1代-&gt;2代，除了名字相同，基本就是两个东西）。<br><strong>React：</strong><br>Facebook出品，一款高性能能的JS前端框架，特点是提出了新概念【虚拟DOM】用于减少真实DOM操作，在内存中模拟DOM操作，有效的提升了前端渲染效率，缺点是使用复杂，因为需要额外学习一门【JSX】语言。<br><strong>Vue：</strong><br>一款渐进式Javascript框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点。<br><strong>Axios：</strong><br>前端通信框架，因为Vue的边界很明确，即使为了处理DOM，所以并不具备通信能能力，因此就需要额外使用一个通信框架与服务器交互，当然也可以直接使用jQuery提供的AJAX通信功能。</p>\n<h4 id=\"1-3-4-UI框架\"><a href=\"#1-3-4-UI框架\" class=\"headerlink\" title=\"1.3.4 UI框架\"></a>1.3.4 UI框架</h4><p><strong>Ant-Design：</strong>阿里巴巴出品，基于React的UI框架。<br><strong>ElementUI、iview、ice：</strong>饿了么出品，基于Vue的UI框架。<br><strong>Bootstrap：</strong> Twitter推出的一个用于前端开发的工具包。<br><strong>AmazeUI：</strong> 一款HTML5跨屏前端框架。</p>\n<h4 id=\"1-3-5-Javascript构建工具\"><a href=\"#1-3-5-Javascript构建工具\" class=\"headerlink\" title=\"1.3.5 Javascript构建工具\"></a>1.3.5 Javascript构建工具</h4><p><strong>Babel：</strong> js编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript。<br><strong>WebPack：</strong> 模块打包工具，主要作用是打包、压缩、合并以及按序加载。</p>\n<h4 id=\"1-3-6-后端技术\"><a href=\"#1-3-6-后端技术\" class=\"headerlink\" title=\"1.3.6 后端技术\"></a>1.3.6 后端技术</h4><p>前端人员为了方便开发也需要掌握一定的后端技术，但Java后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，出现了Node.JS<strong>（JavaScript的运行环境）</strong>这样的技术。<br>Node.JS的作者已经生成放弃Node.JS（说是架构做的不好在加上笨重的node_modules），开始开发全新架构的Deno。<br>既然是后台技术，那肯定也需要框架和项目管理工具，Node.JS框架及项目管理工具如下：<br><strong>Express：</strong> NodeJS框架<br><strong>Koa：</strong> Express简化版<br><strong>NPM：</strong> 项目综合管理工具，类似于Maven<br><strong>YARN：</strong> NPM的代提方案，类似于Maven和Gradle的关系</p>\n<hr>\n<h2 id=\"2、快速入门\"><a href=\"#2、快速入门\" class=\"headerlink\" title=\"2、快速入门\"></a>2、快速入门</h2><h3 id=\"2-1-引入JavaScript\"><a href=\"#2-1-引入JavaScript\" class=\"headerlink\" title=\"2.1 引入JavaScript\"></a>2.1 引入JavaScript</h3><h4 id=\"2-1-1内部标签\"><a href=\"#2-1-1内部标签\" class=\"headerlink\" title=\"2.1.1内部标签\"></a>2.1.1内部标签</h4><p><strong>script位置</strong><br>可以放在head标签内或body</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 弹窗输出hello word --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">\t<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;hello word&#x27;</span>);</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<h4 id=\"2-1-2外部引入\"><a href=\"#2-1-2外部引入\" class=\"headerlink\" title=\"2.1.2外部引入\"></a>2.1.2外部引入</h4><p><strong>问题</strong>：外部引用一定要写全，不要写这样</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- 弹窗输出hello word --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;js/sw.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- 当前类型，不用显示定义也可以 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span></code></pre>\n\n<h3 id=\"2-2浏览器调试\"><a href=\"#2-2浏览器调试\" class=\"headerlink\" title=\"2.2浏览器调试\"></a>2.2浏览器调试</h3><p>在浏览器按F12进入开发中模式，选择控制台可以写JavaScript观察输出，并且有调试功能。<br>浏览器控制台打印：console.log();</p>\n<p>调试器：可以打断点，一行一行执行，观看代码运行情况。</p>\n<h3 id=\"2-3严格模式\"><a href=\"#2-3严格模式\" class=\"headerlink\" title=\"2.3严格模式\"></a>2.3严格模式</h3><p>js自己检查代码是否书写正确</p>\n<pre><code class=\"hljs html\">// 必须写在第一行\n&#x27;use strict&#x27;\n// 定义变量可以用var 或 let 最好使用let\nlet a = 9;\n// let a = 9;（局部变量） a = 9（全局变量）\nconsole.log(a);</code></pre>\n\n\n\n<hr>\n<h2 id=\"3、数据类型\"><a href=\"#3、数据类型\" class=\"headerlink\" title=\"3、数据类型\"></a>3、数据类型</h2><h3 id=\"3-1、字符串\"><a href=\"#3-1、字符串\" class=\"headerlink\" title=\"3.1、字符串\"></a>3.1、字符串</h3><p>1、正常字符我们使用 单引号，或者双引号</p>\n<p>2、转义字符 \\</p>\n<pre><code class=\"hljs livescript\"><span class=\"hljs-string\">\\&#x27;</span>\n<span class=\"hljs-string\">\\n</span>\n<span class=\"hljs-string\">\\t</span>\n<span class=\"hljs-string\">\\u4e2d</span> <span class=\"hljs-string\">\\u####</span> Unicode字符\n\n<span class=\"hljs-string\">\\x41</span>          Ascll字符</code></pre>\n\n<p>3、多行字符串编写</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// tab 上面 esc 键下面</span>\n<span class=\"hljs-keyword\">var</span> msg = <span class=\"hljs-string\">`</span>\n<span class=\"hljs-string\">\thello</span>\n<span class=\"hljs-string\">world</span>\n<span class=\"hljs-string\">你好ya</span>\n<span class=\"hljs-string\">你好</span>\n<span class=\"hljs-string\">`</span></code></pre>\n\n<p>4、模板字符串</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">&quot;shiwei&quot;</span>;\n<span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">3</span>;\n\n<span class=\"hljs-keyword\">let</span> msg = <span class=\"hljs-string\">`你好呀，<span class=\"hljs-subst\">$&#123;name&#125;</span>`</span></code></pre>\n\n<p>5、字符串长度</p>\n<pre><code class=\"hljs javascript\">str.<span class=\"hljs-property\">length</span></code></pre>\n\n<p>6、字符串的可变性，不可变</p>\n<p>7、大小写转换</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 注意，这里是方法，不是属性了</span>\nstudent.<span class=\"hljs-title function_\">toUpperCase</span>() <span class=\"hljs-comment\">// 变为大写</span>\nstudent.<span class=\"hljs-title function_\">toLowerCase</span>() <span class=\"hljs-comment\">// 变为小写</span></code></pre>\n\n<p>8、student.indexOf(‘t’) 获取指定字符串的下标</p>\n<p>9、substring</p>\n<pre><code class=\"hljs javascript\">[)\n student.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 从第一个字符串截取到最后一个字符串</span>\n student.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// [1, 3)</span></code></pre>\n\n\n\n<h3 id=\"3-2-、数组\"><a href=\"#3-2-、数组\" class=\"headerlink\" title=\"3.2 、数组\"></a>3.2 、数组</h3><p><strong>Array（数组）可以包含任意的数据类型</strong></p>\n<p>eg：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&#x27;shiwei&#x27;</span>, <span class=\"hljs-string\">&quot;石玮&quot;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>]</code></pre>\n\n\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>] <span class=\"hljs-comment\">// 通过下标取值和赋值</span>\narr[<span class=\"hljs-number\">0</span>]\narr[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span></code></pre>\n\n<p>1、长度</p>\n<pre><code class=\"hljs javascript\">arr.<span class=\"hljs-property\">length</span></code></pre>\n\n<p>注意 :  加入给arr.length 赋值，数组的大小就会发生改变，如果赋值过小，元素就会丢失，如果数据超过长度，也不会报错，会显示undefined，是JavaScript特有的</p>\n<p>2、indexof()，通过元素获得下标索引</p>\n<pre><code class=\"hljs javascript\">arr.<span class=\"hljs-title function_\">indexof</span>(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-number\">1</span></code></pre>\n\n<p>字符串的额”1” 和数字的 1 是不同的</p>\n<ul>\n<li>== （判断数值相等，类型可以不相同，不建议使用，属于是js的缺陷）</li>\n<li>=== （判断数值和类型相同，和java相同，建议使用）</li>\n</ul>\n<p><strong>3、slice()</strong>   截取Array的一部分，返回一个新数组，类似String中的substring</p>\n<p><strong>4、push()、pop() 尾部</strong></p>\n<pre><code class=\"hljs javascript\">arr.<span class=\"hljs-title function_\">push</span>()  <span class=\"hljs-comment\">// 压入到尾部</span>\narr.<span class=\"hljs-title function_\">pop</span>()   <span class=\"hljs-comment\">// 弹出尾部的一个元素</span></code></pre>\n\n<p><strong>5、unshift()、shift() 头部</strong></p>\n<pre><code class=\"hljs javascript\">arr.<span class=\"hljs-title function_\">unshift</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>) <span class=\"hljs-comment\">// 压入头部，返回数组的长度</span>\narr.<span class=\"hljs-title function_\">shifit</span>() <span class=\"hljs-comment\">// 弹出头部的一个元素，返回弹出的元素</span></code></pre>\n\n<p>6、排序 sort()</p>\n<pre><code class=\"hljs javascript\">arr = [<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;C&quot;</span>,<span class=\"hljs-string\">&quot;A&quot;</span>]\narr.<span class=\"hljs-title function_\">sort</span>()\narr = [<span class=\"hljs-string\">&quot;A&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;C&quot;</span>]</code></pre>\n\n<p>7、元素反转 reverse()</p>\n<pre><code class=\"hljs javascript\">arr = [<span class=\"hljs-string\">&quot;A&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;C&quot;</span>]\narr.<span class=\"hljs-title function_\">sort</span>()\narr = [<span class=\"hljs-string\">&quot;C&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;A&quot;</span>]</code></pre>\n\n<p><strong>8、concat () 拼接</strong></p>\n<pre><code class=\"hljs javascript\">arr = [<span class=\"hljs-string\">&quot;C&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;A&quot;</span>]\narr.<span class=\"hljs-title function_\">concat</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\narr = [<span class=\"hljs-string\">&quot;C&quot;</span>,<span class=\"hljs-string\">&quot;B&quot;</span>,<span class=\"hljs-string\">&quot;A&quot;</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]</code></pre>\n\n<p>注意: concat () 并没有修改数组. 只是返回一个新的数组</p>\n<p>9、连接符 join</p>\n<p>打印拼接数组，使用特定的字符换拼接</p>\n<pre><code class=\"hljs javascript\">(<span class=\"hljs-number\">3</span>) [<span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>]\narr.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;-&#x27;</span>)\n&gt; <span class=\"hljs-string\">&#x27;B-C-A&#x27;</span></code></pre>\n\n<p>10、多维数组</p>\n<pre><code class=\"hljs javascript\">arr = [[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>],[<span class=\"hljs-string\">&quot;5&quot;</span>,<span class=\"hljs-string\">&quot;6&quot;</span>]];\narr[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]\n&gt; <span class=\"hljs-number\">4</span></code></pre>\n\n<p>11、还有简单的一些</p>\n <pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// fill 填充</span>\narr.<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">1</span>)\n&gt; [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]\n<span class=\"hljs-comment\">// find 查找 （不是一个方法）</span>\n<span class=\"hljs-comment\">// arr.find(作为函数提供)</span></code></pre>\n\n\n\n<p>数组：存储数据（如何存，如何取，方法都可以自己实现！）</p>\n<h3 id=\"3-3、对象\"><a href=\"#3-3、对象\" class=\"headerlink\" title=\"3.3、对象\"></a>3.3、对象</h3><ol>\n<li>JavaScript 中的<strong>所有事物</strong>都是对象：字符串、数字、数组、日期，等等。</li>\n<li>在 JavaScript 中，对象是拥有<strong>属性</strong>和<strong>方法</strong>的数据。</li>\n</ol>\n<p>若干个赋值对</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> 对象名 = &#123;\n    属性名:属性值,\n    属性名:属性值,\n    属性名:属性值\n&#125;\n\n<span class=\"hljs-comment\">// 定义了一个person对象，它有四个属性！</span>\n<span class=\"hljs-keyword\">var</span> person = &#123;\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;shiwei&quot;</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>,\n    <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;1828045443@qq.com&quot;</span>,\n    <span class=\"hljs-attr\">score</span>: <span class=\"hljs-number\">0</span>\n&#125;</code></pre>\n\n<p>Js中对象，{…..} 表示一个对象，键值对描述属性 xxxx: xxxx，多个属性之间使用逗号隔开，最后一个属性不加逗号！</p>\n<p>JavaScript中的所有的键都是字符串，值是任意对象！</p>\n<p>1、对象赋值</p>\n<pre><code class=\"hljs javascript\">person.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;shiwei&quot;</span>\n&gt; <span class=\"hljs-string\">&quot;shiwei&quot;</span>\nperson.<span class=\"hljs-property\">name</span>\n&gt; <span class=\"hljs-string\">&quot;shiwei&quot;</span></code></pre>\n\n<p>2、使用一个不存在的对象属性，不会报错！undefined</p>\n<pre><code class=\"hljs javascript\">person.<span class=\"hljs-property\">haha</span>\n&gt; <span class=\"hljs-literal\">undefined</span></code></pre>\n\n<p>3、动态的删减属性</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">delete</span> person.<span class=\"hljs-property\">name</span>\n&gt; <span class=\"hljs-literal\">true</span>\nperson\n&gt; &#123;<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;1828045443@qq.com&quot;</span>, <span class=\"hljs-attr\">score</span>: <span class=\"hljs-number\">0</span>&#125;</code></pre>\n\n<p>4、动态的添加，直接给新的属性添加值即可</p>\n<pre><code class=\"hljs javascript\">person.<span class=\"hljs-property\">haha</span> = <span class=\"hljs-string\">&quot;haha&quot;</span>\n&gt; <span class=\"hljs-string\">&quot;haha&quot;</span>\nperson\n&gt; &#123;<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&quot;1828045443@qq.com&quot;</span>, <span class=\"hljs-attr\">score</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">haha</span>: <span class=\"hljs-string\">&quot;haha&quot;</span>&#125;</code></pre>\n\n<p>5、判断属性值是否在这个对象中！ xxx in xxx!</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;age&#x27;</span> <span class=\"hljs-keyword\">in</span> person\n&gt; <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-comment\">// 继承</span>\n<span class=\"hljs-string\">&#x27;tostring&#x27;</span> <span class=\"hljs-keyword\">in</span> person\n&gt; <span class=\"hljs-literal\">true</span></code></pre>\n\n<p>6、判断一个属性是否是这个对象自身拥有的  <em>hasOwnProperty()</em></p>\n<pre><code class=\"hljs javascript\">person.<span class=\"hljs-title function_\">hasOwnProperty</span>(<span class=\"hljs-string\">&#x27;tostring&#x27;</span>)\n&gt; <span class=\"hljs-literal\">false</span>\nperson.<span class=\"hljs-title function_\">hasOwnProperty</span>(<span class=\"hljs-string\">&#x27;age&#x27;</span>)\n&gt; <span class=\"hljs-literal\">true</span></code></pre>\n\n<h3 id=\"3-4、流程控制\"><a href=\"#3-4、流程控制\" class=\"headerlink\" title=\"3.4、流程控制\"></a>3.4、流程控制</h3><p>if 判断</p>\n<p>循环  for   while    do while </p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span> ; i ++ ) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);\n&#125;</code></pre>\n\n<p>forEach 循环</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> age = [<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">66</span>]\n\n<span class=\"hljs-comment\">// 函数</span>\nage.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value);\n&#125;)</code></pre>\n\n<p>for … in     (索引值 key)  for (var index in object) {} </p>\n<p>for … of     (具体的值 value)（也可以打印map和set的值）</p>\n<h3 id=\"3-5、Map和Set\"><a href=\"#3-5、Map和Set\" class=\"headerlink\" title=\"3.5、Map和Set\"></a>3.5、Map和Set</h3><blockquote>\n<p>ES6 的新特性</p>\n</blockquote>\n<p>Map:</p>\n<p>Map 和python里的字典一样</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// ES6 Map</span>\n<span class=\"hljs-comment\">// 学生的成绩，学生的名字</span>\n\n<span class=\"hljs-keyword\">var</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([<span class=\"hljs-string\">&#x27;tom&#x27;</span>, <span class=\"hljs-number\">100</span>], [<span class=\"hljs-string\">&#x27;jack&#x27;</span>, <span class=\"hljs-number\">90</span>], [<span class=\"hljs-string\">&#x27;haha&#x27;</span>, <span class=\"hljs-number\">80</span>]);\n<span class=\"hljs-keyword\">var</span> name = map.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>); <span class=\"hljs-comment\">// 通过key获取value</span>\nmap.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-number\">123456</span>); <span class=\"hljs-comment\">// 新增或修改</span>\nmap.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-string\">&quot;tom&quot;</span>); <span class=\"hljs-comment\">// 删除</span></code></pre>\n\n<p>Set: 无序不重复的集合</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">//  set可以去重</span>\nset.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// 添加！</span>\nset.<span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 删除！</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(set.<span class=\"hljs-title function_\">has</span>(<span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 是否包含某个元素！</span></code></pre>\n\n<h3 id=\"3-6、iterator-迭代器\"><a href=\"#3-6、iterator-迭代器\" class=\"headerlink\" title=\"3.6、iterator(迭代器)\"></a>3.6、iterator(迭代器)</h3><blockquote>\n<p>ES6 的新特性</p>\n</blockquote>\n<p>遍历数组</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 通过for of / for in 下标</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">of</span> arr) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n&#125;</code></pre>\n\n<p>遍历map</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>([[<span class=\"hljs-string\">&quot;tom&quot;</span>,<span class=\"hljs-number\">100</span>],[<span class=\"hljs-string\">&quot;jack&quot;</span>,<span class=\"hljs-number\">90</span>],[<span class=\"hljs-string\">&quot;haha&quot;</span>,<span class=\"hljs-number\">80</span>]]);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x <span class=\"hljs-keyword\">of</span> map) &#123;\n \t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n&#125;</code></pre>\n\n<p>遍历set</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x <span class=\"hljs-keyword\">of</span> set) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n&#125;</code></pre>\n\n\n\n<hr>\n<h2 id=\"4、函数\"><a href=\"#4、函数\" class=\"headerlink\" title=\"4、函数\"></a>4、函数</h2><p>方法：对象（属性，方法）（把函数放到对象里面就成了方法）</p>\n<p>方法（method）: 当将<strong>函数</strong>和<strong>对象</strong>合写在一起时，函数就变成了 “方法”（method）// 当函数赋值给对象的属性，我们称为”方法”</p>\n<p>函数：</p>\n<p>函数（function）: 函数是带有名称（named）和参数的JavaScript代码段，可以一次定义多次调用</p>\n<blockquote>\n<p> 函数和方法本质上是一样的，只不过方法是函数的特例，是将<strong>函数</strong>值赋给了<strong>对象</strong>，只是放到的位置不同。</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/qq_44163269/article/details/104627274\">javascript中函数和方法的区别</a></p>\n<h3 id=\"4-1、定义函数\"><a href=\"#4-1、定义函数\" class=\"headerlink\" title=\"4.1、定义函数\"></a>4.1、定义函数</h3><blockquote>\n<p>定义方式一</p>\n</blockquote>\n<p>绝对值函数</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">abs</span>(<span class=\"hljs-params\">x</span>) &#123;\n    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> x;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> -x;\n    &#125;\n&#125;</code></pre>\n\n<p>一旦执行到  return  代表函数结束，返回结果！</p>\n<p>如果没有执行  return  , 函数执行完也会返回结果，结果就是 undefined</p>\n<blockquote>\n<p>定义方式二</p>\n</blockquote>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 匿名函数，匿名内部类</span>\n<span class=\"hljs-keyword\">var</span> abs = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) &#123;\n    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> x;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> -x;\n    &#125;\n&#125;</code></pre>\n\n<p>定义方式一和定义方式二等价！</p>\n<p>参数问题：JavaScript可以传任意个参数，也可以不传参数</p>\n<p>参数进来是否存在的问题：</p>\n<p>假设参数不存在，如何规避？</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> abs = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) &#123;\n  <span class=\"hljs-comment\">//手动抛出异常来判断</span>\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> x !== <span class=\"hljs-string\">&#x27;number&#x27;</span>)&#123;\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">&#x27;Not a Number&#x27;</span>;\n    &#125;\n    <span class=\"hljs-keyword\">if</span>(x &gt;= <span class=\"hljs-number\">0</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> x;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> -x;\n    &#125;\n&#125;</code></pre>\n\n<p><code>arguments </code>是一个js免费赠送的关键字</p>\n<p><code>arguments </code>： 代表传递进来的所有参数，是一个数组</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> abs = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) &#123;\n    \n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;x=&gt;&quot;</span> + x);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> ; i ++ ) &#123;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">arguments</span>[i]);\n    &#125;\n\n    <span class=\"hljs-keyword\">if</span>(x &gt;= <span class=\"hljs-number\">0</span>) &#123;\n        <span class=\"hljs-keyword\">return</span> x;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">return</span> -x;\n    &#125;\n&#125;</code></pre>\n\n\n<p>问题：arguments包含所有参数，我们有时想使用多余的参数来进行附加操作，需要排除已有的参数</p>\n<p><code>rest</code> : 获取没有使用的参数，从前往后没有使用的参数（前面的按顺序是使用的参数，后面全部都是不使用的参数）</p>\n<p>before:</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">shiwei</span>(<span class=\"hljs-params\">a, b</span>) &#123;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;a=&gt;&quot;</span> + a);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;b=&gt;&quot;</span> + b);\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">2</span>) &#123;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> ; i ++ ) &#123;\n            <span class=\"hljs-comment\">// 。。。。。。。</span>\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>now：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">shiwei</span>(<span class=\"hljs-params\">a,b,...rest</span>)&#123;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;a=&gt;&quot;</span> + a);\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;b=&gt;&quot;</span> + b);\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(rest);\n  &#125;\n \n<span class=\"hljs-comment\">// rest 只能写在后面，必须用...标识</span>\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">eg:</span>\n<span class=\"hljs-comment\">shiwei(1, 2, 3, 4, 5, 6, 7, 8, 9)</span>\n<span class=\"hljs-comment\">&gt; a=&gt; 1</span>\n<span class=\"hljs-comment\">&gt; b=&gt; 2</span>\n<span class=\"hljs-comment\">&gt; [3, 4, 5, 6, 7, 8, 9]</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">eg:</span>\n<span class=\"hljs-comment\">shiwei(1)</span>\n<span class=\"hljs-comment\">&gt; a=&gt; 1</span>\n<span class=\"hljs-comment\">&gt; b=&gt; undefined</span>\n<span class=\"hljs-comment\">&gt; []</span>\n<span class=\"hljs-comment\">*/</span></code></pre>\n\n<h3 id=\"4-2-、变量的作用域\"><a href=\"#4-2-、变量的作用域\" class=\"headerlink\" title=\"4.2 、变量的作用域\"></a>4.2 、变量的作用域</h3><p>在JavaScript中，var 定义变量实际是有作用域的， 一般认为var是全局变量，let是局部变量</p>\n<ul>\n<li>假设在函数体中声明，则在函数体外不可以使用，（非要想用的话，之后可以研究<strong>闭包</strong>）</li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj</span>(<span class=\"hljs-params\"></span>) &#123;\n      <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n      x = x + <span class=\"hljs-number\">1</span>;\n  &#125;\n    x = x + <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">//Uncaught ReferenceError: x is not defined</span></code></pre>\n\n<ul>\n<li><p>如果两个函数使用了相同的变量名，只要在函数内部，就不冲突</p>\n</li>\n<li><p>内部函数可以访问外部函数，反之则不行</p>\n</li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj</span>(<span class=\"hljs-params\"></span>) &#123;\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">// 内部函数可以访问外部函数，反之则不行</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj2</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-keyword\">var</span> y = x + <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 2</span>\n    &#125;\n\n    <span class=\"hljs-keyword\">var</span> z = y + <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// Uncaught ReferenceError: z is not defined</span>\n&#125;</code></pre>\n\n<p>假设，内部函数变量和外部函数的变量，重名</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>;\n   \n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj2</span>(<span class=\"hljs-params\"></span>) &#123;\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">&#x27;A&#x27;</span>;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;inner&#x27;</span> + x); <span class=\"hljs-comment\">//outer1</span>\n  &#125;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;outer&#x27;</span> + x); <span class=\"hljs-comment\">//innerA</span>\n  <span class=\"hljs-title function_\">qj2</span>()\n  \n&#125;\n\n<span class=\"hljs-title function_\">qj</span>()</code></pre>\n\n<p>假设在JavaScript中函数查找变量从自身函数开始，由“内”向“外” 查找，假设外部存在这个同名的函数变量，则在内部函数会屏蔽外部函数的变量。<code>提升变量的作用域</code></p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">&quot;x&quot;</span> + y;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n  <span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;\n\n<span class=\"hljs-comment\">//结果： y undefined</span></code></pre>\n\n<p>说明:JS执行引擎，自动提升了y的声明，但是不会提升变量y的赋值（这不是废话嘛？）</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj2</span>(<span class=\"hljs-params\"></span>) &#123;\n  <span class=\"hljs-keyword\">var</span> y；\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">&quot;x&quot;</span> + y;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x);\n  y = <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n&#125;</code></pre>\n\n<p>这个是在JavaScript建立之初就存在的特性。养成<strong>规范</strong>：所有变量定义都在函数的头部，不要乱放，便于代码维护（也是废话！）</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">qj2</span>(<span class=\"hljs-params\"></span>)&#123;\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">1</span>；\n  y = x + <span class=\"hljs-number\">1</span>;\n  z, i, a;  <span class=\"hljs-comment\">// undefined</span>\n&#125;</code></pre>\n\n<p>全局函数</p>\n<p><strong>默认所有的全局变量，都会自动绑定在window对象下</strong></p>\n<p>JavaScript实际上只有一个全局作用域，任何变量(函数也可以视为变量)，假设没有任何函数作用范围内找到，就会向外查找，如果在全局作用域都没有找到，报错<strong>RefrenceError</strong></p>\n<p>由于我们所有的全局变量都会绑定到我们的window上，如果不同的js文件，使用了相同的全局变量，冲突。 —如何减少冲突？</p>\n<blockquote>\n<p> 把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名的冲突的问题。jQuery可以解决。</p>\n</blockquote>\n<blockquote>\n<p> ES6 let 关键字，解决局部作用域冲突问题</p>\n<p> 常量 const</p>\n</blockquote>\n<h3 id=\"4-3、方法\"><a href=\"#4-3、方法\" class=\"headerlink\" title=\"4.3、方法\"></a>4.3、方法</h3><blockquote>\n<p> 方法：对象（属性，方法）（把函数放到对象里面就成了方法）</p>\n</blockquote>\n<p>方法就是把函数放在对象的里面，对象只有两个东西：属性 和 方法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> shi = &#123;\n    name　: <span class=\"hljs-string\">&#x27;shiwei&#x27;</span>,\n    birth : <span class=\"hljs-number\">2002</span>,\n    <span class=\"hljs-comment\">//方法</span>\n    age : <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-comment\">//今年 - 出生年</span>\n        <span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getFullYear</span>();\n        <span class=\"hljs-keyword\">return</span> now - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">birth</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-comment\">//属性</span>\nshi.<span class=\"hljs-property\">name</span>\n<span class=\"hljs-comment\">//方法</span>\nshi.<span class=\"hljs-title function_\">age</span>()\n</code></pre>\n\n<p>this. 代表什么？拆开上面的代码看看</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getAge</span>(<span class=\"hljs-params\"></span>) &#123;\n    <span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getFullYear</span>();\n    <span class=\"hljs-keyword\">return</span> now - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">birth</span>;\n&#125;\n\n<span class=\"hljs-keyword\">var</span> shi = &#123;\n    name　: <span class=\"hljs-string\">&#x27;shiwei&#x27;</span>,\n    birth : <span class=\"hljs-number\">2002</span>,\n    age : getAge\n&#125;\n\n<span class=\"hljs-comment\">// shi.age()     ok</span>\n<span class=\"hljs-comment\">// getAge()      NaN   window</span>\n<span class=\"hljs-comment\">// 直接调用getAge表示调用window的这个方法,但是window没有</span></code></pre>\n\n<p>this 是无法指向的， 是默认指向调用它的那个对象</p>\n<blockquote>\n<p>apply</p>\n</blockquote>\n<p>可以指定  this 的作用对象（一种调用方法的方法 ）</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getAge</span>(<span class=\"hljs-params\"></span>)&#123;\n        <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getFullYear</span>();\n        <span class=\"hljs-keyword\">return</span> now - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">birth</span>;\n    &#125;\n    <span class=\"hljs-keyword\">let</span> shi = &#123;\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;石玮&quot;</span>,\n        <span class=\"hljs-attr\">birth</span>: <span class=\"hljs-number\">2002</span>,\n        <span class=\"hljs-attr\">age</span>: getAge\n    &#125;;\n    <span class=\"hljs-keyword\">let</span> xiaoming = &#123;\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小明&quot;</span>,\n        <span class=\"hljs-attr\">birth</span>: <span class=\"hljs-number\">2010</span>,\n        <span class=\"hljs-attr\">age</span>: getAge\n    &#125;;\n\n \tgetAge.<span class=\"hljs-title function_\">apply</span>(shi, []); <span class=\"hljs-comment\">// this, 指向了 shi 这个对象，参数为空</span>\n    <span class=\"hljs-comment\">//getAge.apply(EASON, []);</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(getAge.<span class=\"hljs-title function_\">apply</span>(shi,[]));\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(getAge.<span class=\"hljs-title function_\">apply</span>(xiaoming,[]));</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-number\">20</span>\n<span class=\"hljs-number\">12</span></code></pre>\n\n\n\n<hr>\n<h2 id=\"5、内部对象\"><a href=\"#5、内部对象\" class=\"headerlink\" title=\"5、内部对象\"></a>5、内部对象</h2><blockquote>\n<p>标准对象</p>\n</blockquote>\n<p>JavaScript 中的<strong>所有事物</strong>都是对象：字符串、数字、数组、日期，等等。</p>\n<h3 id=\"5-1、Date\"><a href=\"#5-1、Date\" class=\"headerlink\" title=\"5.1、Date\"></a>5.1、Date</h3><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 基本使用</span>\nnow.<span class=\"hljs-title function_\">getFullYear</span>(); <span class=\"hljs-comment\">// 年</span>\nnow.<span class=\"hljs-title function_\">getMonth</span>(); <span class=\"hljs-comment\">// 月 0~11 没有12月</span>\nnow.<span class=\"hljs-title function_\">getDate</span>(); <span class=\"hljs-comment\">// 日</span>\nnow.<span class=\"hljs-title function_\">getDay</span>(); <span class=\"hljs-comment\">// 星期几</span>\nnow.<span class=\"hljs-title function_\">getHours</span>(); <span class=\"hljs-comment\">// 时</span>\nnow.<span class=\"hljs-title function_\">getMinutes</span>(); <span class=\"hljs-comment\">// 分</span>\nnow.<span class=\"hljs-title function_\">getSeconds</span>(); <span class=\"hljs-comment\">// 秒</span>\n<span class=\"hljs-comment\">// 使用js获取时间一般使用时间戳，因为其它是可以更改的</span>\nnow.<span class=\"hljs-title function_\">getTime</span>(); <span class=\"hljs-comment\">// 时间戳（1970年1月1日按时区到现在的毫秒值）</span>\n<span class=\"hljs-comment\">// 转化时间格式</span>\nnow.<span class=\"hljs-title function_\">toLocaleString</span>();\n<span class=\"hljs-comment\">//返回值：&quot;2022/6/2 21:33:10&quot; </span></code></pre>\n\n\n\n<h3 id=\"5-2、JSON\"><a href=\"#5-2、JSON\" class=\"headerlink\" title=\"5.2、JSON\"></a>5.2、JSON</h3><blockquote>\n<p>json 是什么</p>\n</blockquote>\n<p>早期，所有数据传输习惯使用 XML 文件！</p>\n<ul>\n<li>JSON（JavaScript Object Notation, JS 对象简谱）是一种轻量级的数据交换格式。</li>\n<li>简洁和清晰的层次结构使得JSON成为理想的数据交换语言。</li>\n<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>\n</ul>\n<p>在JavaScript一切皆为对象、任何 js 支持的类型都可以用 JSON 来表示；</p>\n<p>格式：</p>\n<ul>\n<li>对象都用 {}</li>\n<li>数组都用 []</li>\n<li>所有的键值对都是用 key : value</li>\n</ul>\n<p>JSON 字符串和 JS 对象的转化</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> user = &#123;\n    name : <span class=\"hljs-string\">&quot;shiwei&quot;</span>,\n    age : <span class=\"hljs-number\">3</span>,\n    sex : <span class=\"hljs-string\">&#x27;男&#x27;</span>\n  &#125;\n  \n  <span class=\"hljs-comment\">//对象转化为json字符串---&gt;&#123;&quot;name&quot;:&quot;shiwei&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;</span>\n  <span class=\"hljs-keyword\">var</span> jsonUser = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(user)\n  \n  <span class=\"hljs-comment\">//json 字符串转化为对象  参数为 json 字符串</span>\n  <span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-string\">&#x27;&quot;name&quot;:&quot;shiwei&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#x27;</span>)\n</code></pre>\n\n<p>JSON 和 JS 对象的区别</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> obj = &#123;<span class=\"hljs-attr\">a</span>:<span class=\"hljs-string\">&#x27;hello&#x27;</span>, <span class=\"hljs-attr\">b</span>:<span class=\"hljs-string\">&#x27;hi&#x27;</span>&#125;;\n<span class=\"hljs-keyword\">var</span> json = <span class=\"hljs-string\">&#x27;&#123;&quot;a&quot;:&quot;hello&quot;, &quot;b&quot;:&quot;hi&quot;&#125;&#x27;</span> <span class=\"hljs-comment\">// json 是个字符串（本质就是一堆字符串解析）</span></code></pre>\n\n<h3 id=\"5-3、Ajax\"><a href=\"#5-3、Ajax\" class=\"headerlink\" title=\"5.3、Ajax\"></a>5.3、Ajax</h3><ul>\n<li>原生的 js 写法    xhr 异步请求</li>\n<li>jQuery封装好的 方法 $(“#name”).ajax(“”)</li>\n<li>axios 请求</li>\n</ul>\n<hr>\n<h2 id=\"6、面向对象编程\"><a href=\"#6、面向对象编程\" class=\"headerlink\" title=\"6、面向对象编程\"></a>6、面向对象编程</h2><blockquote>\n<h4 id=\"原型对象\"><a href=\"#原型对象\" class=\"headerlink\" title=\"原型对象\"></a>原型对象</h4></blockquote>\n<p>javaScript 、Java、c# 。。。。面向对象；javaScript有些区别！</p>\n<ul>\n<li>类：模板</li>\n<li>对象：具体的实例</li>\n</ul>\n<p>在 JavaScript 这个需要大家换一下思维方式！</p>\n<p>原型：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Student</span> = &#123;\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;a&quot;</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-attr\">run</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> +<span class=\"hljs-string\">&quot;run&quot;</span>)\n    &#125;\n&#125;;\n<span class=\"hljs-keyword\">var</span> xiaoming = &#123;\n    <span class=\"hljs-attr\">name</span>:xiaoming\n&#125;;\n\nxiaoming.<span class=\"hljs-property\">_proto_</span> = <span class=\"hljs-title class_\">Student</span>;\n<span class=\"hljs-comment\">// 小明的原型是Student,可以使用Student中的run方法</span>\n<span class=\"hljs-comment\">// 简单说就是小明继承了它爹Student</span>\n\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Bird</span> = &#123;\n    <span class=\"hljs-attr\">fly</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> + <span class=\"hljs-string\">&quot;fly....&quot;</span>);\n    &#125;\n&#125;;\n\n<span class=\"hljs-comment\">// 小明的原型是 Bird</span>\nxiaoming.<span class=\"hljs-property\">__proto__</span> = <span class=\"hljs-title class_\">Bird</span>;</code></pre>\n\n<blockquote>\n<h4 id=\"class-继承\"><a href=\"#class-继承\" class=\"headerlink\" title=\"class 继承\"></a>class 继承</h4></blockquote>\n<p>class 关键字，是在  ES6  引入的</p>\n<p>1、定义一个类，属性，方法</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//定义一个学生类</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) &#123;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n    &#125;\n\n    <span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>)\n    &#125;\n   \n&#125;\n<span class=\"hljs-keyword\">var</span> xiaoming = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;xiaoming&quot;</span>);\n<span class=\"hljs-keyword\">var</span> xiaohong = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;xiaohong&quot;</span>);\nxiaoming.<span class=\"hljs-title function_\">hello</span>()\n</code></pre>\n\n<p>2、继承</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> &#123;\n\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) &#123;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n    &#125;\n\n    <span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>)\n    &#125;\n    \n&#125;\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">xiaoStudent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Student</span> &#123;\n    \n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, grade</span>) &#123;\n        <span class=\"hljs-variable language_\">super</span>(name);\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">grade</span> = grade;\n    &#125;\n\n    <span class=\"hljs-title function_\">myGrade</span>(<span class=\"hljs-params\"></span>) &#123;\n        <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;我是小学生&#x27;</span>)\n    &#125;\n    \n&#125;\n\n<span class=\"hljs-keyword\">var</span> xiaoming = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-string\">&quot;xiaoming&quot;</span>);\n<span class=\"hljs-keyword\">var</span> xiaohong = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">xiaoStudent</span>(<span class=\"hljs-string\">&quot;xiaohong&quot;</span>, <span class=\"hljs-number\">1</span>);\nxiaoming.<span class=\"hljs-title function_\">hello</span>()\n<span class=\"hljs-comment\">// xiaohong 的原型对象（他爹）是Student</span></code></pre>\n\n<blockquote>\n<h4 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h4><h4 id=\"博客圆—javascript——原型与原型链\"><a href=\"#博客圆—javascript——原型与原型链\" class=\"headerlink\" title=\"博客圆—javascript——原型与原型链\"></a><a href=\"https://www.cnblogs.com/loveyaxin/p/11151586.html\">博客圆—javascript——原型与原型链</a></h4></blockquote>\n<p>简单的回顾一下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。——摘自《javascript高级程序设计》</p>\n<p><strong>在查找属性的时候查到 Object.prototype 就可以停止查找了，所以就不会无线查找，不会一直循环了。</strong></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/850375/201907/850375-20190708153139577-2105652554.png\" alt=\"原型链\"></p>\n<hr>\n<h2 id=\"7、操作BOM对象-重点\"><a href=\"#7、操作BOM对象-重点\" class=\"headerlink\" title=\"7、操作BOM对象(重点)\"></a>7、操作BOM对象(重点)</h2><p>BOM：浏览器对象模型</p>\n<blockquote>\n<p>浏览器介绍</p>\n</blockquote>\n<p>JavaScript 和 浏览器关系？</p>\n<p>JavaScript诞生就是为了能够让他在浏览器中运行</p>\n<p>BOM：浏览器对象模型（内核）</p>\n<ul>\n<li>IE 6–11</li>\n<li>Chrome</li>\n<li>Safari</li>\n<li>Firefox</li>\n<li>Opera</li>\n</ul>\n<blockquote>\n<p>window (重要)</p>\n</blockquote>\n<p>window 代表浏览器窗口</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-literal\">undefined</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">outerHeight</span>  <span class=\"hljs-comment\">// 外部</span>\n<span class=\"hljs-number\">995</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">outerWidth</span>\n<span class=\"hljs-number\">1018</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerHeight</span>  <span class=\"hljs-comment\">// 内部</span>\n<span class=\"hljs-number\">444</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">innerWidth</span>\n<span class=\"hljs-number\">1003</span></code></pre>\n\n\n\n<blockquote>\n<p>Navigator  （不建议使用）</p>\n</blockquote>\n<p>navigator, 封装了浏览器的信息</p>\n<p>大写Navigator是类，小写<code>navigator</code>是对象</p>\n<pre><code class=\"hljs javascript\">navigator.<span class=\"hljs-property\">appName</span>    <span class=\"hljs-comment\">// 名字</span>\n<span class=\"hljs-string\">&#x27;Netscape&#x27;</span>\nnavigator.<span class=\"hljs-property\">appVersion</span> <span class=\"hljs-comment\">// 版本号</span>\n<span class=\"hljs-string\">&#x27;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span>\nnavigator.<span class=\"hljs-property\">userAgent</span>  <span class=\"hljs-comment\">// 用户浏览信息</span>\n<span class=\"hljs-string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span>\nnavigator.<span class=\"hljs-property\">platform</span>   <span class=\"hljs-comment\">// 运行浏览器的操作系统和（或）硬件平台</span>\n<span class=\"hljs-string\">&#x27;Win32&#x27;</span></code></pre>\n\n<p>大多数时候，我们不会使用<code>navogator</code>对象，因为会被人为修改，不建议使用这些属性来判断和编写代码</p>\n<blockquote>\n<p>screen </p>\n</blockquote>\n<p>代表计算机屏幕尺寸</p>\n<pre><code class=\"hljs javascript\">screen.<span class=\"hljs-property\">width</span>\n<span class=\"hljs-number\">2048</span> \n<span class=\"hljs-comment\">// 2048 px</span>\nscreen.<span class=\"hljs-property\">height</span>\n<span class=\"hljs-number\">1152</span>\n<span class=\"hljs-comment\">// 1152 px</span></code></pre>\n\n<blockquote>\n<p>location (重要)</p>\n</blockquote>\n<p>location 代表当前页面的URL信息</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//location 的一些属性</span>\n<span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>\n<span class=\"hljs-attr\">hostname</span>: <span class=\"hljs-string\">&quot;www.baidu.com&quot;</span>\n<span class=\"hljs-attr\">href</span>: <span class=\"hljs-string\">&quot;https://www.baidu.com/&quot;</span>\n<span class=\"hljs-attr\">protocol</span>: <span class=\"hljs-string\">&quot;https:&quot;</span>\n<span class=\"hljs-attr\">reload</span>: ƒ <span class=\"hljs-title function_\">reload</span>() <span class=\"hljs-comment\">//刷新网页</span>\n\n<span class=\"hljs-comment\">//设置新地址</span>\nlocation.<span class=\"hljs-title function_\">assign</span>(<span class=\"hljs-string\">&quot;https://app2004.acapp.acwing.com.cn/user/account/login/&quot;</span>)</code></pre>\n\n\n\n<blockquote>\n<p>document (内容 DOM， 文档对象模型)</p>\n</blockquote>\n<p>document 代表当前的页面，HTML DOM文档树</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span>\n<span class=\"hljs-string\">&#x27;百度一下，你就知道&#x27;</span>\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">title</span> = <span class=\"hljs-string\">&quot;努力挣钱和吃饭，要不然就不被xh&quot;</span>  <span class=\"hljs-comment\">// 自定义title，也就是导航栏的内容</span>\n<span class=\"hljs-string\">&#x27;努力挣钱和吃饭，要不然就不被xh&#x27;</span></code></pre>\n\n<p><strong>获取具体的文档树节点</strong></p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dl</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dt</span>&gt;</span>Java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dt</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>JavaSE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span>JavaEE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dl</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> dl = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;app&#x27;</span>)</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n\n\n<blockquote>\n<p> 获取cookie（客户端的本地信息）</p>\n</blockquote>\n<p>不安全，会被劫持</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;aa.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--恶意人员：获取你的cookie上传到他的服务器--&gt;</span></code></pre>\n\n<p>服务器端可以设置 cookie: httpOnly       (只读，不能修改)</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">cookie</span></code></pre>\n\n<pre><code class=\"hljs 1c\">&gt; &#x27;BIDUPSID=B<span class=\"hljs-number\">8683</span>E2A9F4C1F<span class=\"hljs-number\">388691</span>1F077A0A<span class=\"hljs-number\">1102</span>; PSTM=<span class=\"hljs-number\">1641251220</span>; BAIDUID=B<span class=\"hljs-number\">8683</span>E2A9F4C1F38C<span class=\"hljs-number\">871142</span>E273C<span class=\"hljs-number\">7207</span>:SL=0:NR=10:FG=1; BD_UPN=<span class=\"hljs-number\">12314753</span>; H_PS_PSSID=<span class=\"hljs-number\">3754</span>5_<span class=\"hljs-number\">3654</span>9_<span class=\"hljs-number\">3735</span>2_<span class=\"hljs-number\">3481</span>2_<span class=\"hljs-number\">3748</span>6_<span class=\"hljs-number\">3680</span>7_<span class=\"hljs-number\">3740</span>4_<span class=\"hljs-number\">3678</span>6_<span class=\"hljs-number\">3753</span>6_<span class=\"hljs-number\">3749</span>8_<span class=\"hljs-number\">2635</span>0_<span class=\"hljs-number\">3744</span>6; BDORZ=B490B5EBF6F3CD402E515D22BCDA<span class=\"hljs-number\">1598</span>; BAIDUID_BFESS=B<span class=\"hljs-number\">8683</span>E2A9F4C1F38C<span class=\"hljs-number\">871142</span>E273C<span class=\"hljs-number\">7207</span>:SL=0:NR=10:FG=1; COOKIE_SESSION=<span class=\"hljs-number\">3405</span>_0_9_9_21_10_1_0_9_8_6_5_<span class=\"hljs-number\">390667</span>8_0_0_0_<span class=\"hljs-number\">1665840096</span>_0_<span class=\"hljs-number\">1665843476</span>%7C9%<span class=\"hljs-number\">232539</span>_5_<span class=\"hljs-number\">1661438898</span>%7C2; delPer=0; BD_CK_SAM=1; PSINO=3; BA_HECTOR=<span class=\"hljs-number\">0520</span>al2g8lak8kal018hfbi01hklg8v1b; ZFY=R0v3mV:A3kLPM6oCMd:BJTo:AI7QCqLLzIgO:AI2tY0ITn8:C; H_PS_645EC=b8fb%2B7%2BrcoNJDZr2BnHdidyAlYZ0SNLLncRf%2BB45PZnt59SFK6fbf98nhvQ; BD_HOME=1&#x27;</code></pre>\n\n<p>劫持cookie原理</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;a.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--恶意人员： 获取你的cookie上传到他的服务器上--&gt;</span></code></pre>\n\n<p>服务器端可以设置cookie:httpOnly</p>\n<blockquote>\n<p>history (不建议使用)</p>\n</blockquote>\n<p>history 代表浏览器的历史纪录</p>\n<pre><code class=\"hljs javascript\">history.<span class=\"hljs-title function_\">back</span>() <span class=\"hljs-comment\">// 返回</span>\nhistory.<span class=\"hljs-title function_\">forward</span>() <span class=\"hljs-comment\">// 前进</span></code></pre>\n\n\n\n<hr>\n<h2 id=\"8、操作DOM对象-重点\"><a href=\"#8、操作DOM对象-重点\" class=\"headerlink\" title=\"8、操作DOM对象(重点)\"></a>8、操作DOM对象(重点)</h2><p>DOM：文档对象模型（一颗文档树 – 将嵌套关系看成树形结构）。</p>\n<blockquote>\n<p>核心</p>\n</blockquote>\n<p>浏览器网页就是一个Dom树形结构</p>\n<ul>\n<li><p>更新：更新Dom节点</p>\n</li>\n<li><p>遍历Dom节点：得到Dom节点</p>\n</li>\n<li><p>删除：删除一个Dom节点</p>\n</li>\n<li><p>添加：添加一个新的节点</p>\n</li>\n</ul>\n<p>要制作一个Dom节点，就必须要先获得这个Dom节点</p>\n<blockquote>\n<p>获得Dom节点</p>\n</blockquote>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;father&quot;</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>标题一<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>p1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span>p2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-meta\"></span></span>\n<span class=\"hljs-meta\"><span class=\"language-javascript\">\t\t\t&#x27;use strict&#x27;</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 对应css选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 标签选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> h1 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;h1&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// ID选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;p1&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 类选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> p2 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>(<span class=\"hljs-string\">&#x27;p2&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// ID选择器</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> father = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;father&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 获取父节点下所有子节点属性</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> childrens = father.<span class=\"hljs-property\">children</span>;</span>\n<span class=\"language-javascript\">            <span class=\"hljs-comment\">// var childrens = father.children[index]; index 可打印出来</span></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 获取第一个节点</span></span>\n<span class=\"language-javascript\">\t\t\tp1.<span class=\"hljs-property\">firstChild</span>;</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// 获取最后一个节点</span></span>\n<span class=\"language-javascript\">\t\t\tp1.<span class=\"hljs-property\">lastChild</span>;</span>\n<span class=\"language-javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n\n<p>这是原生代码，之后尽量使用jQuery()；</p>\n<blockquote>\n<p>更新节点</p>\n</blockquote>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;id1&quot;</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> id1 = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;id1&#x27;</span>)</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<blockquote>\n<p>操作文本（动态操作页面样式）</p>\n</blockquote>\n<pre><code class=\"hljs html\">// ID选择器\nvar p1 = document.getElementById(&#x27;p1&#x27;);\n// 向p1更新值\np1.innerText = &#x27;xhxhxhxhxhmyl&#x27;;  // 更新内容\n// 向p1更新html\np1.innerHTML = <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">strong</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">strong</span>&gt;</span>;  // 可以解析HTML文本</code></pre>\n\n<blockquote>\n<p>操作 JS</p>\n</blockquote>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 设置字体颜色</span>\np1.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">color</span> = <span class=\"hljs-string\">&#x27;yellow&#x27;</span>; <span class=\"hljs-comment\">// 属性使用 字符串 包裹</span>\n<span class=\"hljs-comment\">// 设置字体大小</span>\np1.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontSize</span> = <span class=\"hljs-string\">&#x27;50px&#x27;</span>;  <span class=\"hljs-comment\">// - 转 驼峰命名问题</span>\n<span class=\"hljs-comment\">// 设置内边距</span>\np1.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">padding</span> = <span class=\"hljs-string\">&#x27;2em&#x27;</span>; <span class=\"hljs-comment\">// 盒子模型，内边距</span></code></pre>\n\n<blockquote>\n<p>删除节点</p>\n</blockquote>\n<p><strong>删除节点的步骤</strong>：先获取父节点，再通过父节点删除自己</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;father&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>标题一<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span>p1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p2&quot;</span>&gt;</span>p2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsById</span>(<span class=\"hljs-string\">&#x27;p1&#x27;</span>)</span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> father = p1.<span class=\"hljs-property\">parentElement</span>;</span>\n<span class=\"language-javascript\">    father.<span class=\"hljs-title function_\">removeChild</span>(self)</span>\n<span class=\"language-javascript\">    </span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 删除是一个动态的过程</span></span>\n<span class=\"language-javascript\">    father.<span class=\"hljs-title function_\">removeChild</span>(father.<span class=\"hljs-property\">children</span>[<span class=\"hljs-number\">0</span>])</span>\n<span class=\"language-javascript\">    father.<span class=\"hljs-title function_\">removeChild</span>(father.<span class=\"hljs-property\">children</span>[<span class=\"hljs-number\">1</span>])</span>\n<span class=\"language-javascript\">    father.<span class=\"hljs-title function_\">removeChild</span>(father.<span class=\"hljs-property\">children</span>[<span class=\"hljs-number\">2</span>])</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<p>注意：删除多个节点时，children是在时刻变化的（类似于vector，会动态变短），删除节点的时候一定要注意</p>\n<blockquote>\n<p>插入节点</p>\n</blockquote>\n<p>我们获得了某个Dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素，但是这个Dom节点已经存在元素了，我们就不能这么做，因为会覆盖。</p>\n<p>一般通过追加操作。</p>\n<p>追加（已存在）</p>\n<pre><code class=\"hljs html\">// 将 id = &quot;js&quot; 移到（追加）到 list 里面 （因为存在id js，所以是移动）\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">P</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;js&quot;</span>&gt;</span>JavaScript<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">P</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;list&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;se&quot;</span>&gt;</span>JavaSE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;ee&quot;</span>&gt;</span>JavaEE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;me&quot;</span>&gt;</span>JavaME<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> js = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;js&#x27;</span>); <span class=\"hljs-comment\">// 已存在的节点</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;list&#x27;</span>);</span>\n<span class=\"language-javascript\">    list.<span class=\"hljs-title function_\">appendChild</span>(js); <span class=\"hljs-comment\">//追加到后面</span></span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<p>创建一个新的标签，实现插入（任何位置都可以）</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> js = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;js&#x27;</span>);<span class=\"hljs-comment\">//已经存在的节点</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;list&#x27;</span>);</span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">//通过JS创建一个新节点</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> newP = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;p&#x27;</span>)<span class=\"hljs-comment\">//创建一个p标签</span></span>\n<span class=\"language-javascript\">    newP.<span class=\"hljs-property\">id</span> = <span class=\"hljs-string\">&#x27;newP&#x27;</span>;</span>\n<span class=\"language-javascript\">    newP.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&#x27;Hello,shiwei&#x27;</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 创建一个新的标签，并插入</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// list.appendChild(newp); // 这里可在页面内写</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 创建一个新标签节点</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> myScript = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;script&#x27;</span>);</span>\n<span class=\"language-javascript\">    myScript.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;type&#x27;</span>,<span class=\"hljs-string\">&#x27;text/javascript&#x27;</span>)</span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// list.appendChild(myScript);  // 这里可在页面内写</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 可以创建一个 Style 标签</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-keyword\">var</span> myStyle = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;style&#x27;</span>);<span class=\"hljs-comment\">// 可以创建一个空Style标签</span></span>\n<span class=\"language-javascript\">    myStyle.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;type&#x27;</span>,<span class=\"hljs-string\">&#x27;text/css&#x27;</span>);</span>\n<span class=\"language-javascript\">    myStyle.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">&#x27;body&#123;background-color:chartreuse&#125;&#x27;</span>;<span class=\"hljs-comment\">// 设置标签内容</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 将创建的标签放到 head 里面 [0] 是类似于编号</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;head&#x27;</span>)[<span class=\"hljs-number\">0</span>].<span class=\"hljs-title function_\">appendChild</span>(myStyle)</span>\n<span class=\"language-javascript\">    </span>\n<span class=\"language-javascript\">\t<span class=\"hljs-comment\">// 总结 就是 js 可以干 html 和 css 的所有事情</span></span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<p>插入指定位置（insertBefore）</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> ee = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;ee&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> js = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;js&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> list = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;list&#x27;</span>);\n\n<span class=\"hljs-comment\">//要包含的节点,insertBefore(newNode,targetNode)</span>\nlist.<span class=\"hljs-title function_\">insertBefore</span>(js,ee);</code></pre>\n\n\n\n<hr>\n<h2 id=\"9、操作表单-验证\"><a href=\"#9、操作表单-验证\" class=\"headerlink\" title=\"9、操作表单 (验证)\"></a>9、操作表单 (验证)</h2><blockquote>\n<p>表单是什么 ？  form  DOM树</p>\n</blockquote>\n<ul>\n<li>文本框 text</li>\n<li>下拉框 select</li>\n<li>单选框 radio</li>\n<li>多选框 checkbox</li>\n<li>隐藏域 hidden</li>\n<li>密码框 password</li>\n</ul>\n<blockquote>\n<p> 表单的目的：提交信息</p>\n</blockquote>\n<p>获得要提交的信息</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;post&quot;</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>用户名：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n  <span class=\"hljs-comment\">&lt;!--多选框的值，就是定义好的value--&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>性别：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;man&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;boy&quot;</span>&gt;</span>男\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;gender&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;woman&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;girl&quot;</span>&gt;</span>女\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">  <span class=\"hljs-keyword\">var</span> input_text = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;username&#x27;</span>);</span>\n<span class=\"language-javascript\">  </span>\n<span class=\"language-javascript\">  <span class=\"hljs-keyword\">var</span> boy_radio = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;boy&#x27;</span>);</span>\n<span class=\"language-javascript\">  <span class=\"hljs-keyword\">var</span> girl_radio = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;girl&#x27;</span>);</span>\n<span class=\"language-javascript\">  </span>\n<span class=\"language-javascript\">  <span class=\"hljs-comment\">// 得到输入框的值</span></span>\n<span class=\"language-javascript\">  <span class=\"hljs-comment\">// input_text.value</span></span>\n<span class=\"language-javascript\">  <span class=\"hljs-comment\">// 修改输入框的值</span></span>\n<span class=\"language-javascript\">  input_text.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&#x27;123&#x27;</span></span>\n<span class=\"language-javascript\">  </span>\n<span class=\"language-javascript\">  <span class=\"hljs-comment\">// 对于单选框，多选框等固定的值，boy_radio.value只能取到当前的值，不能确定是否被选</span></span>\n<span class=\"language-javascript\">  boy_radio.<span class=\"hljs-property\">checked</span>;<span class=\"hljs-comment\">// 查看返回的结果，是否为true，如果为true，则被选中。</span></span>\n<span class=\"language-javascript\">  girl_radio.<span class=\"hljs-property\">checked</span> = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">// 赋值</span></span>\n<span class=\"language-javascript\">  </span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<blockquote>\n<p>提交表单 ，md5加密密码 表单优化 （我记得 y总 的 jwt 也可以加密 + 验证，比较主流）</p>\n</blockquote>\n<h3 id=\"9-1-按钮绑定\"><a href=\"#9-1-按钮绑定\" class=\"headerlink\" title=\"9.1 按钮绑定\"></a>9.1 按钮绑定</h3><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- md5的工具类 --&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;form1&quot;</span>  <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;POST&quot;</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>用户名：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>密码：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;input_password&quot;</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;md5_password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- 按钮绑定事件 当被点击触发事件--&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;f()&quot;</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-meta\"></span></span>\n<span class=\"hljs-meta\"><span class=\"language-javascript\">\t\t&#x27;use strict&#x27;</span></span>\n<span class=\"language-javascript\">\t\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">validate</span>(<span class=\"hljs-params\"></span>) &#123;</span>\n<span class=\"language-javascript\">\t        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">confirm</span>(<span class=\"hljs-string\">&quot;是否提交&quot;</span>))&#123;</span>\n<span class=\"language-javascript\">\t            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span>\n<span class=\"language-javascript\">\t        &#125;<span class=\"hljs-keyword\">else</span>&#123;</span>\n<span class=\"language-javascript\">\t            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;</span>\n<span class=\"language-javascript\">\t        &#125;</span>\n<span class=\"language-javascript\">        &#125;</span>\n<span class=\"language-javascript\">\t\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) &#123;</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> uname = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;username&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> input_pwd = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;input_password&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">var</span> pwd = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;md5_password&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-comment\">// md5算法加密</span></span>\n<span class=\"language-javascript\">\t\t\tpwd.<span class=\"hljs-property\">value</span> = <span class=\"hljs-title function_\">md5</span>(input_pwd.<span class=\"hljs-property\">value</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(uname.<span class=\"hljs-property\">value</span> + <span class=\"hljs-string\">&#x27;+&#x27;</span> + pwd.<span class=\"hljs-property\">value</span>);</span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-title function_\">validate</span>())&#123;</span>\n<span class=\"language-javascript\">            \t<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;form1&quot;</span>).<span class=\"hljs-title function_\">submit</span>();</span>\n<span class=\"language-javascript\">        \t&#125;</span>\n<span class=\"language-javascript\">\t\t&#125;</span>\n<span class=\"language-javascript\">\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></code></pre>\n\n<h3 id=\"9-2-表单绑定\"><a href=\"#9-2-表单绑定\" class=\"headerlink\" title=\"9.2 表单绑定\"></a>9.2 表单绑定</h3><p>md5加密验证，表单优化（设置 hidden 类型）</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- 表单绑定提交事件 --&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- onsubmit=绑定一个提交检测的函数， --&gt;</span>\n\t\t<span class=\"hljs-comment\">&lt;!-- 将这个结果返回给表单，使用onsubmit接收 --&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;#&quot;</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;POST&quot;</span> <span class=\"hljs-attr\">onsubmit</span>=<span class=\"hljs-string\">&quot;return f()&quot;</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>用户名：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>\n\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>密码：<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;input_password&quot;</span>&gt;</span>\n\t\t\t\t<span class=\"hljs-comment\">&lt;!-- 使用隐藏域提交，这样密码框不会在提交一瞬间变长，直接是面试常考 --&gt;</span>\n\t\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;hidden&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;md5_password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\t\t\t<span class=\"hljs-comment\">&lt;!-- 绑定事件 当被点击触发事件--&gt;</span>\n\t\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> &gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n\t\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span>\n\n\t\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"><span class=\"hljs-meta\"></span></span>\n<span class=\"hljs-meta\"><span class=\"language-javascript\">\t\t\t&#x27;use strict&#x27;</span></span>\n<span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">\t\t\t<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>) &#123;</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-keyword\">var</span> uname = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;username&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-keyword\">var</span> input_pwd = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;input_password&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-keyword\">var</span> pwd = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;md5_password&#x27;</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-comment\">// md5算法</span></span>\n<span class=\"language-javascript\">\t\t\t\tpwd.<span class=\"hljs-property\">value</span> = <span class=\"hljs-title function_\">md5</span>(input_pwd.<span class=\"hljs-property\">value</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-comment\">// 提交到控制台</span></span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(uname.<span class=\"hljs-property\">value</span> + <span class=\"hljs-string\">&#x27;+&#x27;</span> + pwd.<span class=\"hljs-property\">value</span>);</span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-comment\">// 允许表单提交true，阻止表单提交false</span></span>\n<span class=\"language-javascript\">                <span class=\"hljs-comment\">// 可以自己校验判断表单内容</span></span>\n<span class=\"language-javascript\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;</span>\n<span class=\"language-javascript\">\t\t\t&#125;</span>\n<span class=\"language-javascript\">\t\t</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n\n\n\n<hr>\n<h2 id=\"10、jQuery\"><a href=\"#10、jQuery\" class=\"headerlink\" title=\"10、jQuery\"></a>10、jQuery</h2><p>jQuery（write less, do more.）</p>\n<p>jQuery库， 里面存在大量的JavaScript函数（说白了就是封装函数，直接调用，方便使用）</p>\n<blockquote>\n<p>获取jQuery</p>\n</blockquote>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--在线cdn--&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- 公式： $(selector).action --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;test-jquery&quot;</span>&gt;</span>点我<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">        <span class=\"hljs-comment\">// document.getElementById(&#x27;id&#x27;);</span></span>\n<span class=\"language-javascript\">        <span class=\"hljs-comment\">// 选择器就是css的选择器</span></span>\n<span class=\"language-javascript\">        $(<span class=\"hljs-string\">&#x27;#test-jquery&#x27;</span>).<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123;</span>\n<span class=\"language-javascript\">            <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;hello,jquery&#x27;</span>);</span>\n<span class=\"language-javascript\">        &#125;)</span>\n<span class=\"language-javascript\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n\n<p>注意:在线cdn</p>\n<blockquote>\n<p>选择器</p>\n</blockquote>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 原生js，选择器少，麻烦</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 标签</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>();</span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// id</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>();</span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 类</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByClassName</span>()</span>\n<span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// jQuery  css中的选择器 它 都能用</span></span>\n<span class=\"language-javascript\">    $(<span class=\"hljs-string\">&#x27;p&#x27;</span>).<span class=\"hljs-title function_\">click</span>(); <span class=\"hljs-comment\">// 标签选择器</span></span>\n<span class=\"language-javascript\">    $(<span class=\"hljs-string\">&#x27;#id1&#x27;</span>).<span class=\"hljs-title function_\">click</span>(); <span class=\"hljs-comment\">// id选择器</span></span>\n<span class=\"language-javascript\">    $(<span class=\"hljs-string\">&#x27;.class&#x27;</span>).<span class=\"hljs-title function_\">click</span>(); <span class=\"hljs-comment\">// class选择器</span></span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<p>文档工具站  <a href=\"https://jquery.cuishifeng.cn/\">https://jquery.cuishifeng.cn/</a></p>\n<pre><code class=\"hljs javascript\">$(selector).<span class=\"hljs-title function_\">action</span>() <span class=\"hljs-comment\">// 常见用法</span></code></pre>\n\n\n\n<blockquote>\n<p>事件</p>\n</blockquote>\n<p>鼠标事件，键盘事件，其他事件</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span>\n<span class=\"language-css\">        <span class=\"hljs-selector-id\">#divMove</span>&#123;</span>\n<span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">500px</span>;</span>\n<span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">500px</span>;</span>\n<span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid red;</span>\n<span class=\"language-css\">        &#125;</span>\n<span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--要求：获取鼠标当前的一个坐标--&gt;</span>\nmouse:<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mouseMove&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;divMove&quot;</span>&gt;</span>\n    在这里移动鼠标试试\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 当网页元素加载完毕之后响应事件</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// $(document).ready(function () &#123;</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">//</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// &#125;)</span></span>\n<span class=\"language-javascript\">    <span class=\"hljs-comment\">// 其简写</span></span>\n<span class=\"language-javascript\">    $(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span>\n<span class=\"language-javascript\">        $(<span class=\"hljs-string\">&#x27;#divMove&#x27;</span>).<span class=\"hljs-title function_\">mousemove</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) &#123;</span>\n<span class=\"language-javascript\">            $(<span class=\"hljs-string\">&#x27;#mouseMove&#x27;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&#x27;x:&#x27;</span>+e.<span class=\"hljs-property\">pageX</span> + <span class=\"hljs-string\">&#x27;y:&#x27;</span>+e.<span class=\"hljs-property\">pageY</span>)</span>\n<span class=\"language-javascript\">        &#125;)</span>\n<span class=\"language-javascript\">    &#125;);</span>\n<span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n\n<blockquote>\n<p>操作DOM</p>\n</blockquote>\n<p><strong>节点文本操作</strong></p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// eg:</span>\n$(<span class=\"hljs-string\">&#x27;#ID li[name=1]&#x27;</span>).<span class=\"hljs-title function_\">text</span>(); <span class=\"hljs-comment\">// 获取ID中名字为1的li标签的值</span>\n$(<span class=\"hljs-string\">&#x27;#ID li[name=1]&#x27;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-number\">123</span>); <span class=\"hljs-comment\">// 设置ID中名字为1的li标签的值为123</span>\n$(<span class=\"hljs-string\">&#x27;#ID&#x27;</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>);  <span class=\"hljs-comment\">// 设置值</span>\n$(<span class=\"hljs-string\">&#x27;#ID li[name=1]&#x27;</span>).<span class=\"hljs-title function_\">css</span>(<span class=\"hljs-string\">&quot;color&quot;</span>,<span class=\"hljs-string\">&quot;red&quot;</span>);  <span class=\"hljs-comment\">// 设置CSS属性</span>\n<span class=\"hljs-comment\">// eg:</span>\n$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">text</span>(); <span class=\"hljs-comment\">// 设置值</span>\n$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&#x27;设置值&#x27;</span>); <span class=\"hljs-comment\">// 设置值</span>\n$(<span class=\"hljs-string\">&#x27;#test-ul&#x27;</span>).<span class=\"hljs-title function_\">html</span>(); <span class=\"hljs-comment\">// 获得值</span>\n$(<span class=\"hljs-string\">&#x27;#test-ul&#x27;</span>).<span class=\"hljs-title function_\">html</span>(<span class=\"hljs-string\">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>); <span class=\"hljs-comment\">// 设置值</span></code></pre>\n\n<p><strong>css操作</strong></p>\n<pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">css</span>(<span class=\"hljs-string\">&quot;color&quot;</span>,<span class=\"hljs-string\">&quot;red&quot;</span>);</code></pre>\n\n<p><strong>元素的显示和隐藏：</strong>本质增加了属性 <strong>display = none;</strong></p>\n<pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">show</span>()\n$(<span class=\"hljs-string\">&#x27;#test-ul li[name=python]&#x27;</span>).<span class=\"hljs-title function_\">hide</span>()</code></pre>\n\n<p><strong>娱乐测试</strong></p>\n<pre><code class=\"hljs javascript\">$(<span class=\"hljs-variable language_\">window</span>).<span class=\"hljs-title function_\">width</span>()\n$(<span class=\"hljs-variable language_\">window</span>).<span class=\"hljs-title function_\">height</span>()</code></pre>\n\n\n\n<blockquote>\n<p>小技巧</p>\n</blockquote>\n<p>1、如何巩固JS (看jQuery源码，看游戏源码)</p>\n<p>2、巩固HTML,CSS (扒网站)</p>\n<hr>\n<h2 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h2><h3 id=\"箭头函数的this\"><a href=\"#箭头函数的this\" class=\"headerlink\" title=\"箭头函数的this\"></a>箭头函数的this</h3><p>箭头函数会屏蔽 当前匿名函数 的 this,如果调用了this,则是调他的父级的this。</p>\n<blockquote>\n<p>下面的代码就是 调用了window的this</p>\n</blockquote>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">birth</span> = <span class=\"hljs-number\">2002</span>;\n    <span class=\"hljs-keyword\">let</span> kuangshen = &#123;\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;石玮&#x27;</span>,\n        <span class=\"hljs-attr\">birth</span>: <span class=\"hljs-number\">2002</span>,\n        <span class=\"hljs-attr\">age</span>:<span class=\"hljs-function\">() =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">let</span> now = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getFullYear</span>();\n            <span class=\"hljs-keyword\">return</span> now - <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">birth</span>;\n        &#125;\n    &#125;;\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(kuangshen.<span class=\"hljs-title function_\">age</span>());</code></pre>\n\n<pre><code class=\"hljs javascript\"><span class=\"hljs-number\">20</span></code></pre>\n"},{"title":"Linux 常用命令","index_img":"/img/article/Linux.jpg","date":"2022-08-15T13:00:00.000Z","_content":"### 主要内容来源：\n[AcWing_Linux_基础课](https://www.acwing.com/activity/content/punch_the_clock/57/)\n\n#### 常用命令介绍(y总总结)\n```\n(1) ctrl c: 取消命令，并且换行\n(2) ctrl u: 清空本行命令\n(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项\n(4) ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件\n(5) pwd: 显示当前路径\n(6) cd XXX: 进入XXX目录下, cd .. 返回上层目录\n(7) cp XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt\n(8) mkdir XXX: 创建目录XXX\n(9) rm XXX: 删除普通文件;  rm XXX -r: 删除文件夹\n(10) mv XXX YYY: 将XXX文件移动到YYY，和cp命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令\n(11) touch XXX: 创建一个文件\n(12) cat XXX: 展示文件XXX中的内容\n(13) 复制文本\n    windows/Linux下：Ctrl + insert，Mac下：command + c\n(14) 粘贴文本\n    windows/Linux下：Shift + insert，Mac下：command + v\n```\n#### 自己总结\n```\nShmilysw\n一：绝对路径 从根开始描述这个路径(有\"/\")\n二：相对路径 从当前路径开始来描述你的这个路径(无\"/\")\n区别：看开头是不是有 \"/\"\n/：根目录\n..：上一级目录\n.：当前目录\n~/：hmoe目录\nctrl+c：跳过当前行\nctrl+u：清空当前行\nhistory：显示历史操作\ntab：自动补全命令或路径（只有一种选项，多种选项再按一次tab会显示可以补全的命令）\nls：显示当前文件夹下的文件\n    ls -l：显示详细信息\n    ls -lh：人性化输出(将详细信息里面的大小换成多少K)\n    ls -a：显示所有文件（包括隐藏文件）  ls-A：不显示当前目录和上层目录（.和..）\ncd：进入一个路径\n    cd ..：返回上一层目录\n    cd -：返回到上一次操作所留在的目录(上一次所待过的地方)\ncp a/tmp.txt b：把a文件夹下的tmp.txt复制到b文件夹\n    cp a/tmp.txt b/tmp1.txt：把a文件夹下的tmp.txt复制到b文件夹并且重命名为tmp1.txt\n    cp a b -r：把文件夹a复制到文件夹b中\nmkdir a（路径也可以）：创建一个文件夹a\n    mkdir a/b/c：创建一个文件目录a/b/c\nrm 文件1 文件2 文件3 ……：删除文件\n    rm 文件1 -r：删除文件夹\n    rm 文件夹1/*：删除文件夹1下的所有文件但不删除文件夹1\ntouch a：创建一个文件a\nmv a/tmp.txt b：把a文件夹下的tmp.txt文件移动到b\n    mv a/tmp.txt b/tmp2.txt：把a文件夹下的tmp.txt文件移动到b并且重命名为tmp2.txt\ncat 文件1：显示文件1的内容\nvim 文件名：进入文件\n\n复制文本：windows/Linux下：Ctrl + insert，Mac下：command + c\n粘贴文本：windows/Linux下：Shift + insert，Mac下：command + v\n```\n{% blockquote %}\n作者：Shmilysw\n链接：https://www.acwing.com/activity/content/code/content/3858182/\n来源：AcWing\n{% endblockquote %}","source":"_posts/LIinux-常用命令.md","raw":"---\ntitle: Linux 常用命令\ncategories:\n- 操作系统\ntags: [Linux, 操作系统]\nindex_img: /img/article/Linux.jpg\ndate: 2022-8-15 21:00:00\n\n---\n### 主要内容来源：\n[AcWing_Linux_基础课](https://www.acwing.com/activity/content/punch_the_clock/57/)\n\n#### 常用命令介绍(y总总结)\n```\n(1) ctrl c: 取消命令，并且换行\n(2) ctrl u: 清空本行命令\n(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项\n(4) ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件\n(5) pwd: 显示当前路径\n(6) cd XXX: 进入XXX目录下, cd .. 返回上层目录\n(7) cp XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt\n(8) mkdir XXX: 创建目录XXX\n(9) rm XXX: 删除普通文件;  rm XXX -r: 删除文件夹\n(10) mv XXX YYY: 将XXX文件移动到YYY，和cp命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令\n(11) touch XXX: 创建一个文件\n(12) cat XXX: 展示文件XXX中的内容\n(13) 复制文本\n    windows/Linux下：Ctrl + insert，Mac下：command + c\n(14) 粘贴文本\n    windows/Linux下：Shift + insert，Mac下：command + v\n```\n#### 自己总结\n```\nShmilysw\n一：绝对路径 从根开始描述这个路径(有\"/\")\n二：相对路径 从当前路径开始来描述你的这个路径(无\"/\")\n区别：看开头是不是有 \"/\"\n/：根目录\n..：上一级目录\n.：当前目录\n~/：hmoe目录\nctrl+c：跳过当前行\nctrl+u：清空当前行\nhistory：显示历史操作\ntab：自动补全命令或路径（只有一种选项，多种选项再按一次tab会显示可以补全的命令）\nls：显示当前文件夹下的文件\n    ls -l：显示详细信息\n    ls -lh：人性化输出(将详细信息里面的大小换成多少K)\n    ls -a：显示所有文件（包括隐藏文件）  ls-A：不显示当前目录和上层目录（.和..）\ncd：进入一个路径\n    cd ..：返回上一层目录\n    cd -：返回到上一次操作所留在的目录(上一次所待过的地方)\ncp a/tmp.txt b：把a文件夹下的tmp.txt复制到b文件夹\n    cp a/tmp.txt b/tmp1.txt：把a文件夹下的tmp.txt复制到b文件夹并且重命名为tmp1.txt\n    cp a b -r：把文件夹a复制到文件夹b中\nmkdir a（路径也可以）：创建一个文件夹a\n    mkdir a/b/c：创建一个文件目录a/b/c\nrm 文件1 文件2 文件3 ……：删除文件\n    rm 文件1 -r：删除文件夹\n    rm 文件夹1/*：删除文件夹1下的所有文件但不删除文件夹1\ntouch a：创建一个文件a\nmv a/tmp.txt b：把a文件夹下的tmp.txt文件移动到b\n    mv a/tmp.txt b/tmp2.txt：把a文件夹下的tmp.txt文件移动到b并且重命名为tmp2.txt\ncat 文件1：显示文件1的内容\nvim 文件名：进入文件\n\n复制文本：windows/Linux下：Ctrl + insert，Mac下：command + c\n粘贴文本：windows/Linux下：Shift + insert，Mac下：command + v\n```\n{% blockquote %}\n作者：Shmilysw\n链接：https://www.acwing.com/activity/content/code/content/3858182/\n来源：AcWing\n{% endblockquote %}","slug":"LIinux-常用命令","published":1,"updated":"2022-08-16T08:47:11.457Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgdh3tv50003ccvzarug6vh7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"主要内容来源：\"><a href=\"#主要内容来源：\" class=\"headerlink\" title=\"主要内容来源：\"></a>主要内容来源：</h3><p><a href=\"https://www.acwing.com/activity/content/punch_the_clock/57/\">AcWing_Linux_基础课</a></p>\n<h4 id=\"常用命令介绍-y总总结\"><a href=\"#常用命令介绍-y总总结\" class=\"headerlink\" title=\"常用命令介绍(y总总结)\"></a>常用命令介绍(y总总结)</h4><div class=\"code-wrapper\"><pre><code class=\"hljs bash\">(1) ctrl c: 取消命令，并且换行\n(2) ctrl u: 清空本行命令\n(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项\n(4) <span class=\"hljs-built_in\">ls</span>: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件\n(5) <span class=\"hljs-built_in\">pwd</span>: 显示当前路径\n(6) <span class=\"hljs-built_in\">cd</span> XXX: 进入XXX目录下, <span class=\"hljs-built_in\">cd</span> .. 返回上层目录\n(7) <span class=\"hljs-built_in\">cp</span> XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt\n(8) <span class=\"hljs-built_in\">mkdir</span> XXX: 创建目录XXX\n(9) <span class=\"hljs-built_in\">rm</span> XXX: 删除普通文件;  <span class=\"hljs-built_in\">rm</span> XXX -r: 删除文件夹\n(10) <span class=\"hljs-built_in\">mv</span> XXX YYY: 将XXX文件移动到YYY，和<span class=\"hljs-built_in\">cp</span>命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令\n(11) <span class=\"hljs-built_in\">touch</span> XXX: 创建一个文件\n(12) <span class=\"hljs-built_in\">cat</span> XXX: 展示文件XXX中的内容\n(13) 复制文本\n    windows/Linux下：Ctrl + insert，Mac下：<span class=\"hljs-built_in\">command</span> + c\n(14) 粘贴文本\n    windows/Linux下：Shift + insert，Mac下：<span class=\"hljs-built_in\">command</span> + v</code></pre></div>\n<h4 id=\"自己总结\"><a href=\"#自己总结\" class=\"headerlink\" title=\"自己总结\"></a>自己总结</h4><div class=\"code-wrapper\"><pre><code class=\"hljs bash\">Shmilysw\n一：绝对路径 从根开始描述这个路径(有<span class=\"hljs-string\">&quot;/&quot;</span>)\n二：相对路径 从当前路径开始来描述你的这个路径(无<span class=\"hljs-string\">&quot;/&quot;</span>)\n区别：看开头是不是有 <span class=\"hljs-string\">&quot;/&quot;</span>\n/：根目录\n..：上一级目录\n.：当前目录\n~/：hmoe目录\nctrl+c：跳过当前行\nctrl+u：清空当前行\n<span class=\"hljs-built_in\">history</span>：显示历史操作\ntab：自动补全命令或路径（只有一种选项，多种选项再按一次tab会显示可以补全的命令）\n<span class=\"hljs-built_in\">ls</span>：显示当前文件夹下的文件\n    <span class=\"hljs-built_in\">ls</span> -l：显示详细信息\n    <span class=\"hljs-built_in\">ls</span> -lh：人性化输出(将详细信息里面的大小换成多少K)\n    <span class=\"hljs-built_in\">ls</span> -a：显示所有文件（包括隐藏文件）  ls-A：不显示当前目录和上层目录（.和..）\n<span class=\"hljs-built_in\">cd</span>：进入一个路径\n    <span class=\"hljs-built_in\">cd</span> ..：返回上一层目录\n    <span class=\"hljs-built_in\">cd</span> -：返回到上一次操作所留在的目录(上一次所待过的地方)\n<span class=\"hljs-built_in\">cp</span> a/tmp.txt b：把a文件夹下的tmp.txt复制到b文件夹\n    <span class=\"hljs-built_in\">cp</span> a/tmp.txt b/tmp1.txt：把a文件夹下的tmp.txt复制到b文件夹并且重命名为tmp1.txt\n    <span class=\"hljs-built_in\">cp</span> a b -r：把文件夹a复制到文件夹b中\n<span class=\"hljs-built_in\">mkdir</span> a（路径也可以）：创建一个文件夹a\n    <span class=\"hljs-built_in\">mkdir</span> a/b/c：创建一个文件目录a/b/c\n<span class=\"hljs-built_in\">rm</span> 文件1 文件2 文件3 ……：删除文件\n    <span class=\"hljs-built_in\">rm</span> 文件1 -r：删除文件夹\n    <span class=\"hljs-built_in\">rm</span> 文件夹1/*：删除文件夹1下的所有文件但不删除文件夹1\n<span class=\"hljs-built_in\">touch</span> a：创建一个文件a\n<span class=\"hljs-built_in\">mv</span> a/tmp.txt b：把a文件夹下的tmp.txt文件移动到b\n    <span class=\"hljs-built_in\">mv</span> a/tmp.txt b/tmp2.txt：把a文件夹下的tmp.txt文件移动到b并且重命名为tmp2.txt\n<span class=\"hljs-built_in\">cat</span> 文件1：显示文件1的内容\nvim 文件名：进入文件\n\n复制文本：windows/Linux下：Ctrl + insert，Mac下：<span class=\"hljs-built_in\">command</span> + c\n粘贴文本：windows/Linux下：Shift + insert，Mac下：<span class=\"hljs-built_in\">command</span> + v</code></pre></div>\n<blockquote><p>作者：Shmilysw<br>链接：<a href=\"https://www.acwing.com/activity/content/code/content/3858182/\">https://www.acwing.com/activity/content/code/content/3858182/</a><br>来源：AcWing</p>\n</blockquote>","site":{"data":{}},"wordcount":1407,"excerpt":"","more":"<h3 id=\"主要内容来源：\"><a href=\"#主要内容来源：\" class=\"headerlink\" title=\"主要内容来源：\"></a>主要内容来源：</h3><p><a href=\"https://www.acwing.com/activity/content/punch_the_clock/57/\">AcWing_Linux_基础课</a></p>\n<h4 id=\"常用命令介绍-y总总结\"><a href=\"#常用命令介绍-y总总结\" class=\"headerlink\" title=\"常用命令介绍(y总总结)\"></a>常用命令介绍(y总总结)</h4><pre><code class=\"hljs bash\">(1) ctrl c: 取消命令，并且换行\n(2) ctrl u: 清空本行命令\n(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项\n(4) <span class=\"hljs-built_in\">ls</span>: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件\n(5) <span class=\"hljs-built_in\">pwd</span>: 显示当前路径\n(6) <span class=\"hljs-built_in\">cd</span> XXX: 进入XXX目录下, <span class=\"hljs-built_in\">cd</span> .. 返回上层目录\n(7) <span class=\"hljs-built_in\">cp</span> XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt\n(8) <span class=\"hljs-built_in\">mkdir</span> XXX: 创建目录XXX\n(9) <span class=\"hljs-built_in\">rm</span> XXX: 删除普通文件;  <span class=\"hljs-built_in\">rm</span> XXX -r: 删除文件夹\n(10) <span class=\"hljs-built_in\">mv</span> XXX YYY: 将XXX文件移动到YYY，和<span class=\"hljs-built_in\">cp</span>命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令\n(11) <span class=\"hljs-built_in\">touch</span> XXX: 创建一个文件\n(12) <span class=\"hljs-built_in\">cat</span> XXX: 展示文件XXX中的内容\n(13) 复制文本\n    windows/Linux下：Ctrl + insert，Mac下：<span class=\"hljs-built_in\">command</span> + c\n(14) 粘贴文本\n    windows/Linux下：Shift + insert，Mac下：<span class=\"hljs-built_in\">command</span> + v</code></pre>\n<h4 id=\"自己总结\"><a href=\"#自己总结\" class=\"headerlink\" title=\"自己总结\"></a>自己总结</h4><pre><code class=\"hljs bash\">Shmilysw\n一：绝对路径 从根开始描述这个路径(有<span class=\"hljs-string\">&quot;/&quot;</span>)\n二：相对路径 从当前路径开始来描述你的这个路径(无<span class=\"hljs-string\">&quot;/&quot;</span>)\n区别：看开头是不是有 <span class=\"hljs-string\">&quot;/&quot;</span>\n/：根目录\n..：上一级目录\n.：当前目录\n~/：hmoe目录\nctrl+c：跳过当前行\nctrl+u：清空当前行\n<span class=\"hljs-built_in\">history</span>：显示历史操作\ntab：自动补全命令或路径（只有一种选项，多种选项再按一次tab会显示可以补全的命令）\n<span class=\"hljs-built_in\">ls</span>：显示当前文件夹下的文件\n    <span class=\"hljs-built_in\">ls</span> -l：显示详细信息\n    <span class=\"hljs-built_in\">ls</span> -lh：人性化输出(将详细信息里面的大小换成多少K)\n    <span class=\"hljs-built_in\">ls</span> -a：显示所有文件（包括隐藏文件）  ls-A：不显示当前目录和上层目录（.和..）\n<span class=\"hljs-built_in\">cd</span>：进入一个路径\n    <span class=\"hljs-built_in\">cd</span> ..：返回上一层目录\n    <span class=\"hljs-built_in\">cd</span> -：返回到上一次操作所留在的目录(上一次所待过的地方)\n<span class=\"hljs-built_in\">cp</span> a/tmp.txt b：把a文件夹下的tmp.txt复制到b文件夹\n    <span class=\"hljs-built_in\">cp</span> a/tmp.txt b/tmp1.txt：把a文件夹下的tmp.txt复制到b文件夹并且重命名为tmp1.txt\n    <span class=\"hljs-built_in\">cp</span> a b -r：把文件夹a复制到文件夹b中\n<span class=\"hljs-built_in\">mkdir</span> a（路径也可以）：创建一个文件夹a\n    <span class=\"hljs-built_in\">mkdir</span> a/b/c：创建一个文件目录a/b/c\n<span class=\"hljs-built_in\">rm</span> 文件1 文件2 文件3 ……：删除文件\n    <span class=\"hljs-built_in\">rm</span> 文件1 -r：删除文件夹\n    <span class=\"hljs-built_in\">rm</span> 文件夹1/*：删除文件夹1下的所有文件但不删除文件夹1\n<span class=\"hljs-built_in\">touch</span> a：创建一个文件a\n<span class=\"hljs-built_in\">mv</span> a/tmp.txt b：把a文件夹下的tmp.txt文件移动到b\n    <span class=\"hljs-built_in\">mv</span> a/tmp.txt b/tmp2.txt：把a文件夹下的tmp.txt文件移动到b并且重命名为tmp2.txt\n<span class=\"hljs-built_in\">cat</span> 文件1：显示文件1的内容\nvim 文件名：进入文件\n\n复制文本：windows/Linux下：Ctrl + insert，Mac下：<span class=\"hljs-built_in\">command</span> + c\n粘贴文本：windows/Linux下：Shift + insert，Mac下：<span class=\"hljs-built_in\">command</span> + v</code></pre>\n<blockquote><p>作者：Shmilysw<br>链接：<a href=\"https://www.acwing.com/activity/content/code/content/3858182/\">https://www.acwing.com/activity/content/code/content/3858182/</a><br>来源：AcWing</p>\n</blockquote>"},{"title":"LeetCode 2376. 统计特殊整数","index_img":"/img/article/leetcode.jpg","date":"2022-08-15T14:00:00.000Z","_content":"### 数位DP | 暴力 | 模板\n#### [原题连接](https://leetcode.cn/problems/count-special-integers/)\n#### 题目:\n{% blockquote %}\n   **如果一个正整数每一个数位都是互不相同的,我们称它是特殊整数,给你一个正整数 n ，** \n   **请你返回区间 [1, n] 之间特殊整数的数目。**\n{% endblockquote %}\n\n##### 示例 1:\n```\n输入：n = 20\n输出：19\n解释：1 到 20 之间所有整数除了 11 以外都是特殊整数。所以总共有 19 个特殊整数。\n```\n##### 示例 2：\n```\n输入：n = 5\n输出：5\n解释：1 到 5 所有整数都是特殊整数。\n```\n##### 示例 3：\n```\n输入：n = 135\n输出：110\n解释：从 1 到 135 总共有 110 个整数是特殊整数。\n不特殊的部分数字为：22 ，114 和 131 。\n```\n#### 数据范围：\n\n+ $1$ <= $n$ <= $2$ $*$ $10^{9}$\n\n##### 方法一：\n#### [思路讲解](https://www.bilibili.com/video/BV1wv4y1c71n?spm_id_from=333.999.0.0&vd_source=bed1b37cf07540813685e4deaa965427)\n```\nclass Solution {\npublic:\n    int countSpecialNumbers(int n) {\n        vector<int> nums;\n        while (n) nums.push_back(n % 10), n /= 10;\n        int res = 0;\n        for (int i = 1; i < nums.size() ; i ++ ) { // 长度比 n 小的\n            int t = 9;\n            for (int j = 0, u = 9; j < i - 1 ; j ++ , u -- )\n                t *= u;\n            res += t;\n        }\n        // cout << res << endl;\n        reverse(nums.begin(), nums.end());\n        bool st[10] = {0};\n        for (int i = 0; i < nums.size() ; i ++ ) {\n            for (int j = !i; j < nums[i] ; j ++ ) {\n                if (st[j]) continue;\n                int t = 1;\n                for (int k = 0, u = 9 - i; k < nums.size() - i - 1 ; k ++ , u -- )\n                // 剩下k位，和u个数字可以填\n                    t *= u;\n                res += t;\n            }\n\n            if (st[nums[i]]) break; // 和前面数字重复，那就没有这个分支了，退出\n            st[nums[i]] = true;\n        }\n        set<int> hash(nums.begin(), nums.end()); // 枚举最后一条链\n        if (hash.size() == nums.size()) res ++ ;\n\n        return res;\n    }\n};\n```\n##### 方法二：\n暴力枚举：\n暴力也可以过，但不太好！$1804ms$\n复杂度： **$O((log_{10}n)!)$**\n共有 **$O(log_{10}n)$** 个数位，故需要 **$O((log_{10}n)!)$** 的时间枚举。\n```\nclass Solution {\npublic:\n    typedef long long LL;\n    int ans = 0;\n    LL m;\n    int vis[14] = {0};\n    void dfs(LL v) {\n        if (v > m) return;\n        ans ++ ;\n        // cout << v << \" \";\n        for (int i = 0; i < 10 ; i ++ ) {\n            if (vis[i]) continue;\n            vis[i] = 1;\n            dfs(v * 10 + i);\n            vis[i] = 0;\n        }\n    }\n    int countSpecialNumbers(int n) {\n        m = n;\n        for (int i = 1; i < 10 ; i ++ ) {\n            vis[i] = 1;\n            dfs(i);\n            vis[i] = 0;\n        }\n        return ans;\n    }\n};\n```","source":"_posts/LeetCode 2376. 统计特殊整数.md","raw":"---\ntitle: LeetCode 2376. 统计特殊整数\ncategories:\n- LeetCode_算法题解\ntags: [LeetCode, 数位DP, 算法, 模板]\nindex_img: /img/article/leetcode.jpg\ndate: 2022-8-15 22:00:00\n\n---\n### 数位DP | 暴力 | 模板\n#### [原题连接](https://leetcode.cn/problems/count-special-integers/)\n#### 题目:\n{% blockquote %}\n   **如果一个正整数每一个数位都是互不相同的,我们称它是特殊整数,给你一个正整数 n ，** \n   **请你返回区间 [1, n] 之间特殊整数的数目。**\n{% endblockquote %}\n\n##### 示例 1:\n```\n输入：n = 20\n输出：19\n解释：1 到 20 之间所有整数除了 11 以外都是特殊整数。所以总共有 19 个特殊整数。\n```\n##### 示例 2：\n```\n输入：n = 5\n输出：5\n解释：1 到 5 所有整数都是特殊整数。\n```\n##### 示例 3：\n```\n输入：n = 135\n输出：110\n解释：从 1 到 135 总共有 110 个整数是特殊整数。\n不特殊的部分数字为：22 ，114 和 131 。\n```\n#### 数据范围：\n\n+ $1$ <= $n$ <= $2$ $*$ $10^{9}$\n\n##### 方法一：\n#### [思路讲解](https://www.bilibili.com/video/BV1wv4y1c71n?spm_id_from=333.999.0.0&vd_source=bed1b37cf07540813685e4deaa965427)\n```\nclass Solution {\npublic:\n    int countSpecialNumbers(int n) {\n        vector<int> nums;\n        while (n) nums.push_back(n % 10), n /= 10;\n        int res = 0;\n        for (int i = 1; i < nums.size() ; i ++ ) { // 长度比 n 小的\n            int t = 9;\n            for (int j = 0, u = 9; j < i - 1 ; j ++ , u -- )\n                t *= u;\n            res += t;\n        }\n        // cout << res << endl;\n        reverse(nums.begin(), nums.end());\n        bool st[10] = {0};\n        for (int i = 0; i < nums.size() ; i ++ ) {\n            for (int j = !i; j < nums[i] ; j ++ ) {\n                if (st[j]) continue;\n                int t = 1;\n                for (int k = 0, u = 9 - i; k < nums.size() - i - 1 ; k ++ , u -- )\n                // 剩下k位，和u个数字可以填\n                    t *= u;\n                res += t;\n            }\n\n            if (st[nums[i]]) break; // 和前面数字重复，那就没有这个分支了，退出\n            st[nums[i]] = true;\n        }\n        set<int> hash(nums.begin(), nums.end()); // 枚举最后一条链\n        if (hash.size() == nums.size()) res ++ ;\n\n        return res;\n    }\n};\n```\n##### 方法二：\n暴力枚举：\n暴力也可以过，但不太好！$1804ms$\n复杂度： **$O((log_{10}n)!)$**\n共有 **$O(log_{10}n)$** 个数位，故需要 **$O((log_{10}n)!)$** 的时间枚举。\n```\nclass Solution {\npublic:\n    typedef long long LL;\n    int ans = 0;\n    LL m;\n    int vis[14] = {0};\n    void dfs(LL v) {\n        if (v > m) return;\n        ans ++ ;\n        // cout << v << \" \";\n        for (int i = 0; i < 10 ; i ++ ) {\n            if (vis[i]) continue;\n            vis[i] = 1;\n            dfs(v * 10 + i);\n            vis[i] = 0;\n        }\n    }\n    int countSpecialNumbers(int n) {\n        m = n;\n        for (int i = 1; i < 10 ; i ++ ) {\n            vis[i] = 1;\n            dfs(i);\n            vis[i] = 0;\n        }\n        return ans;\n    }\n};\n```","slug":"LeetCode 2376. 统计特殊整数","published":1,"updated":"2022-12-21T04:10:51.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgdh3tvd0007ccvz31slfqqt","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"数位DP-暴力-模板\"><a href=\"#数位DP-暴力-模板\" class=\"headerlink\" title=\"数位DP | 暴力 | 模板\"></a>数位DP | 暴力 | 模板</h3><h4 id=\"原题连接\"><a href=\"#原题连接\" class=\"headerlink\" title=\"原题连接\"></a><a href=\"https://leetcode.cn/problems/count-special-integers/\">原题连接</a></h4><h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目:\"></a>题目:</h4><blockquote><p><strong>如果一个正整数每一个数位都是互不相同的,我们称它是特殊整数,给你一个正整数 n ，</strong><br><strong>请你返回区间 [1, n] 之间特殊整数的数目。</strong></p>\n</blockquote>\n\n<h5 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1:\"></a>示例 1:</h5><div class=\"code-wrapper\"><pre><code class=\"hljs tap\">输入：n = 20\n输出：19\n解释：1 到<span class=\"hljs-number\"> 20 </span>之间所有整数除了<span class=\"hljs-number\"> 11 </span>以外都是特殊整数。所以总共有<span class=\"hljs-number\"> 19 </span>个特殊整数。</code></pre></div>\n<h5 id=\"示例-2：\"><a href=\"#示例-2：\" class=\"headerlink\" title=\"示例 2：\"></a>示例 2：</h5><div class=\"code-wrapper\"><pre><code class=\"hljs abnf\">输入：n <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>\n输出：<span class=\"hljs-number\">5</span>\n解释：<span class=\"hljs-number\">1</span> 到 <span class=\"hljs-number\">5</span> 所有整数都是特殊整数。</code></pre></div>\n<h5 id=\"示例-3：\"><a href=\"#示例-3：\" class=\"headerlink\" title=\"示例 3：\"></a>示例 3：</h5><div class=\"code-wrapper\"><pre><code class=\"hljs tap\">输入：n = 135\n输出：110\n解释：从<span class=\"hljs-number\"> 1 </span>到<span class=\"hljs-number\"> 135 </span>总共有<span class=\"hljs-number\"> 110 </span>个整数是特殊整数。\n不特殊的部分数字为：22 ，114 和<span class=\"hljs-number\"> 131 </span>。</code></pre></div>\n<h4 id=\"数据范围：\"><a href=\"#数据范围：\" class=\"headerlink\" title=\"数据范围：\"></a>数据范围：</h4><ul>\n<li>$1$ &lt;= $n$ &lt;= $2$ $*$ $10^{9}$</li>\n</ul>\n<h5 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h5><h4 id=\"思路讲解\"><a href=\"#思路讲解\" class=\"headerlink\" title=\"思路讲解\"></a><a href=\"https://www.bilibili.com/video/BV1wv4y1c71n?spm_id_from=333.999.0.0&vd_source=bed1b37cf07540813685e4deaa965427\">思路讲解</a></h4><div class=\"code-wrapper\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">countSpecialNumbers</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;\n        vector&lt;<span class=\"hljs-type\">int</span>&gt; nums;\n        <span class=\"hljs-keyword\">while</span> (n) nums.<span class=\"hljs-built_in\">push_back</span>(n % <span class=\"hljs-number\">10</span>), n /= <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-type\">int</span> res = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>() ; i ++ ) &#123; <span class=\"hljs-comment\">// 长度比 n 小的</span>\n            <span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">9</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>, u = <span class=\"hljs-number\">9</span>; j &lt; i - <span class=\"hljs-number\">1</span> ; j ++ , u -- )\n                t *= u;\n            res += t;\n        &#125;\n        <span class=\"hljs-comment\">// cout &lt;&lt; res &lt;&lt; endl;</span>\n        <span class=\"hljs-built_in\">reverse</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>());\n        <span class=\"hljs-type\">bool</span> st[<span class=\"hljs-number\">10</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>() ; i ++ ) &#123;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = !i; j &lt; nums[i] ; j ++ ) &#123;\n                <span class=\"hljs-keyword\">if</span> (st[j]) <span class=\"hljs-keyword\">continue</span>;\n                <span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>, u = <span class=\"hljs-number\">9</span> - i; k &lt; nums.<span class=\"hljs-built_in\">size</span>() - i - <span class=\"hljs-number\">1</span> ; k ++ , u -- )\n                <span class=\"hljs-comment\">// 剩下k位，和u个数字可以填</span>\n                    t *= u;\n                res += t;\n            &#125;\n\n            <span class=\"hljs-keyword\">if</span> (st[nums[i]]) <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 和前面数字重复，那就没有这个分支了，退出</span>\n            st[nums[i]] = <span class=\"hljs-literal\">true</span>;\n        &#125;\n        <span class=\"hljs-function\">set&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">hash</span><span class=\"hljs-params\">(nums.begin(), nums.end())</span></span>; <span class=\"hljs-comment\">// 枚举最后一条链</span>\n        <span class=\"hljs-keyword\">if</span> (hash.<span class=\"hljs-built_in\">size</span>() == nums.<span class=\"hljs-built_in\">size</span>()) res ++ ;\n\n        <span class=\"hljs-keyword\">return</span> res;\n    &#125;\n&#125;;</code></pre></div>\n<h5 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h5><p>暴力枚举：<br>暴力也可以过，但不太好！$1804ms$<br>复杂度： <strong>$O((log_{10}n)!)$</strong><br>共有 <strong>$O(log_{10}n)$</strong> 个数位，故需要 <strong>$O((log_{10}n)!)$</strong> 的时间枚举。</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;\n    <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    LL m;\n    <span class=\"hljs-type\">int</span> vis[<span class=\"hljs-number\">14</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(LL v)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span> (v &gt; m) <span class=\"hljs-keyword\">return</span>;\n        ans ++ ;\n        <span class=\"hljs-comment\">// cout &lt;&lt; v &lt;&lt; &quot; &quot;;</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span> ; i ++ ) &#123;\n            <span class=\"hljs-keyword\">if</span> (vis[i]) <span class=\"hljs-keyword\">continue</span>;\n            vis[i] = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-built_in\">dfs</span>(v * <span class=\"hljs-number\">10</span> + i);\n            vis[i] = <span class=\"hljs-number\">0</span>;\n        &#125;\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">countSpecialNumbers</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;\n        m = n;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">10</span> ; i ++ ) &#123;\n            vis[i] = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-built_in\">dfs</span>(i);\n            vis[i] = <span class=\"hljs-number\">0</span>;\n        &#125;\n        <span class=\"hljs-keyword\">return</span> ans;\n    &#125;\n&#125;;</code></pre></div>","site":{"data":{}},"wordcount":1405,"excerpt":"","more":"<h3 id=\"数位DP-暴力-模板\"><a href=\"#数位DP-暴力-模板\" class=\"headerlink\" title=\"数位DP | 暴力 | 模板\"></a>数位DP | 暴力 | 模板</h3><h4 id=\"原题连接\"><a href=\"#原题连接\" class=\"headerlink\" title=\"原题连接\"></a><a href=\"https://leetcode.cn/problems/count-special-integers/\">原题连接</a></h4><h4 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目:\"></a>题目:</h4><blockquote><p><strong>如果一个正整数每一个数位都是互不相同的,我们称它是特殊整数,给你一个正整数 n ，</strong><br><strong>请你返回区间 [1, n] 之间特殊整数的数目。</strong></p>\n</blockquote>\n\n<h5 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1:\"></a>示例 1:</h5><pre><code class=\"hljs tap\">输入：n = 20\n输出：19\n解释：1 到<span class=\"hljs-number\"> 20 </span>之间所有整数除了<span class=\"hljs-number\"> 11 </span>以外都是特殊整数。所以总共有<span class=\"hljs-number\"> 19 </span>个特殊整数。</code></pre>\n<h5 id=\"示例-2：\"><a href=\"#示例-2：\" class=\"headerlink\" title=\"示例 2：\"></a>示例 2：</h5><pre><code class=\"hljs abnf\">输入：n <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>\n输出：<span class=\"hljs-number\">5</span>\n解释：<span class=\"hljs-number\">1</span> 到 <span class=\"hljs-number\">5</span> 所有整数都是特殊整数。</code></pre>\n<h5 id=\"示例-3：\"><a href=\"#示例-3：\" class=\"headerlink\" title=\"示例 3：\"></a>示例 3：</h5><pre><code class=\"hljs tap\">输入：n = 135\n输出：110\n解释：从<span class=\"hljs-number\"> 1 </span>到<span class=\"hljs-number\"> 135 </span>总共有<span class=\"hljs-number\"> 110 </span>个整数是特殊整数。\n不特殊的部分数字为：22 ，114 和<span class=\"hljs-number\"> 131 </span>。</code></pre>\n<h4 id=\"数据范围：\"><a href=\"#数据范围：\" class=\"headerlink\" title=\"数据范围：\"></a>数据范围：</h4><ul>\n<li>$1$ &lt;= $n$ &lt;= $2$ $*$ $10^{9}$</li>\n</ul>\n<h5 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h5><h4 id=\"思路讲解\"><a href=\"#思路讲解\" class=\"headerlink\" title=\"思路讲解\"></a><a href=\"https://www.bilibili.com/video/BV1wv4y1c71n?spm_id_from=333.999.0.0&vd_source=bed1b37cf07540813685e4deaa965427\">思路讲解</a></h4><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">countSpecialNumbers</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;\n        vector&lt;<span class=\"hljs-type\">int</span>&gt; nums;\n        <span class=\"hljs-keyword\">while</span> (n) nums.<span class=\"hljs-built_in\">push_back</span>(n % <span class=\"hljs-number\">10</span>), n /= <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-type\">int</span> res = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>() ; i ++ ) &#123; <span class=\"hljs-comment\">// 长度比 n 小的</span>\n            <span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">9</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>, u = <span class=\"hljs-number\">9</span>; j &lt; i - <span class=\"hljs-number\">1</span> ; j ++ , u -- )\n                t *= u;\n            res += t;\n        &#125;\n        <span class=\"hljs-comment\">// cout &lt;&lt; res &lt;&lt; endl;</span>\n        <span class=\"hljs-built_in\">reverse</span>(nums.<span class=\"hljs-built_in\">begin</span>(), nums.<span class=\"hljs-built_in\">end</span>());\n        <span class=\"hljs-type\">bool</span> st[<span class=\"hljs-number\">10</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.<span class=\"hljs-built_in\">size</span>() ; i ++ ) &#123;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = !i; j &lt; nums[i] ; j ++ ) &#123;\n                <span class=\"hljs-keyword\">if</span> (st[j]) <span class=\"hljs-keyword\">continue</span>;\n                <span class=\"hljs-type\">int</span> t = <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>, u = <span class=\"hljs-number\">9</span> - i; k &lt; nums.<span class=\"hljs-built_in\">size</span>() - i - <span class=\"hljs-number\">1</span> ; k ++ , u -- )\n                <span class=\"hljs-comment\">// 剩下k位，和u个数字可以填</span>\n                    t *= u;\n                res += t;\n            &#125;\n\n            <span class=\"hljs-keyword\">if</span> (st[nums[i]]) <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 和前面数字重复，那就没有这个分支了，退出</span>\n            st[nums[i]] = <span class=\"hljs-literal\">true</span>;\n        &#125;\n        <span class=\"hljs-function\">set&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">hash</span><span class=\"hljs-params\">(nums.begin(), nums.end())</span></span>; <span class=\"hljs-comment\">// 枚举最后一条链</span>\n        <span class=\"hljs-keyword\">if</span> (hash.<span class=\"hljs-built_in\">size</span>() == nums.<span class=\"hljs-built_in\">size</span>()) res ++ ;\n\n        <span class=\"hljs-keyword\">return</span> res;\n    &#125;\n&#125;;</code></pre>\n<h5 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h5><p>暴力枚举：<br>暴力也可以过，但不太好！$1804ms$<br>复杂度： <strong>$O((log_{10}n)!)$</strong><br>共有 <strong>$O(log_{10}n)$</strong> 个数位，故需要 <strong>$O((log_{10}n)!)$</strong> 的时间枚举。</p>\n<pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Solution</span> &#123;\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;\n    <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n    LL m;\n    <span class=\"hljs-type\">int</span> vis[<span class=\"hljs-number\">14</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(LL v)</span> </span>&#123;\n        <span class=\"hljs-keyword\">if</span> (v &gt; m) <span class=\"hljs-keyword\">return</span>;\n        ans ++ ;\n        <span class=\"hljs-comment\">// cout &lt;&lt; v &lt;&lt; &quot; &quot;;</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span> ; i ++ ) &#123;\n            <span class=\"hljs-keyword\">if</span> (vis[i]) <span class=\"hljs-keyword\">continue</span>;\n            vis[i] = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-built_in\">dfs</span>(v * <span class=\"hljs-number\">10</span> + i);\n            vis[i] = <span class=\"hljs-number\">0</span>;\n        &#125;\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">countSpecialNumbers</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>&#123;\n        m = n;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">10</span> ; i ++ ) &#123;\n            vis[i] = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-built_in\">dfs</span>(i);\n            vis[i] = <span class=\"hljs-number\">0</span>;\n        &#125;\n        <span class=\"hljs-keyword\">return</span> ans;\n    &#125;\n&#125;;</code></pre>"},{"title":"git&github的入门","index_img":"/img/article/git.jpg","date":"2023-03-25T09:15:30.000Z","_content":"\n## git&github入门\n\n#### 1. git介绍\n\n工作区：仓库的目录。工作区是独立于各个分支的。\n暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。\n版本库：存放所有已经提交到本地仓库的代码版本\n版本结构：树结构(倒着的有向树)，树中每个节点代表一个代码版本,树中有head位置,表示你当前操作的位置。\n\n工作区 ------> 暂存区(桥梁) ------>版本库\n\n#### 2. 演示ssh连接github\n  （1）创建SSHkey\n\t\t\t打开Git Bash，输入`ssh-keygen -t rsa`\n\t\t\t会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以\n\t\t\t在 C:\\Users\\“你的用户名”.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key\n  （2）添加key到github\n\t\t\tgithub->设置->SSH公钥\n\t\t\t把key粘贴进去，标题默认是本机的名字\n\n  （3）验证是否连接成功\n\n  ```\n  ssh -T git@github.com\n  Hi Shmilysw! You've successfully authenticated, but GitHub does not provide shell access. // 说明成功了\n  ```\n#### 3. 演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）\n  （1）添加用户名和邮箱\n  ```\n  git config --global user.name shiwei\n  git config --global user.email 1828045443@qq.com\n  \n  // 查看：\n cat .gitconfig\n[user]\n        name = shiwei\n        email = 1828045443@qq.com\n  ```\n  （2）创建空的项目（初始化仓库，将本地仓库和github仓库关联，将分支也关联）\n  ```\n  git init\n  git remote add origin git@github.com:Shmilysw/Learning.git // ssh\n  git pull --rebase origin master // 即可跟刚创建的线上远程仓库的默认分支master关联\n  git push -u origin master // 推送到github仓库\n  ```\n  （3）添加文件到仓库，并查看仓库状态，将修改的文件添加到暂存区内，提交版本\n  ```\n  vim readme.txt\n  git status    // 查看仓库状态 \n  git add 文件名 // git add . （全部加到暂存区）\n  git commit -m \"add readme.txt\"\n  ```\n  （4）在暂存区里删除内容（将文件从暂存区里拿出来，但是还是具有管理权），并对比仓库里的内容\n  ```\n  git restore --stage readme.txt\n  git diff readme.txt\n  ```\n  （5）查看当前当前节点之前的路径，版本的回退\n  ```\n  git log \n  git reset --hard 版本名前五个字符\n  ```\n  （6）创建分支（协同开发），切换分支，查看分支，合并分支，删除分支\n  ```\n  git checkout -b branch_name // 创建并切换到branch_name(dev)这个分支\n  git branch                  // 查看所有分支和当前所处分支\n  git checkout branch_name    // 切换到branch_name这个分支\n  git merge branch_name       // 将分支branch_name合并到当前分支上\n  git branch -d branch_name   // 删除本地仓库的branch_name分支\n  ```\n（7）将当前分支推送到远程仓库\n\n```\ngit push --set-upstream origin master // 第一次push的时候\ngit push -u // (第一次需要-u以后不需要)：将当前分支推送到远程仓库\n```\n\n（7）拉去项目到本地\n\n```\ngit clone git@github.com:Shmilysw/Learning.git // ssh \n```\n\n#### 4. github的基本介绍\n\n  ```\n代码托管平台\n  ```","source":"_posts/git&github的入门.md","raw":"---\ntitle: git&github的入门\ncategories:\n- git&github\ntags: [git, github, 学习]\nindex_img: /img/article/git.jpg\ndate: 2023-03-25 17:15:30\n\n---\n\n## git&github入门\n\n#### 1. git介绍\n\n工作区：仓库的目录。工作区是独立于各个分支的。\n暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。\n版本库：存放所有已经提交到本地仓库的代码版本\n版本结构：树结构(倒着的有向树)，树中每个节点代表一个代码版本,树中有head位置,表示你当前操作的位置。\n\n工作区 ------> 暂存区(桥梁) ------>版本库\n\n#### 2. 演示ssh连接github\n  （1）创建SSHkey\n\t\t\t打开Git Bash，输入`ssh-keygen -t rsa`\n\t\t\t会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以\n\t\t\t在 C:\\Users\\“你的用户名”.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key\n  （2）添加key到github\n\t\t\tgithub->设置->SSH公钥\n\t\t\t把key粘贴进去，标题默认是本机的名字\n\n  （3）验证是否连接成功\n\n  ```\n  ssh -T git@github.com\n  Hi Shmilysw! You've successfully authenticated, but GitHub does not provide shell access. // 说明成功了\n  ```\n#### 3. 演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）\n  （1）添加用户名和邮箱\n  ```\n  git config --global user.name shiwei\n  git config --global user.email 1828045443@qq.com\n  \n  // 查看：\n cat .gitconfig\n[user]\n        name = shiwei\n        email = 1828045443@qq.com\n  ```\n  （2）创建空的项目（初始化仓库，将本地仓库和github仓库关联，将分支也关联）\n  ```\n  git init\n  git remote add origin git@github.com:Shmilysw/Learning.git // ssh\n  git pull --rebase origin master // 即可跟刚创建的线上远程仓库的默认分支master关联\n  git push -u origin master // 推送到github仓库\n  ```\n  （3）添加文件到仓库，并查看仓库状态，将修改的文件添加到暂存区内，提交版本\n  ```\n  vim readme.txt\n  git status    // 查看仓库状态 \n  git add 文件名 // git add . （全部加到暂存区）\n  git commit -m \"add readme.txt\"\n  ```\n  （4）在暂存区里删除内容（将文件从暂存区里拿出来，但是还是具有管理权），并对比仓库里的内容\n  ```\n  git restore --stage readme.txt\n  git diff readme.txt\n  ```\n  （5）查看当前当前节点之前的路径，版本的回退\n  ```\n  git log \n  git reset --hard 版本名前五个字符\n  ```\n  （6）创建分支（协同开发），切换分支，查看分支，合并分支，删除分支\n  ```\n  git checkout -b branch_name // 创建并切换到branch_name(dev)这个分支\n  git branch                  // 查看所有分支和当前所处分支\n  git checkout branch_name    // 切换到branch_name这个分支\n  git merge branch_name       // 将分支branch_name合并到当前分支上\n  git branch -d branch_name   // 删除本地仓库的branch_name分支\n  ```\n（7）将当前分支推送到远程仓库\n\n```\ngit push --set-upstream origin master // 第一次push的时候\ngit push -u // (第一次需要-u以后不需要)：将当前分支推送到远程仓库\n```\n\n（7）拉去项目到本地\n\n```\ngit clone git@github.com:Shmilysw/Learning.git // ssh \n```\n\n#### 4. github的基本介绍\n\n  ```\n代码托管平台\n  ```","slug":"git&github的入门","published":1,"updated":"2023-03-25T09:26:08.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgdh3tvs000zccvz9gbndk1j","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"git-amp-github入门\"><a href=\"#git-amp-github入门\" class=\"headerlink\" title=\"git&amp;github入门\"></a>git&amp;github入门</h2><h4 id=\"1-git介绍\"><a href=\"#1-git介绍\" class=\"headerlink\" title=\"1. git介绍\"></a>1. git介绍</h4><p>工作区：仓库的目录。工作区是独立于各个分支的。<br>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。<br>版本库：存放所有已经提交到本地仓库的代码版本<br>版本结构：树结构(倒着的有向树)，树中每个节点代表一个代码版本,树中有head位置,表示你当前操作的位置。</p>\n<p>工作区 ——&gt; 暂存区(桥梁) ——&gt;版本库</p>\n<h4 id=\"2-演示ssh连接github\"><a href=\"#2-演示ssh连接github\" class=\"headerlink\" title=\"2. 演示ssh连接github\"></a>2. 演示ssh连接github</h4><p>  （1）创建SSHkey<br>            打开Git Bash，输入<code>ssh-keygen -t rsa</code><br>            会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以<br>            在 C:\\Users\\“你的用户名”.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key<br>  （2）添加key到github<br>            github-&gt;设置-&gt;SSH公钥<br>            把key粘贴进去，标题默认是本机的名字</p>\n<p>  （3）验证是否连接成功</p>\n  <div class=\"code-wrapper\"><pre><code class=\"hljs vbnet\">ssh -T git@github.com\nHi Shmilysw! You<span class=\"hljs-comment\">&#x27;ve successfully authenticated, but GitHub does not provide shell access. // 说明成功了</span></code></pre></div>\n<h4 id=\"3-演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）\"><a href=\"#3-演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）\" class=\"headerlink\" title=\"3. 演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）\"></a>3. 演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）</h4><p>  （1）添加用户名和邮箱<br>  <div class=\"code-wrapper\"><pre><code class=\"hljs stylus\">  git config <span class=\"hljs-attr\">--global</span> user<span class=\"hljs-selector-class\">.name</span> shiwei\n  git config <span class=\"hljs-attr\">--global</span> user<span class=\"hljs-selector-class\">.email</span> <span class=\"hljs-number\">1828045443</span>@qq<span class=\"hljs-selector-class\">.com</span>\n  \n  <span class=\"hljs-comment\">// 查看：</span>\n cat <span class=\"hljs-selector-class\">.gitconfig</span>\n<span class=\"hljs-selector-attr\">[user]</span>\n        name = shiwei\n        email = <span class=\"hljs-number\">1828045443</span>@qq.com</code></pre></div><br>  （2）创建空的项目（初始化仓库，将本地仓库和github仓库关联，将分支也关联）<br>  <div class=\"code-wrapper\"><pre><code class=\"hljs crmsh\">git init\ngit remote add origin git@github.com:Shmilysw/Learning.git // ssh\ngit pull --rebase origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">// 即可跟刚创建的线上远程仓库的默认分支master</span>关联\ngit push -u origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">// 推送到github</span>仓库</code></pre></div><br>  （3）添加文件到仓库，并查看仓库状态，将修改的文件添加到暂存区内，提交版本<br>  <div class=\"code-wrapper\"><pre><code class=\"hljs awk\">vim readme.txt\ngit status    <span class=\"hljs-regexp\">//</span> 查看仓库状态 \ngit add 文件名 <span class=\"hljs-regexp\">//</span> git add . （全部加到暂存区）\ngit commit -m <span class=\"hljs-string\">&quot;add readme.txt&quot;</span></code></pre></div><br>  （4）在暂存区里删除内容（将文件从暂存区里拿出来，但是还是具有管理权），并对比仓库里的内容<br>  <div class=\"code-wrapper\"><pre><code class=\"hljs stylus\">git restore <span class=\"hljs-attr\">--stage</span> readme<span class=\"hljs-selector-class\">.txt</span>\ngit diff readme.txt</code></pre></div><br>  （5）查看当前当前节点之前的路径，版本的回退<br>  <div class=\"code-wrapper\"><pre><code class=\"hljs pgsql\">git <span class=\"hljs-keyword\">log</span> \ngit <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard 版本名前五个字符</span></code></pre></div><br>  （6）创建分支（协同开发），切换分支，查看分支，合并分支，删除分支<br>  <div class=\"code-wrapper\"><pre><code class=\"hljs awk\">git checkout -b branch_name <span class=\"hljs-regexp\">//</span> 创建并切换到branch_name(dev)这个分支\ngit branch                  <span class=\"hljs-regexp\">//</span> 查看所有分支和当前所处分支\ngit checkout branch_name    <span class=\"hljs-regexp\">//</span> 切换到branch_name这个分支\ngit merge branch_name       <span class=\"hljs-regexp\">//</span> 将分支branch_name合并到当前分支上\ngit branch -d branch_name   <span class=\"hljs-regexp\">//</span> 删除本地仓库的branch_name分支</code></pre></div><br>（7）将当前分支推送到远程仓库</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs gams\">git push --<span class=\"hljs-keyword\">set</span>-upstream <span class=\"hljs-comment\">origin master</span> // 第一次<span class=\"hljs-comment\">push</span>的时候\ngit <span class=\"hljs-comment\">push -u</span> // <span class=\"hljs-comment\">(</span>第一次需要<span class=\"hljs-comment\">-u</span>以后不需要<span class=\"hljs-comment\">)</span>：将当前分支推送到远程仓库</code></pre></div>\n\n<p>（7）拉去项目到本地</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">git</span>@github.com:Shmilysw/Learning.git // ssh</code></pre></div>\n\n<h4 id=\"4-github的基本介绍\"><a href=\"#4-github的基本介绍\" class=\"headerlink\" title=\"4. github的基本介绍\"></a>4. github的基本介绍</h4>  <div class=\"code-wrapper\"><pre><code class=\"hljs\">代码托管平台</code></pre></div>","site":{"data":{}},"wordcount":1580,"excerpt":"","more":"<h2 id=\"git-amp-github入门\"><a href=\"#git-amp-github入门\" class=\"headerlink\" title=\"git&amp;github入门\"></a>git&amp;github入门</h2><h4 id=\"1-git介绍\"><a href=\"#1-git介绍\" class=\"headerlink\" title=\"1. git介绍\"></a>1. git介绍</h4><p>工作区：仓库的目录。工作区是独立于各个分支的。<br>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。<br>版本库：存放所有已经提交到本地仓库的代码版本<br>版本结构：树结构(倒着的有向树)，树中每个节点代表一个代码版本,树中有head位置,表示你当前操作的位置。</p>\n<p>工作区 ——&gt; 暂存区(桥梁) ——&gt;版本库</p>\n<h4 id=\"2-演示ssh连接github\"><a href=\"#2-演示ssh连接github\" class=\"headerlink\" title=\"2. 演示ssh连接github\"></a>2. 演示ssh连接github</h4><p>  （1）创建SSHkey<br>            打开Git Bash，输入<code>ssh-keygen -t rsa</code><br>            会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以<br>            在 C:\\Users\\“你的用户名”.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key<br>  （2）添加key到github<br>            github-&gt;设置-&gt;SSH公钥<br>            把key粘贴进去，标题默认是本机的名字</p>\n<p>  （3）验证是否连接成功</p>\n  <pre><code class=\"hljs vbnet\">ssh -T git@github.com\nHi Shmilysw! You<span class=\"hljs-comment\">&#x27;ve successfully authenticated, but GitHub does not provide shell access. // 说明成功了</span></code></pre>\n<h4 id=\"3-演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）\"><a href=\"#3-演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）\" class=\"headerlink\" title=\"3. 演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）\"></a>3. 演示git的基本操作（创建项目，提交上传项目，拉取项目，添加删除用户分支，等）</h4><p>  （1）添加用户名和邮箱<br>  <pre><code class=\"hljs stylus\">  git config <span class=\"hljs-attr\">--global</span> user<span class=\"hljs-selector-class\">.name</span> shiwei\n  git config <span class=\"hljs-attr\">--global</span> user<span class=\"hljs-selector-class\">.email</span> <span class=\"hljs-number\">1828045443</span>@qq<span class=\"hljs-selector-class\">.com</span>\n  \n  <span class=\"hljs-comment\">// 查看：</span>\n cat <span class=\"hljs-selector-class\">.gitconfig</span>\n<span class=\"hljs-selector-attr\">[user]</span>\n        name = shiwei\n        email = <span class=\"hljs-number\">1828045443</span>@qq.com</code></pre><br>  （2）创建空的项目（初始化仓库，将本地仓库和github仓库关联，将分支也关联）<br>  <pre><code class=\"hljs crmsh\">git init\ngit remote add origin git@github.com:Shmilysw/Learning.git // ssh\ngit pull --rebase origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">// 即可跟刚创建的线上远程仓库的默认分支master</span>关联\ngit push -u origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">// 推送到github</span>仓库</code></pre><br>  （3）添加文件到仓库，并查看仓库状态，将修改的文件添加到暂存区内，提交版本<br>  <pre><code class=\"hljs awk\">vim readme.txt\ngit status    <span class=\"hljs-regexp\">//</span> 查看仓库状态 \ngit add 文件名 <span class=\"hljs-regexp\">//</span> git add . （全部加到暂存区）\ngit commit -m <span class=\"hljs-string\">&quot;add readme.txt&quot;</span></code></pre><br>  （4）在暂存区里删除内容（将文件从暂存区里拿出来，但是还是具有管理权），并对比仓库里的内容<br>  <pre><code class=\"hljs stylus\">git restore <span class=\"hljs-attr\">--stage</span> readme<span class=\"hljs-selector-class\">.txt</span>\ngit diff readme.txt</code></pre><br>  （5）查看当前当前节点之前的路径，版本的回退<br>  <pre><code class=\"hljs pgsql\">git <span class=\"hljs-keyword\">log</span> \ngit <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard 版本名前五个字符</span></code></pre><br>  （6）创建分支（协同开发），切换分支，查看分支，合并分支，删除分支<br>  <pre><code class=\"hljs awk\">git checkout -b branch_name <span class=\"hljs-regexp\">//</span> 创建并切换到branch_name(dev)这个分支\ngit branch                  <span class=\"hljs-regexp\">//</span> 查看所有分支和当前所处分支\ngit checkout branch_name    <span class=\"hljs-regexp\">//</span> 切换到branch_name这个分支\ngit merge branch_name       <span class=\"hljs-regexp\">//</span> 将分支branch_name合并到当前分支上\ngit branch -d branch_name   <span class=\"hljs-regexp\">//</span> 删除本地仓库的branch_name分支</code></pre><br>（7）将当前分支推送到远程仓库</p>\n<pre><code class=\"hljs gams\">git push --<span class=\"hljs-keyword\">set</span>-upstream <span class=\"hljs-comment\">origin master</span> // 第一次<span class=\"hljs-comment\">push</span>的时候\ngit <span class=\"hljs-comment\">push -u</span> // <span class=\"hljs-comment\">(</span>第一次需要<span class=\"hljs-comment\">-u</span>以后不需要<span class=\"hljs-comment\">)</span>：将当前分支推送到远程仓库</code></pre>\n\n<p>（7）拉去项目到本地</p>\n<pre><code class=\"hljs crmsh\">git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">git</span>@github.com:Shmilysw/Learning.git // ssh</code></pre>\n\n<h4 id=\"4-github的基本介绍\"><a href=\"#4-github的基本介绍\" class=\"headerlink\" title=\"4. github的基本介绍\"></a>4. github的基本介绍</h4>  <pre><code class=\"hljs\">代码托管平台</code></pre>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-04-12T08:59:41.203Z","updated":"2022-08-14T16:51:38.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgdh3tvt0010ccvzd3b9frlr","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><div class=\"code-wrapper\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span></code></pre></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><div class=\"code-wrapper\"><pre><code class=\"hljs bash\">$ hexo server</code></pre></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><div class=\"code-wrapper\"><pre><code class=\"hljs bash\">$ hexo generate</code></pre></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><div class=\"code-wrapper\"><pre><code class=\"hljs bash\">$ hexo deploy</code></pre></div>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"wordcount":363,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"hljs bash\">$ hexo server</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"hljs bash\">$ hexo generate</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"hljs bash\">$ hexo deploy</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Hexo博客的使用总结","index_img":"/img/article/logo.jpg","date":"2022-12-21T03:14:59.000Z","_content":"\n# git 的使用\n\n### 使用git bash连接到gitee\n\n+ #### 1、创建SSHkey\n 打开Git Bash，输入ssh-keygen -t rsa\n 会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以\n 在 C:\\Users\\“你的用户名”\\.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key\n\n+ #### 2、添加key到Gitee\ngitee->设置->SSH公钥\n把key粘贴进去，标题默认是本机的名字\n\n+ #### 3、ssh链接\n ##### **我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh ~**\n ```\n git remote add gitee git@gitee.com:YourUserName/YourProjectName.git\n ```\n YourUserName和YourProjectName都是要具体看你自己的实际用户名和仓库名字\n 即可，可以通过git remote -v查看\n\n  ```\n  $ssh -T git@gitee.com\n  Hi XXX! You've successfully authenticated, but GITEE.COM does not provide shell access.\n\n  ```\n  eg:\n  ```\n  $ ssh -T git@gitee.com\n  Hi Shmilysw! You've successfully authenticated, but GITEE.COM does not provide shell access.\n  ```\n\n##### **其他都是些git的基本使用**\n\n```\ngit status // 查看工作台状态\ngit add . // 添加文件\ngit commit -m \"备注\" // 提交修改，并备注\ngit push // 推送至远端仓库\n\n```\n\n# Hexo 命令\n[Hexo文档](https://hexo.io/zh-cn/docs/)\n\n+ #### 添加一张md页面\n\n```\n$ hexo new [layout] <title>\n```\n新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n+ #### 本地查看效果\n```\n$ hexo server\n或\n$ hexo s\n```\n\n+ #### 生成静态文件\n```\n$ hexo generate\n或\n$ hexo g\n```\n\n+ #### 部署网站\n```\n$ hexo deploy\n或\n$ hexo d\n```\n\n+ #### 清除缓存文件\n```\n$ hexo clean\n```\n 清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n\n### 具体部署步骤\n+ git 进入项目文件下\n ```\n $ hexo clean\n \n $ hexo g\n \n $ hexo d\n ```\n\n+ 打开gitee仓库\n+ 点击服务\n+ 点击Gitee Pages 服务\n+ 进行部署更新\n+ 等待更新 ~~~\n\n# Fluid 主题\n\n##### 主题可以根据自己的偏好自己设置\n\n[Hexo Fluid 用户手册](https://hexo.fluid-dev.com/docs/)\n\n[Hexo Fluid 配置指南](https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97)","source":"_posts/hexo博客的总结.md","raw":"---\ntitle: Hexo博客的使用总结\ncategories:\n- 博客的总结\ntags: [hexo, 博客搭建, 学习]\nindex_img: /img/article/logo.jpg\ndate: 2022-12-21 11:14:59\n\n---\n\n# git 的使用\n\n### 使用git bash连接到gitee\n\n+ #### 1、创建SSHkey\n 打开Git Bash，输入ssh-keygen -t rsa\n 会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以\n 在 C:\\Users\\“你的用户名”\\.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key\n\n+ #### 2、添加key到Gitee\ngitee->设置->SSH公钥\n把key粘贴进去，标题默认是本机的名字\n\n+ #### 3、ssh链接\n ##### **我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh ~**\n ```\n git remote add gitee git@gitee.com:YourUserName/YourProjectName.git\n ```\n YourUserName和YourProjectName都是要具体看你自己的实际用户名和仓库名字\n 即可，可以通过git remote -v查看\n\n  ```\n  $ssh -T git@gitee.com\n  Hi XXX! You've successfully authenticated, but GITEE.COM does not provide shell access.\n\n  ```\n  eg:\n  ```\n  $ ssh -T git@gitee.com\n  Hi Shmilysw! You've successfully authenticated, but GITEE.COM does not provide shell access.\n  ```\n\n##### **其他都是些git的基本使用**\n\n```\ngit status // 查看工作台状态\ngit add . // 添加文件\ngit commit -m \"备注\" // 提交修改，并备注\ngit push // 推送至远端仓库\n\n```\n\n# Hexo 命令\n[Hexo文档](https://hexo.io/zh-cn/docs/)\n\n+ #### 添加一张md页面\n\n```\n$ hexo new [layout] <title>\n```\n新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。\n\n```\n$ hexo new \"post title with whitespace\"\n```\n\n+ #### 本地查看效果\n```\n$ hexo server\n或\n$ hexo s\n```\n\n+ #### 生成静态文件\n```\n$ hexo generate\n或\n$ hexo g\n```\n\n+ #### 部署网站\n```\n$ hexo deploy\n或\n$ hexo d\n```\n\n+ #### 清除缓存文件\n```\n$ hexo clean\n```\n 清除缓存文件 (db.json) 和已生成的静态文件 (public)。\n 在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n\n### 具体部署步骤\n+ git 进入项目文件下\n ```\n $ hexo clean\n \n $ hexo g\n \n $ hexo d\n ```\n\n+ 打开gitee仓库\n+ 点击服务\n+ 点击Gitee Pages 服务\n+ 进行部署更新\n+ 等待更新 ~~~\n\n# Fluid 主题\n\n##### 主题可以根据自己的偏好自己设置\n\n[Hexo Fluid 用户手册](https://hexo.fluid-dev.com/docs/)\n\n[Hexo Fluid 配置指南](https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97)","slug":"hexo博客的总结","published":1,"updated":"2023-03-25T09:27:34.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgdh3tvv0013ccvzdpll06kc","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"git-的使用\"><a href=\"#git-的使用\" class=\"headerlink\" title=\"git 的使用\"></a>git 的使用</h1><h3 id=\"使用git-bash连接到gitee\"><a href=\"#使用git-bash连接到gitee\" class=\"headerlink\" title=\"使用git bash连接到gitee\"></a>使用git bash连接到gitee</h3><ul>\n<li><h4 id=\"1、创建SSHkey\"><a href=\"#1、创建SSHkey\" class=\"headerlink\" title=\"1、创建SSHkey\"></a>1、创建SSHkey</h4><p>打开Git Bash，输入ssh-keygen -t rsa<br>会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以<br>在 C:\\Users\\“你的用户名”.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key</p>\n</li>\n<li><h4 id=\"2、添加key到Gitee\"><a href=\"#2、添加key到Gitee\" class=\"headerlink\" title=\"2、添加key到Gitee\"></a>2、添加key到Gitee</h4><p>gitee-&gt;设置-&gt;SSH公钥<br>把key粘贴进去，标题默认是本机的名字</p>\n</li>\n<li><h4 id=\"3、ssh链接\"><a href=\"#3、ssh链接\" class=\"headerlink\" title=\"3、ssh链接\"></a>3、ssh链接</h4><h5 id=\"我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh\"><a href=\"#我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh\" class=\"headerlink\" title=\"我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh ~\"></a><strong>我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh ~</strong></h5><div class=\"code-wrapper\"><pre><code class=\"hljs llvm\">git remote <span class=\"hljs-keyword\">add</span> gitee git<span class=\"hljs-title\">@gitee.com</span>:YourUserName/YourProjectName.git</code></pre></div>\n<p>YourUserName和YourProjectName都是要具体看你自己的实际用户名和仓库名字<br>即可，可以通过git remote -v查看</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs ada\">$ssh -T git@gitee.com\nHi XXX! You<span class=\"hljs-symbol\">&#x27;ve</span> successfully authenticated, but GITEE.COM does <span class=\"hljs-keyword\">not</span> provide shell <span class=\"hljs-keyword\">access</span>.\n</code></pre></div>\n<p>eg:</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs ada\">$ ssh -T git@gitee.com\nHi Shmilysw! You<span class=\"hljs-symbol\">&#x27;ve</span> successfully authenticated, but GITEE.COM does <span class=\"hljs-keyword\">not</span> provide shell <span class=\"hljs-keyword\">access</span>.</code></pre></div></li>\n</ul>\n<h5 id=\"其他都是些git的基本使用\"><a href=\"#其他都是些git的基本使用\" class=\"headerlink\" title=\"其他都是些git的基本使用\"></a><strong>其他都是些git的基本使用</strong></h5><div class=\"code-wrapper\"><pre><code class=\"hljs awk\">git status <span class=\"hljs-regexp\">//</span> 查看工作台状态\ngit add . <span class=\"hljs-regexp\">//</span> 添加文件\ngit commit -m <span class=\"hljs-string\">&quot;备注&quot;</span> <span class=\"hljs-regexp\">//</span> 提交修改，并备注\ngit push <span class=\"hljs-regexp\">//</span> 推送至远端仓库\n</code></pre></div>\n\n<h1 id=\"Hexo-命令\"><a href=\"#Hexo-命令\" class=\"headerlink\" title=\"Hexo 命令\"></a>Hexo 命令</h1><p><a href=\"https://hexo.io/zh-cn/docs/\">Hexo文档</a></p>\n<ul>\n<li><h4 id=\"添加一张md页面\"><a href=\"#添加一张md页面\" class=\"headerlink\" title=\"添加一张md页面\"></a>添加一张md页面</h4></li>\n</ul>\n<div class=\"code-wrapper\"><pre><code class=\"hljs gauss\">$ hexo <span class=\"hljs-keyword\">new</span> [layout] &lt;<span class=\"hljs-built_in\">title</span>&gt;</code></pre></div>\n<p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs actionscript\">$ hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-string\">&quot;post title with whitespace&quot;</span></code></pre></div>\n\n<ul>\n<li><h4 id=\"本地查看效果\"><a href=\"#本地查看效果\" class=\"headerlink\" title=\"本地查看效果\"></a>本地查看效果</h4><div class=\"code-wrapper\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo server\n或\n<span class=\"hljs-variable\">$ </span>hexo s</code></pre></div></li>\n<li><h4 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h4><div class=\"code-wrapper\"><pre><code class=\"hljs verilog\">$ hexo <span class=\"hljs-keyword\">generate</span>\n或\n$ hexo g</code></pre></div></li>\n<li><h4 id=\"部署网站\"><a href=\"#部署网站\" class=\"headerlink\" title=\"部署网站\"></a>部署网站</h4><div class=\"code-wrapper\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo deploy\n或\n<span class=\"hljs-variable\">$ </span>hexo d</code></pre></div></li>\n<li><h4 id=\"清除缓存文件\"><a href=\"#清除缓存文件\" class=\"headerlink\" title=\"清除缓存文件\"></a>清除缓存文件</h4><div class=\"code-wrapper\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo clean</code></pre></div>\n<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n</li>\n</ul>\n<h3 id=\"具体部署步骤\"><a href=\"#具体部署步骤\" class=\"headerlink\" title=\"具体部署步骤\"></a>具体部署步骤</h3><ul>\n<li><p>git 进入项目文件下</p>\n<div class=\"code-wrapper\"><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo clean\n\n<span class=\"hljs-variable\">$ </span>hexo g\n\n<span class=\"hljs-variable\">$ </span>hexo d</code></pre></div></li>\n<li><p>打开gitee仓库</p>\n</li>\n<li><p>点击服务</p>\n</li>\n<li><p>点击Gitee Pages 服务</p>\n</li>\n<li><p>进行部署更新</p>\n</li>\n<li><p>等待更新 ~~~</p>\n</li>\n</ul>\n<h1 id=\"Fluid-主题\"><a href=\"#Fluid-主题\" class=\"headerlink\" title=\"Fluid 主题\"></a>Fluid 主题</h1><h5 id=\"主题可以根据自己的偏好自己设置\"><a href=\"#主题可以根据自己的偏好自己设置\" class=\"headerlink\" title=\"主题可以根据自己的偏好自己设置\"></a>主题可以根据自己的偏好自己设置</h5><p><a href=\"https://hexo.fluid-dev.com/docs/\">Hexo Fluid 用户手册</a></p>\n<p><a href=\"https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97\">Hexo Fluid 配置指南</a></p>\n","site":{"data":{}},"wordcount":1142,"excerpt":"","more":"<h1 id=\"git-的使用\"><a href=\"#git-的使用\" class=\"headerlink\" title=\"git 的使用\"></a>git 的使用</h1><h3 id=\"使用git-bash连接到gitee\"><a href=\"#使用git-bash连接到gitee\" class=\"headerlink\" title=\"使用git bash连接到gitee\"></a>使用git bash连接到gitee</h3><ul>\n<li><h4 id=\"1、创建SSHkey\"><a href=\"#1、创建SSHkey\" class=\"headerlink\" title=\"1、创建SSHkey\"></a>1、创建SSHkey</h4><p>打开Git Bash，输入ssh-keygen -t rsa<br>会分别提示你文件名，密码（可不设置），确认密码。一般三次回车就可以<br>在 C:\\Users\\“你的用户名”.ssh 目录下就会有.pub结尾的文件，用记事本打开，复制里面的东西，这就是你的SSH key</p>\n</li>\n<li><h4 id=\"2、添加key到Gitee\"><a href=\"#2、添加key到Gitee\" class=\"headerlink\" title=\"2、添加key到Gitee\"></a>2、添加key到Gitee</h4><p>gitee-&gt;设置-&gt;SSH公钥<br>把key粘贴进去，标题默认是本机的名字</p>\n</li>\n<li><h4 id=\"3、ssh链接\"><a href=\"#3、ssh链接\" class=\"headerlink\" title=\"3、ssh链接\"></a>3、ssh链接</h4><h5 id=\"我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh\"><a href=\"#我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh\" class=\"headerlink\" title=\"我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh ~\"></a><strong>我一般喜欢先建个仓库，然后本地再去连接那个仓库，hh ~</strong></h5><pre><code class=\"hljs llvm\">git remote <span class=\"hljs-keyword\">add</span> gitee git<span class=\"hljs-title\">@gitee.com</span>:YourUserName/YourProjectName.git</code></pre>\n<p>YourUserName和YourProjectName都是要具体看你自己的实际用户名和仓库名字<br>即可，可以通过git remote -v查看</p>\n<pre><code class=\"hljs ada\">$ssh -T git@gitee.com\nHi XXX! You<span class=\"hljs-symbol\">&#x27;ve</span> successfully authenticated, but GITEE.COM does <span class=\"hljs-keyword\">not</span> provide shell <span class=\"hljs-keyword\">access</span>.\n</code></pre>\n<p>eg:</p>\n<pre><code class=\"hljs ada\">$ ssh -T git@gitee.com\nHi Shmilysw! You<span class=\"hljs-symbol\">&#x27;ve</span> successfully authenticated, but GITEE.COM does <span class=\"hljs-keyword\">not</span> provide shell <span class=\"hljs-keyword\">access</span>.</code></pre></li>\n</ul>\n<h5 id=\"其他都是些git的基本使用\"><a href=\"#其他都是些git的基本使用\" class=\"headerlink\" title=\"其他都是些git的基本使用\"></a><strong>其他都是些git的基本使用</strong></h5><pre><code class=\"hljs awk\">git status <span class=\"hljs-regexp\">//</span> 查看工作台状态\ngit add . <span class=\"hljs-regexp\">//</span> 添加文件\ngit commit -m <span class=\"hljs-string\">&quot;备注&quot;</span> <span class=\"hljs-regexp\">//</span> 提交修改，并备注\ngit push <span class=\"hljs-regexp\">//</span> 推送至远端仓库\n</code></pre>\n\n<h1 id=\"Hexo-命令\"><a href=\"#Hexo-命令\" class=\"headerlink\" title=\"Hexo 命令\"></a>Hexo 命令</h1><p><a href=\"https://hexo.io/zh-cn/docs/\">Hexo文档</a></p>\n<ul>\n<li><h4 id=\"添加一张md页面\"><a href=\"#添加一张md页面\" class=\"headerlink\" title=\"添加一张md页面\"></a>添加一张md页面</h4></li>\n</ul>\n<pre><code class=\"hljs gauss\">$ hexo <span class=\"hljs-keyword\">new</span> [layout] &lt;<span class=\"hljs-built_in\">title</span>&gt;</code></pre>\n<p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p>\n<pre><code class=\"hljs actionscript\">$ hexo <span class=\"hljs-keyword\">new</span> <span class=\"hljs-string\">&quot;post title with whitespace&quot;</span></code></pre>\n\n<ul>\n<li><h4 id=\"本地查看效果\"><a href=\"#本地查看效果\" class=\"headerlink\" title=\"本地查看效果\"></a>本地查看效果</h4><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo server\n或\n<span class=\"hljs-variable\">$ </span>hexo s</code></pre></li>\n<li><h4 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h4><pre><code class=\"hljs verilog\">$ hexo <span class=\"hljs-keyword\">generate</span>\n或\n$ hexo g</code></pre></li>\n<li><h4 id=\"部署网站\"><a href=\"#部署网站\" class=\"headerlink\" title=\"部署网站\"></a>部署网站</h4><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo deploy\n或\n<span class=\"hljs-variable\">$ </span>hexo d</code></pre></li>\n<li><h4 id=\"清除缓存文件\"><a href=\"#清除缓存文件\" class=\"headerlink\" title=\"清除缓存文件\"></a>清除缓存文件</h4><pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo clean</code></pre>\n<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n</li>\n</ul>\n<h3 id=\"具体部署步骤\"><a href=\"#具体部署步骤\" class=\"headerlink\" title=\"具体部署步骤\"></a>具体部署步骤</h3><ul>\n<li><p>git 进入项目文件下</p>\n<pre><code class=\"hljs crystal\"><span class=\"hljs-variable\">$ </span>hexo clean\n\n<span class=\"hljs-variable\">$ </span>hexo g\n\n<span class=\"hljs-variable\">$ </span>hexo d</code></pre></li>\n<li><p>打开gitee仓库</p>\n</li>\n<li><p>点击服务</p>\n</li>\n<li><p>点击Gitee Pages 服务</p>\n</li>\n<li><p>进行部署更新</p>\n</li>\n<li><p>等待更新 ~~~</p>\n</li>\n</ul>\n<h1 id=\"Fluid-主题\"><a href=\"#Fluid-主题\" class=\"headerlink\" title=\"Fluid 主题\"></a>Fluid 主题</h1><h5 id=\"主题可以根据自己的偏好自己设置\"><a href=\"#主题可以根据自己的偏好自己设置\" class=\"headerlink\" title=\"主题可以根据自己的偏好自己设置\"></a>主题可以根据自己的偏好自己设置</h5><p><a href=\"https://hexo.fluid-dev.com/docs/\">Hexo Fluid 用户手册</a></p>\n<p><a href=\"https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97\">Hexo Fluid 配置指南</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clgdh3tuy0001ccvz244p6x1c","category_id":"clgdh3tv80004ccvz9tssbt1o","_id":"clgdh3tvj000eccvzgehs9un3"},{"post_id":"clgdh3tv50003ccvzarug6vh7","category_id":"clgdh3tvg000accvz96iu1itx","_id":"clgdh3tvl000iccvz8afg7gg0"},{"post_id":"clgdh3tvd0007ccvz31slfqqt","category_id":"clgdh3tvj000fccvz8j4q975w","_id":"clgdh3tvm000mccvz960m4hbi"},{"post_id":"clgdh3tvs000zccvz9gbndk1j","category_id":"clgdh3tvv0011ccvzhcb9fko8","_id":"clgdh3tvy0016ccvz2c4j53au"},{"post_id":"clgdh3tvv0013ccvzdpll06kc","category_id":"clgdh3tvx0014ccvz23532d0a","_id":"clgdh3tvz001accvzhg3g6ypq"}],"PostTag":[{"post_id":"clgdh3tuy0001ccvz244p6x1c","tag_id":"clgdh3tvb0005ccvzfudb84x0","_id":"clgdh3tvm000kccvze0815obs"},{"post_id":"clgdh3tuy0001ccvz244p6x1c","tag_id":"clgdh3tvh000bccvze57m2r66","_id":"clgdh3tvm000lccvz40aj27uw"},{"post_id":"clgdh3tuy0001ccvz244p6x1c","tag_id":"clgdh3tvk000gccvz7if6haug","_id":"clgdh3tvn000occvzgbbsa5cv"},{"post_id":"clgdh3tv50003ccvzarug6vh7","tag_id":"clgdh3tvl000jccvzgaxw7dzl","_id":"clgdh3tvo000qccvzf20x0711"},{"post_id":"clgdh3tv50003ccvzarug6vh7","tag_id":"clgdh3tvm000nccvz5cpj5jls","_id":"clgdh3tvo000rccvz3bf69rw4"},{"post_id":"clgdh3tvd0007ccvz31slfqqt","tag_id":"clgdh3tvn000pccvz51mvb2iz","_id":"clgdh3tvq000vccvz53mgdwop"},{"post_id":"clgdh3tvd0007ccvz31slfqqt","tag_id":"clgdh3tvo000sccvzfp4h1vc6","_id":"clgdh3tvq000wccvzd14ybyaw"},{"post_id":"clgdh3tvd0007ccvz31slfqqt","tag_id":"clgdh3tvp000tccvz6t3fg4lr","_id":"clgdh3tvq000xccvz2men8fjg"},{"post_id":"clgdh3tvd0007ccvz31slfqqt","tag_id":"clgdh3tvp000uccvzbq2s8wr2","_id":"clgdh3tvq000yccvzboaye14m"},{"post_id":"clgdh3tvs000zccvz9gbndk1j","tag_id":"clgdh3tvv0012ccvzhoeehfeh","_id":"clgdh3tvz0018ccvzdd0j02x4"},{"post_id":"clgdh3tvs000zccvz9gbndk1j","tag_id":"clgdh3tvx0015ccvzcadval7r","_id":"clgdh3tvz0019ccvzex6l3g2v"},{"post_id":"clgdh3tvs000zccvz9gbndk1j","tag_id":"clgdh3tvk000gccvz7if6haug","_id":"clgdh3tvz001cccvzh7d6g95x"},{"post_id":"clgdh3tvv0013ccvzdpll06kc","tag_id":"clgdh3tvy0017ccvz31s6drfu","_id":"clgdh3tvz001dccvzf0tb5yh9"},{"post_id":"clgdh3tvv0013ccvzdpll06kc","tag_id":"clgdh3tvz001bccvzdcc6ac6j","_id":"clgdh3tw0001eccvzet8u6q5d"},{"post_id":"clgdh3tvv0013ccvzdpll06kc","tag_id":"clgdh3tvk000gccvz7if6haug","_id":"clgdh3tw0001fccvz5h62boxa"}],"Tag":[{"name":"JavaScript","_id":"clgdh3tvb0005ccvzfudb84x0"},{"name":"编程语言学习","_id":"clgdh3tvh000bccvze57m2r66"},{"name":"学习","_id":"clgdh3tvk000gccvz7if6haug"},{"name":"Linux","_id":"clgdh3tvl000jccvzgaxw7dzl"},{"name":"操作系统","_id":"clgdh3tvm000nccvz5cpj5jls"},{"name":"LeetCode","_id":"clgdh3tvn000pccvz51mvb2iz"},{"name":"数位DP","_id":"clgdh3tvo000sccvzfp4h1vc6"},{"name":"算法","_id":"clgdh3tvp000tccvz6t3fg4lr"},{"name":"模板","_id":"clgdh3tvp000uccvzbq2s8wr2"},{"name":"git","_id":"clgdh3tvv0012ccvzhoeehfeh"},{"name":"github","_id":"clgdh3tvx0015ccvzcadval7r"},{"name":"hexo","_id":"clgdh3tvy0017ccvz31s6drfu"},{"name":"博客搭建","_id":"clgdh3tvz001bccvzdcc6ac6j"}]}}